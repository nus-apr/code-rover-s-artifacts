Accepting input from '/tmp/poc'
Usage for fuzzing: honggfuzz -P [flags] -- /out/zeek-smb-fuzzer
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6070004a7498 at pc 0x70759a2ccba3 bp 0x7ffddac67810 sp 0x7ffddac67808
READ of size 1 at 0x6070004a7498 thread T0
SCARINESS: 22 (1-byte-read-heap-buffer-overflow-far-from-bounds)
    #0 0x70759a2ccba2 in std::__1::__optional_storage_base<zeek::ZVal, false>::has_value() const /usr/local/bin/../include/c++/v1/optional:325:22
    #1 0x70759a2ccba2 in std::__1::optional<zeek::ZVal>& std::__1::optional<zeek::ZVal>::operator=<zeek::ZVal, void>(zeek::ZVal&&) /usr/local/bin/../include/c++/v1/optional:837:19
    #2 0x70759a2ccba2 in zeek::RecordVal::Assign(int, unsigned int) /src/zeek/src/include/zeek/Val.h:1147:24
    #3 0x70759a2ccba2 in binpac::SMB::SMB_Conn::proc_smb2_set_info_request_file_fscontrol(binpac::SMB::SMB2_file_fscontrol_info*) /src/zeek/build/src/analyzer/protocol/smb/smb_pac.cc:1567:7
    #4 0x70759a31d9e2 in binpac::SMB::SMB2_file_fscontrol_info::Parse(unsigned char const*, unsigned char const*, binpac::SMB::ContextSMB*, int) /src/zeek/build/src/analyzer/protocol/smb/smb_pac.cc:12540:35
    #5 0x70759a31f93a in binpac::SMB::SMB2_set_info_filesystem_class::Parse(unsigned char const*, unsigned char const*, binpac::SMB::ContextSMB*, int) /src/zeek/build/src/analyzer/protocol/smb/smb_pac.cc:12881:21
    #6 0x70759a320121 in binpac::SMB::SMB2_set_info_request::Parse(unsigned char const*, unsigned char const*, binpac::SMB::ContextSMB*, int) /src/zeek/build/src/analyzer/protocol/smb/smb_pac.cc:13029:48
    #7 0x70759a32e723 in binpac::SMB::SMB2_Message_Request::Parse(unsigned char const*, unsigned char const*, binpac::SMB::ContextSMB*) /src/zeek/build/src/analyzer/protocol/smb/smb_pac.cc:15731:34
    #8 0x70759a32d658 in binpac::SMB::SMB2_Message::Parse(unsigned char const*, unsigned char const*, binpac::SMB::ContextSMB*) /src/zeek/build/src/analyzer/protocol/smb/smb_pac.cc:15379:32
    #9 0x70759a325663 in binpac::SMB::SMB2_PDU::Parse(unsigned char const*, unsigned char const*, binpac::SMB::ContextSMB*) /src/zeek/build/src/analyzer/protocol/smb/smb_pac.cc:15317:24
    #10 0x70759a32477e in binpac::SMB::SMB_Protocol_Identifier::Parse(unsigned char const*, unsigned char const*, binpac::SMB::ContextSMB*) /src/zeek/build/src/analyzer/protocol/smb/smb_pac.cc:13801:26
    #11 0x70759a324049 in binpac::SMB::SMB_TCP::ParseBuffer(binpac::FlowBuffer*, binpac::SMB::ContextSMB*) /src/zeek/build/src/analyzer/protocol/smb/smb_pac.cc:13684:29
    #12 0x70759a337da9 in binpac::SMB::SMB_Flow::NewData(unsigned char const*, unsigned char const*) /src/zeek/build/src/analyzer/protocol/smb/smb_pac.cc:17470:46
    #13 0x70759a27d68b in binpac::SMB::SMB_Conn::NewData(bool, unsigned char const*, unsigned char const*) /src/zeek/build/src/analyzer/protocol/smb/smb_pac.cc
    #14 0x70759a23a03e in zeek::analyzer::smb::SMB_Analyzer::DeliverStream(int, unsigned char const*, bool) /src/zeek/src/analyzer/protocol/smb/SMB.cc:73:11
    #15 0x707599d20a7d in zeek::analyzer::Analyzer::NextStream(int, unsigned char const*, bool) /src/zeek/src/analyzer/Analyzer.cc:249:4
    #16 0x4e2520 in LLVMFuzzerTestOneInput /src/zeek/src/fuzzers/generic-analyzer-fuzzer.cc:74:7
    #17 0x4e9fab in main (/out/zeek-smb-fuzzer+0x4e9fab)
    #18 0x707595cbd082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 87b331c034a6458c64ce09c03939e947212e18ce)
    #19 0x41fc7d in _start (/out/zeek-smb-fuzzer+0x41fc7d)

DEDUP_TOKEN: std::__1::__optional_storage_base<zeek::ZVal, false>::has_value() const--std::__1::optional<zeek::ZVal>& std::__1::optional<zeek::ZVal>::operator=<zeek::ZVal, void>(zeek::ZVal&&)--zeek::RecordVal::Assign(int, unsigned int)
0x6070004a7498 is located 8 bytes to the right of 80-byte region [0x6070004a7440,0x6070004a7490)
allocated by thread T0 here:
    #0 0x4dbefd in operator new(unsigned long) /src/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:95:3
    #1 0x70759935ef0b in void* std::__1::__libcpp_operator_new<unsigned long>(unsigned long) /usr/local/bin/../include/c++/v1/new:245:10
    #2 0x70759935ef0b in std::__1::__libcpp_allocate(unsigned long, unsigned long) /usr/local/bin/../include/c++/v1/new:271:10
    #3 0x70759935ef0b in std::__1::allocator<std::__1::optional<zeek::ZVal> >::allocate(unsigned long) /usr/local/bin/../include/c++/v1/__memory/allocator.h:105:38
    #4 0x70759935ef0b in std::__1::allocator_traits<std::__1::allocator<std::__1::optional<zeek::ZVal> > >::allocate(std::__1::allocator<std::__1::optional<zeek::ZVal> >&, unsigned long) /usr/local/bin/../include/c++/v1/__memory/allocator_traits.h:262:20
    #5 0x70759935ef0b in std::__1::__split_buffer<std::__1::optional<zeek::ZVal>, std::__1::allocator<std::__1::optional<zeek::ZVal> >&>::__split_buffer(unsigned long, unsigned long, std::__1::allocator<std::__1::optional<zeek::ZVal> >&) /usr/local/bin/../include/c++/v1/__split_buffer:306:29
    #6 0x70759935ef0b in std::__1::vector<std::__1::optional<zeek::ZVal>, std::__1::allocator<std::__1::optional<zeek::ZVal> > >::reserve(unsigned long) /usr/local/bin/../include/c++/v1/vector:1489:53
    #7 0x70759935e68c in zeek::RecordVal::RecordVal(zeek::IntrusivePtr<zeek::RecordType>, bool) /src/zeek/src/Val.cc:2748:14
    #8 0x707598dc4074 in zeek::IntrusivePtr<zeek::RecordVal> zeek::make_intrusive<zeek::RecordVal, zeek::IntrusivePtr<zeek::RecordType>&>(zeek::IntrusivePtr<zeek::RecordType>&) /src/zeek/src/include/zeek/IntrusivePtr.h:195:26
    #9 0x70759a2cba7b in binpac::SMB::SMB_Conn::proc_smb2_set_info_request_file_fscontrol(binpac::SMB::SMB2_file_fscontrol_info*) /src/zeek/build/src/analyzer/protocol/smb/smb_pac.cc:1561:13
    #10 0x70759a31d9e2 in binpac::SMB::SMB2_file_fscontrol_info::Parse(unsigned char const*, unsigned char const*, binpac::SMB::ContextSMB*, int) /src/zeek/build/src/analyzer/protocol/smb/smb_pac.cc:12540:35
    #11 0x70759a31f93a in binpac::SMB::SMB2_set_info_filesystem_class::Parse(unsigned char const*, unsigned char const*, binpac::SMB::ContextSMB*, int) /src/zeek/build/src/analyzer/protocol/smb/smb_pac.cc:12881:21
    #12 0x70759a320121 in binpac::SMB::SMB2_set_info_request::Parse(unsigned char const*, unsigned char const*, binpac::SMB::ContextSMB*, int) /src/zeek/build/src/analyzer/protocol/smb/smb_pac.cc:13029:48
    #13 0x70759a32e723 in binpac::SMB::SMB2_Message_Request::Parse(unsigned char const*, unsigned char const*, binpac::SMB::ContextSMB*) /src/zeek/build/src/analyzer/protocol/smb/smb_pac.cc:15731:34
    #14 0x70759a32d658 in binpac::SMB::SMB2_Message::Parse(unsigned char const*, unsigned char const*, binpac::SMB::ContextSMB*) /src/zeek/build/src/analyzer/protocol/smb/smb_pac.cc:15379:32
    #15 0x70759a325663 in binpac::SMB::SMB2_PDU::Parse(unsigned char const*, unsigned char const*, binpac::SMB::ContextSMB*) /src/zeek/build/src/analyzer/protocol/smb/smb_pac.cc:15317:24
    #16 0x70759a32477e in binpac::SMB::SMB_Protocol_Identifier::Parse(unsigned char const*, unsigned char const*, binpac::SMB::ContextSMB*) /src/zeek/build/src/analyzer/protocol/smb/smb_pac.cc:13801:26
    #17 0x70759a324049 in binpac::SMB::SMB_TCP::ParseBuffer(binpac::FlowBuffer*, binpac::SMB::ContextSMB*) /src/zeek/build/src/analyzer/protocol/smb/smb_pac.cc:13684:29
    #18 0x70759a337da9 in binpac::SMB::SMB_Flow::NewData(unsigned char const*, unsigned char const*) /src/zeek/build/src/analyzer/protocol/smb/smb_pac.cc:17470:46
    #19 0x70759a27d68b in binpac::SMB::SMB_Conn::NewData(bool, unsigned char const*, unsigned char const*) /src/zeek/build/src/analyzer/protocol/smb/smb_pac.cc
    #20 0x70759a23a03e in zeek::analyzer::smb::SMB_Analyzer::DeliverStream(int, unsigned char const*, bool) /src/zeek/src/analyzer/protocol/smb/SMB.cc:73:11
    #21 0x707599d20a7d in zeek::analyzer::Analyzer::NextStream(int, unsigned char const*, bool) /src/zeek/src/analyzer/Analyzer.cc:249:4
    #22 0x4e2520 in LLVMFuzzerTestOneInput /src/zeek/src/fuzzers/generic-analyzer-fuzzer.cc:74:7
    #23 0x4e9fab in main (/out/zeek-smb-fuzzer+0x4e9fab)

DEDUP_TOKEN: operator new(unsigned long)--void* std::__1::__libcpp_operator_new<unsigned long>(unsigned long)--std::__1::__libcpp_allocate(unsigned long, unsigned long)
SUMMARY: AddressSanitizer: heap-buffer-overflow /usr/local/bin/../include/c++/v1/optional:325:22 in std::__1::__optional_storage_base<zeek::ZVal, false>::has_value() const
Shadow bytes around the buggy address:
  0x0c0e8008ce40: fa fa fd fd fd fd fd fd fd fd fd fd fa fa fa fa
  0x0c0e8008ce50: fd fd fd fd fd fd fd fd fd fd fa fa fa fa 00 00
  0x0c0e8008ce60: 00 00 00 00 00 00 00 02 fa fa fa fa fd fd fd fd
  0x0c0e8008ce70: fd fd fd fd fd fa fa fa fa fa fd fd fd fd fd fd
  0x0c0e8008ce80: fd fd fd fd fa fa fa fa 00 00 00 00 00 00 00 00
=>0x0c0e8008ce90: 00 00 fa[fa]fa fa fd fd fd fd fd fd fd fd fd fa
  0x0c0e8008cea0: fa fa fa fa 00 00 00 00 00 00 00 00 03 fa fa fa
  0x0c0e8008ceb0: fa fa fd fd fd fd fd fd fd fd fd fd fa fa fa fa
  0x0c0e8008cec0: fd fd fd fd fd fd fd fd fd fd fa fa fa fa fd fd
  0x0c0e8008ced0: fd fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa
  0x0c0e8008cee0: fa fa fa fa fa fa fa fa fa fa 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING
