INFO: Seed: 2194306993
INFO: Loaded 1 modules   (785 inline 8-bit counters): 785 [0x7f8420, 0x7f8731), 
INFO: Loaded 1 PC tables (785 PCs): 785 [0x5aaee8,0x5adff8), 
/out/TopicTree: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7488bccf4e20 at pc 0x000000559aee bp 0x7ffe24145f30 sp 0x7ffe24145f28
WRITE of size 8 at 0x7488bccf4e20 thread T0
SCARINESS: 57 (8-byte-write-stack-buffer-overflow)
    #0 0x559aed in uWS::TopicTree::trimTree(uWS::Topic*) /src/uWebSockets/fuzzing/./../src/TopicTree.h:103:39
    #1 0x554d1a in uWS::TopicTree::unsubscribeAll(uWS::Subscriber*, bool) /src/uWebSockets/fuzzing/./../src/TopicTree.h:308:17
    #2 0x5539d7 in LLVMFuzzerTestOneInput /src/uWebSockets/fuzzing/TopicTree.cpp:82:19
    #3 0x458701 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:559:15
    #4 0x443ea2 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:301:6
    #5 0x449e3d in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:801:9
    #6 0x471722 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #7 0x7488bbc7483f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #8 0x41e648 in _start (/out/TopicTree+0x41e648)

DEDUP_TOKEN: uWS::TopicTree::trimTree(uWS::Topic*)--uWS::TopicTree::unsubscribeAll(uWS::Subscriber*, bool)--LLVMFuzzerTestOneInput
Address 0x7488bccf4e20 is located in stack of thread T0 at offset 544 in frame
    #0 0x558def in uWS::TopicTree::trimTree(uWS::Topic*) /src/uWebSockets/fuzzing/./../src/TopicTree.h:82

DEDUP_TOKEN: uWS::TopicTree::trimTree(uWS::Topic*)
  This frame has 1 object(s):
    [32, 544) 'tmp' (line 99) <== Memory access at offset 544 overflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /src/uWebSockets/fuzzing/./../src/TopicTree.h:103:39 in uWS::TopicTree::trimTree(uWS::Topic*)
Shadow bytes around the buggy address:
  0x0e9197996970: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0e9197996980: f1 f1 f1 f1 00 00 00 00 00 00 00 00 00 00 00 00
  0x0e9197996990: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0e91979969a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0e91979969b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0e91979969c0: 00 00 00 00[f3]f3 f3 f3 f3 f3 f3 f3 00 00 00 00
  0x0e91979969d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0e91979969e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0e91979969f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0e9197996a00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0e9197996a10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING
