INFO: Seed: 2333982607
INFO: Loaded 1 modules   (1892 inline 8-bit counters): 1892 [0x8015f0, 0x801d54), 
INFO: Loaded 1 PC tables (1892 PCs): 1892 [0x5b1330,0x5b8970), 
/out/jbig2_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
jbig2 decoder FATAL ERROR: insufficient data to parse segment header (segment 0x20ff)
=================================================================
==14==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x7f7a1f77f810 at pc 0x00000057504d bp 0x7ffe26700900 sp 0x7ffe267008f8
READ of size 1 at 0x7f7a1f77f810 thread T0
SCARINESS: 12 (1-byte-read-heap-buffer-overflow)
    #0 0x57504c in jbig2_image_get_pixels_fast /src/jbig2dec/jbig2_image.h:60:40
    #1 0x572455 in jbig2_decode_generic_template0_TPGDON /src/jbig2dec/jbig2_generic.c:962:31
    #2 0x57119d in jbig2_immediate_generic_region /src/jbig2dec/jbig2_generic.c:1360:16
    #3 0x55af7b in jbig2_complete_page /src/jbig2dec/jbig2_page.c:214:20
    #4 0x5541dd in LLVMFuzzerTestOneInput /src/jbig2_fuzzer.cc:109:9
    #5 0x459d81 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:556:15
    #6 0x4448a1 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:292:6
    #7 0x44a55e in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:774:9
    #8 0x474482 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:19:10
    #9 0x7f7a24a6a83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #10 0x41dd18 in _start (/out/jbig2_fuzzer+0x41dd18)

DEDUP_TOKEN: jbig2_image_get_pixels_fast--jbig2_decode_generic_template0_TPGDON--jbig2_immediate_generic_region
0x7f7a1f77f810 is located 0 bytes to the right of 60284944-byte region [0x7f7a1be01800,0x7f7a1f77f810)
allocated by thread T0 here:
    #0 0x52191d in malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:145:3
    #1 0x554473 in jbig2_alloc(_Jbig2Allocator*, unsigned long) /src/jbig2_fuzzer.cc:38:9
    #2 0x57fd6f in jbig2_image_new /src/jbig2dec/jbig2_image.c:66:19
    #3 0x570e75 in jbig2_immediate_generic_region /src/jbig2dec/jbig2_generic.c:1329:13
    #4 0x55af7b in jbig2_complete_page /src/jbig2dec/jbig2_page.c:214:20
    #5 0x5541dd in LLVMFuzzerTestOneInput /src/jbig2_fuzzer.cc:109:9
    #6 0x459d81 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:556:15
    #7 0x4448a1 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:292:6
    #8 0x44a55e in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:774:9
    #9 0x474482 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:19:10
    #10 0x7f7a24a6a83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: malloc--jbig2_alloc(_Jbig2Allocator*, unsigned long)--jbig2_image_new
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/jbig2dec/jbig2_image.h:60:40 in jbig2_image_get_pixels_fast
Shadow bytes around the buggy address:
  0x0fefc3ee7eb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0fefc3ee7ec0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0fefc3ee7ed0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0fefc3ee7ee0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0fefc3ee7ef0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0fefc3ee7f00: 00 00[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0fefc3ee7f10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0fefc3ee7f20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0fefc3ee7f30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0fefc3ee7f40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0fefc3ee7f50: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==14==ABORTING
