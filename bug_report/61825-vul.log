INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 2230058413
INFO: Loaded 1 modules   (23400 inline 8-bit counters): 23400 [0x87882f0, 0x878de58), 
INFO: Loaded 1 PC tables (23400 PCs): 23400 [0x86dc2d4,0x8709e14), 
/out/xaac_enc_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0xef403f88 at pc 0x081fe3ea bp 0xff9cf3c8 sp 0xff9cf3c0
READ of size 1 at 0xef403f88 thread T0
SCARINESS: 12 (1-byte-read-heap-buffer-overflow)
    #0 0x81fe3e9 in iusace_process /src/libxaac/encoder/ixheaace_api.c:3252:26
    #1 0x81fe3e9 in ixheaace_process /src/libxaac/encoder/ixheaace_api.c:3580:13
    #2 0x81d2484 in LLVMFuzzerTestOneInput /src/libxaac/fuzzer/xaac_enc_fuzzer.cpp:407:5
    #3 0x808fa1e in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned int) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
    #4 0x807a97e in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned int) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #5 0x8080580 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned int)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9
    #6 0x80aa167 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #7 0xf7b11ed4 in __libc_start_main (/lib32/libc.so.6+0x1aed4) (BuildId: d56935956a210bf85f6592f3178b979ad4f7b35f)
    #8 0x8071ac5 in _start (/out/xaac_enc_fuzzer+0x8071ac5)

DEDUP_TOKEN: iusace_process--ixheaace_process--LLVMFuzzerTestOneInput
0xef403f88 is located 0 bytes to the right of 776-byte region [0xef403c80,0xef403f88)
allocated by thread T0 here:
    #0 0x818c0ca in posix_memalign /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:145:3
    #1 0x81ceb04 in malloc_global(unsigned int, unsigned int) /src/libxaac/fuzzer/xaac_enc_fuzzer.cpp:41:7
    #2 0x81e2668 in ixheaace_alloc_and_assign_mem /src/libxaac/encoder/ixheaace_api.c:1422:9
    #3 0x81e2668 in ixheaace_allocate /src/libxaac/encoder/ixheaace_api.c:3365:14
    #4 0x81f0f7d in ixheaace_create /src/libxaac/encoder/ixheaace_api.c:3558:14
    #5 0x81d2149 in LLVMFuzzerTestOneInput /src/libxaac/fuzzer/xaac_enc_fuzzer.cpp:380:14
    #6 0x808fa1e in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned int) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
    #7 0x807a97e in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned int) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #8 0x8080580 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned int)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9
    #9 0x80aa167 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #10 0xf7b11ed4 in __libc_start_main (/lib32/libc.so.6+0x1aed4) (BuildId: d56935956a210bf85f6592f3178b979ad4f7b35f)

DEDUP_TOKEN: posix_memalign--malloc_global(unsigned int, unsigned int)--ixheaace_alloc_and_assign_mem
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/libxaac/encoder/ixheaace_api.c:3252:26 in iusace_process
Shadow bytes around the buggy address:
  0x3de807a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x3de807b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x3de807c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x3de807d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x3de807e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x3de807f0: 00[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3de80800: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3de80810: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3de80820: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3de80830: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3de80840: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING
