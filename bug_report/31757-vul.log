INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 2323538949
INFO: Loaded 1 modules   (7960 inline 8-bit counters): 7960 [0x91fbc0, 0x921ad8), 
INFO: Loaded 1 PC tables (7960 PCs): 7960 [0x6b0bc8,0x6cfd48), 
/out/avc_dec_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x624000007790 at pc 0x0000005b5742 bp 0x7fff612010e0 sp 0x7fff612010d8
WRITE of size 8 at 0x624000007790 thread T0
SCARINESS: 52 (8-byte-write-heap-buffer-overflow-far-from-bounds)
    #0 0x5b5741 in ih264d_mark_err_slice_skip /src/libavc/decoder/ih264d_parse_pslice.c:1711:60
    #1 0x55f7b6 in ih264d_video_decode /src/libavc/decoder/ih264d_api.c:2440:16
    #2 0x567627 in ih264d_api_function /src/libavc/decoder/ih264d_api.c:4169:26
    #3 0x557172 in Codec::decodeFrame(unsigned char const*, unsigned long, unsigned long*) /src/libavc/fuzzer/avc_dec_fuzzer.cpp:313:9
    #4 0x557adf in LLVMFuzzerTestOneInput /src/libavc/fuzzer/avc_dec_fuzzer.cpp:362:18
    #5 0x4598c1 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:599:15
    #6 0x443642 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:323:6
    #7 0x449985 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:856:9
    #8 0x4738a2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #9 0x70abf879083f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #10 0x41e658 in _start (/out/avc_dec_fuzzer+0x41e658)

DEDUP_TOKEN: ih264d_mark_err_slice_skip--ih264d_video_decode--ih264d_api_function
Address 0x624000007790 is a wild pointer.
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/libavc/decoder/ih264d_parse_pslice.c:1711:60 in ih264d_mark_err_slice_skip
Shadow bytes around the buggy address:
  0x0c487fff8ea0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c487fff8eb0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c487fff8ec0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c487fff8ed0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c487fff8ee0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
=>0x0c487fff8ef0: fa fa[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c487fff8f00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c487fff8f10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c487fff8f20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c487fff8f30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c487fff8f40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING
