INFO: Seed: 2177651283
INFO: Loaded 1 modules   (178987 inline 8-bit counters): 178987 [0x1df9600, 0x1e2512b), 
INFO: Loaded 1 PC tables (178987 PCs): 178987 [0x1e25130,0x20e03e0), 
/out/assimp_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
Info,  T0: Load $$$___magic___$$$.
Info,  T0: File extension not known, trying signature-based detection
Info,  T0: Found a matching importer for this file format: Wavefront Object Importer.
Info,  T0: Import root directory is './'
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000000200 at pc 0x0000009827e1 bp 0x7ffd48a41700 sp 0x7ffd48a416f8
WRITE of size 1 at 0x602000000200 thread T0
SCARINESS: 31 (1-byte-write-heap-buffer-overflow)
    #0 0x9827e0 in Assimp::IOStreamBuffer<char>::getNextDataLine(std::__1::vector<char, std::__1::allocator<char> >&, char) /src/assimp/include/assimp/IOStreamBuffer.h:291:17
    #1 0x981660 in Assimp::ObjFileParser::parseFile(Assimp::IOStreamBuffer<char>&) /src/assimp/code/AssetLib/Obj/ObjFileParser.cpp:122:25
    #2 0x980b55 in Assimp::ObjFileParser::ObjFileParser(Assimp::IOStreamBuffer<char>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Assimp::IOSystem*, Assimp::ProgressHandler*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /src/assimp/code/AssetLib/Obj/ObjFileParser.cpp:97:5
    #3 0x978645 in Assimp::ObjFileImporter::InternReadFile(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, aiScene*, Assimp::IOSystem*) /src/assimp/code/AssetLib/Obj/ObjFileImporter.cpp:141:19
    #4 0x124e908 in Assimp::BaseImporter::ReadFile(Assimp::Importer*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Assimp::IOSystem*) /src/assimp/code/Common/BaseImporter.cpp:127:9
    #5 0x59f0a2 in Assimp::Importer::ReadFile(char const*, unsigned int) /src/assimp/code/Common/Importer.cpp:656:30
    #6 0x59e000 in Assimp::Importer::ReadFileFromMemory(void const*, unsigned long, unsigned int, char const*) /src/assimp/code/Common/Importer.cpp:502:5
    #7 0x556fcf in LLVMFuzzerTestOneInput /src/assimp/fuzz/assimp_fuzzer.cc:53:34
    #8 0x45e781 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:558:15
    #9 0x449f12 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:296:6
    #10 0x44ff2e in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:796:9
    #11 0x477942 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:19:10
    #12 0x77cd538e383f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #13 0x424f58 in _start (/out/assimp_fuzzer+0x424f58)

DEDUP_TOKEN: Assimp::IOStreamBuffer<char>::getNextDataLine(std::__1::vector<char, std::__1::allocator<char> >&, char)--Assimp::ObjFileParser::parseFile(Assimp::IOStreamBuffer<char>&)--Assimp::ObjFileParser::ObjFileParser(Assimp::IOStreamBuffer<char>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Assimp::IOSystem*, Assimp::ProgressHandler*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
0x602000000200 is located 0 bytes to the right of 16-byte region [0x6020000001f0,0x602000000200)
allocated by thread T0 here:
    #0 0x5545ad in operator new(unsigned long) /src/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:99:3
    #1 0x574370 in std::__1::__libcpp_allocate(unsigned long, unsigned long) /usr/local/bin/../include/c++/v1/new:253:10
    #2 0x575748 in std::__1::allocator<char>::allocate(unsigned long) /usr/local/bin/../include/c++/v1/memory:1789:34
    #3 0x5753d0 in std::__1::allocator_traits<std::__1::allocator<char> >::allocate(std::__1::allocator<char>&, unsigned long) /usr/local/bin/../include/c++/v1/memory:1525:21
    #4 0x5ea264 in std::__1::__split_buffer<char, std::__1::allocator<char>&>::__split_buffer(unsigned long, unsigned long, std::__1::allocator<char>&) /usr/local/bin/../include/c++/v1/__split_buffer:318:29
    #5 0x5e9a95 in std::__1::vector<char, std::__1::allocator<char> >::__append(unsigned long) /usr/local/bin/../include/c++/v1/vector:1096:53
    #6 0x5e8e67 in std::__1::vector<char, std::__1::allocator<char> >::resize(unsigned long) /usr/local/bin/../include/c++/v1/vector:2027:15
    #7 0x98237c in Assimp::IOStreamBuffer<char>::getNextDataLine(std::__1::vector<char, std::__1::allocator<char> >&, char) /src/assimp/include/assimp/IOStreamBuffer.h:250:12
    #8 0x981660 in Assimp::ObjFileParser::parseFile(Assimp::IOStreamBuffer<char>&) /src/assimp/code/AssetLib/Obj/ObjFileParser.cpp:122:25
    #9 0x980b55 in Assimp::ObjFileParser::ObjFileParser(Assimp::IOStreamBuffer<char>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Assimp::IOSystem*, Assimp::ProgressHandler*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /src/assimp/code/AssetLib/Obj/ObjFileParser.cpp:97:5
    #10 0x978645 in Assimp::ObjFileImporter::InternReadFile(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, aiScene*, Assimp::IOSystem*) /src/assimp/code/AssetLib/Obj/ObjFileImporter.cpp:141:19
    #11 0x124e908 in Assimp::BaseImporter::ReadFile(Assimp::Importer*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Assimp::IOSystem*) /src/assimp/code/Common/BaseImporter.cpp:127:9
    #12 0x59f0a2 in Assimp::Importer::ReadFile(char const*, unsigned int) /src/assimp/code/Common/Importer.cpp:656:30
    #13 0x59e000 in Assimp::Importer::ReadFileFromMemory(void const*, unsigned long, unsigned int, char const*) /src/assimp/code/Common/Importer.cpp:502:5
    #14 0x556fcf in LLVMFuzzerTestOneInput /src/assimp/fuzz/assimp_fuzzer.cc:53:34
    #15 0x45e781 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:558:15
    #16 0x449f12 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:296:6
    #17 0x44ff2e in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:796:9
    #18 0x477942 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:19:10
    #19 0x77cd538e383f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: operator new(unsigned long)--std::__1::__libcpp_allocate(unsigned long, unsigned long)--std::__1::allocator<char>::allocate(unsigned long)
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/assimp/include/assimp/IOStreamBuffer.h:291:17 in Assimp::IOStreamBuffer<char>::getNextDataLine(std::__1::vector<char, std::__1::allocator<char> >&, char)
Shadow bytes around the buggy address:
  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff8000: fa fa 00 00 fa fa 00 fa fa fa 00 fa fa fa 00 fa
  0x0c047fff8010: fa fa 00 00 fa fa 00 00 fa fa 00 00 fa fa 00 00
  0x0c047fff8020: fa fa 00 fa fa fa 00 fa fa fa fd fa fa fa fd fd
  0x0c047fff8030: fa fa fd fa fa fa fd fa fa fa 00 00 fa fa 00 00
=>0x0c047fff8040:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8070: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8080: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8090: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING
