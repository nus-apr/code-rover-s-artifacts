INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 2217810771
INFO: Loaded 1 modules   (320927 inline 8-bit counters): 320927 [0x2f1a7b0, 0x2f68d4f), 
INFO: Loaded 1 PC tables (320927 PCs): 320927 [0x2f68d50,0x344e740), 
/out/encoder_heic_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60f0000004a1 at pc 0x0000015022fa bp 0x7ffee25724d0 sp 0x7ffee25724c8
READ of size 1 at 0x60f0000004a1 thread T0
SCARINESS: 12 (1-byte-read-heap-buffer-overflow)
    #0 0x15022f9 in jpeg2000_get_SIZ_segment(HeifFile const&, unsigned int) /src/libheif/libheif/jpeg2000.cc:380:29
    #1 0x145251e in HeifFile::get_luma_bits_per_pixel_from_configuration(unsigned int) const /src/libheif/libheif/file.cc:575:16
    #2 0x14021da in HeifContext::Image::get_luma_bits_per_pixel() const /src/libheif/libheif/context.cc:1207:39
    #3 0x11125d2 in ReadHEICImageHandle /src/imagemagick/coders/heic.c:354:18
    #4 0x110dda0 in ReadHEICImage /src/imagemagick/coders/heic.c:597:10
    #5 0xb31978 in ReadImage /src/imagemagick/MagickCore/constitute.c:736:15
    #6 0xaacf20 in BlobToImage /src/imagemagick/MagickCore/blob.c:499:9
    #7 0x97e090 in Magick::Image::read(Magick::Blob const&) /src/imagemagick/Magick++/lib/Image.cpp:4044:12
    #8 0x946c31 in LLVMFuzzerTestOneInput /src/imagemagick/Magick++/fuzz/encoder_fuzzer.cc:77:11
    #9 0x816793 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
    #10 0x8012a2 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #11 0x806b4c in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9
    #12 0x830cd2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #13 0x780818cce082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 87b331c034a6458c64ce09c03939e947212e18ce)
    #14 0x7f746d in _start (/out/encoder_heic_fuzzer+0x7f746d)

DEDUP_TOKEN: jpeg2000_get_SIZ_segment(HeifFile const&, unsigned int)--HeifFile::get_luma_bits_per_pixel_from_configuration(unsigned int) const--HeifContext::Image::get_luma_bits_per_pixel() const
0x60f0000004a1 is located 0 bytes to the right of 161-byte region [0x60f000000400,0x60f0000004a1)
allocated by thread T0 here:
    #0 0x9429cd in operator new(unsigned long) /src/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:95:3
    #1 0x135f498 in __libcpp_operator_new<unsigned long> /usr/local/bin/../include/c++/v1/new:245:10
    #2 0x135f498 in __libcpp_allocate /usr/local/bin/../include/c++/v1/new:271:10
    #3 0x135f498 in allocate /usr/local/bin/../include/c++/v1/__memory/allocator.h:105:38
    #4 0x135f498 in allocate /usr/local/bin/../include/c++/v1/__memory/allocator_traits.h:262:20
    #5 0x135f498 in __split_buffer /usr/local/bin/../include/c++/v1/__split_buffer:306:29
    #6 0x135f498 in std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__append(unsigned long) /usr/local/bin/../include/c++/v1/vector:1031:53
    #7 0x1386f29 in resize /usr/local/bin/../include/c++/v1/vector:1902:15
    #8 0x1386f29 in Box_iloc::read_data(Box_iloc::Item const&, std::__1::shared_ptr<StreamReader> const&, std::__1::shared_ptr<Box_idat> const&, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >*) const /src/libheif/libheif/box.cc:1228:13
    #9 0x14573d8 in HeifFile::get_compressed_image_data(unsigned int, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >*) const /src/libheif/libheif/file.cc:852:25
    #10 0x1500fbe in jpeg2000_get_SIZ_segment(HeifFile const&, unsigned int) /src/libheif/libheif/jpeg2000.cc:341:20
    #11 0x145251e in HeifFile::get_luma_bits_per_pixel_from_configuration(unsigned int) const /src/libheif/libheif/file.cc:575:16
    #12 0x14021da in HeifContext::Image::get_luma_bits_per_pixel() const /src/libheif/libheif/context.cc:1207:39
    #13 0x11125d2 in ReadHEICImageHandle /src/imagemagick/coders/heic.c:354:18
    #14 0x110dda0 in ReadHEICImage /src/imagemagick/coders/heic.c:597:10
    #15 0xb31978 in ReadImage /src/imagemagick/MagickCore/constitute.c:736:15
    #16 0xaacf20 in BlobToImage /src/imagemagick/MagickCore/blob.c:499:9
    #17 0x97e090 in Magick::Image::read(Magick::Blob const&) /src/imagemagick/Magick++/lib/Image.cpp:4044:12
    #18 0x946c31 in LLVMFuzzerTestOneInput /src/imagemagick/Magick++/fuzz/encoder_fuzzer.cc:77:11
    #19 0x816793 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
    #20 0x8012a2 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #21 0x806b4c in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9
    #22 0x830cd2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #23 0x780818cce082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 87b331c034a6458c64ce09c03939e947212e18ce)

DEDUP_TOKEN: operator new(unsigned long)--__libcpp_operator_new<unsigned long>--__libcpp_allocate
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/libheif/libheif/jpeg2000.cc:380:29 in jpeg2000_get_SIZ_segment(HeifFile const&, unsigned int)
Shadow bytes around the buggy address:
  0x0c1e7fff8040: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c1e7fff8050: 00 00 00 00 00 00 00 00 00 00 fa fa fa fa fa fa
  0x0c1e7fff8060: fa fa fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x0c1e7fff8070: fd fd fd fd fd fd fd fa fa fa fa fa fa fa fa fa
  0x0c1e7fff8080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c1e7fff8090: 00 00 00 00[01]fa fa fa fa fa fa fa fa fa fa fa
  0x0c1e7fff80a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c1e7fff80b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c1e7fff80c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c1e7fff80d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c1e7fff80e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING
