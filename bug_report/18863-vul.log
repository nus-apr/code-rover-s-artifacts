Reading 499 bytes from /tmp/poc
======================= INFO =========================
This binary is built for AFL-fuzz.
To run the target function on individual input(s) execute this:
  /out/file-fuzzer < INPUT_FILE
or
  /out/file-fuzzer INPUT_FILE1 [INPUT_FILE2 ... ]
To fuzz with afl-fuzz execute this:
  afl-fuzz [afl-flags] /out/file-fuzzer [-N]
afl-fuzz will run N iterations before re-spawning the process (default: 1000)
======================================================
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x613000007f5a at pc 0x00000066a081 bp 0x7e6a379ffaf0 sp 0x7e6a379ffae8
READ of size 1 at 0x613000007f5a thread T1
SCARINESS: 22 (1-byte-read-heap-buffer-overflow-far-from-bounds)
    #0 0x66a080 in void apply_sao_internal<unsigned short>(de265_image*, int, int, slice_segment_header const*, int, int, int, unsigned short const*, int, unsigned short*, int) /src/libde265/libde265/sao.cc:224:26
    #1 0x666b05 in void apply_sao<unsigned char>(de265_image*, int, int, slice_segment_header const*, int, int, int, unsigned char const*, int, unsigned char*, int) /src/libde265/libde265/sao.cc:270:5
    #2 0x667636 in thread_task_sao::work() /src/libde265/libde265/sao.cc:441:9
    #3 0x6935f7 in worker_thread(void*) /src/libde265/libde265/threads.cc:231:11
    #4 0x7e6a3b29e6b9 in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x76b9)
    #5 0x7e6a3adbe51c in clone (/lib/x86_64-linux-gnu/libc.so.6+0x10751c)

DEDUP_TOKEN: void apply_sao_internal<unsigned short>(de265_image*, int, int, slice_segment_header const*, int, int, int, unsigned short const*, int, unsigned short*, int)--void apply_sao<unsigned char>(de265_image*, int, int, slice_segment_header const*, int, int, int, unsigned char const*, int, unsigned char*, int)--thread_task_sao::work()
Address 0x613000007f5a is a wild pointer.
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/libde265/libde265/sao.cc:224:26 in void apply_sao_internal<unsigned short>(de265_image*, int, int, slice_segment_header const*, int, int, int, unsigned short const*, int, unsigned short*, int)
Shadow bytes around the buggy address:
  0x0c267fff8f90: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c267fff8fa0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c267fff8fb0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c267fff8fc0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c267fff8fd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
=>0x0c267fff8fe0: fa fa fa fa fa fa fa fa fa fa fa[fa]fa fa fa fa
  0x0c267fff8ff0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c267fff9000: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c267fff9010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c267fff9020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c267fff9030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
Thread T1 created by T0 here:
    #0 0x482e8a in pthread_create /src/llvm/projects/compiler-rt/lib/asan/asan_interceptors.cpp:214:3
    #1 0x6933ef in start_thread_pool(thread_pool*, int) /src/libde265/libde265/threads.cc:269:15
    #2 0x60eae5 in decoder_context::start_thread_pool(int) /src/libde265/libde265/decctx.cc:346:3
    #3 0x60b1c6 in de265_start_worker_threads /src/libde265/libde265/de265.cc:258:28
    #4 0x6019a8 in libde265_new_decoder(void**) /src/libheif/libheif/heif_decoder_libde265.cc:159:3
    #5 0x59b205 in heif::HeifContext::decode_image(unsigned int, std::__1::shared_ptr<heif::HeifPixelImage>&, heif_decoding_options const*) const /src/libheif/libheif/heif_context.cc:931:29
    #6 0x59a9b8 in heif::HeifContext::Image::decode_image(std::__1::shared_ptr<heif::HeifPixelImage>&, heif_colorspace, heif_chroma, heif_decoding_options const*) const /src/libheif/libheif/heif_context.cc:881:31
    #7 0x57d982 in heif_decode_image /src/libheif/libheif/heif.cc:657:33
    #8 0x609c16 in TestDecodeImage(heif_context*, heif_image_handle const*) /src/libheif/libheif/file_fuzzer.cc:39:9
    #9 0x60975c in LLVMFuzzerTestOneInput /src/libheif/libheif/file_fuzzer.cc:70:5
    #10 0x60a1ae in ExecuteFilesOnyByOne /src/libfuzzer/afl/afl_driver.cpp:216:5
    #11 0x60a1ae in main /src/libfuzzer/afl/afl_driver.cpp:253:12
    #12 0x7e6a3acd783f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: pthread_create--start_thread_pool(thread_pool*, int)--decoder_context::start_thread_pool(int)
==13==ABORTING
