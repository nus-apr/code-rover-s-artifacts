INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 2284015544
INFO: Loaded 1 modules   (371967 inline 8-bit counters): 371967 [0x3f21240, 0x3f7bf3f), 
INFO: Loaded 1 PC tables (371967 PCs): 371967 [0x3f7bf40,0x4528f30), 
/out/kimgio_heif_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x62900001820e at pc 0x000000626b1a bp 0x7ffd276b1a10 sp 0x7ffd276b1a08
READ of size 2 at 0x62900001820e thread T0
SCARINESS: 14 (2-byte-read-heap-buffer-overflow)
    #0 0x626b19 in Op_to_sdr_planes::convert_colorspace(std::__1::shared_ptr<heif::HeifPixelImage const> const&, heif::ColorState, heif::ColorConversionOptions) /src/libheif/libheif/heif_colorconversion.cc:2464:20
    #1 0x630186 in heif::ColorConversionPipeline::convert_image(std::__1::shared_ptr<heif::HeifPixelImage> const&) /src/libheif/libheif/heif_colorconversion.cc:3013:19
    #2 0x630c0f in heif::convert_colorspace(std::__1::shared_ptr<heif::HeifPixelImage> const&, heif_colorspace, heif_chroma, std::__1::shared_ptr<heif::color_profile_nclx const>, int) /src/libheif/libheif/heif_colorconversion.cc:3118:19
    #3 0x5adcc9 in heif::HeifContext::decode_image_user(unsigned int, std::__1::shared_ptr<heif::HeifPixelImage>&, heif_colorspace, heif_chroma, heif_decoding_options const*) const /src/libheif/libheif/heif_context.cc:1023:11
    #4 0x57f842 in heif_decode_image /src/libheif/libheif/heif.cc:904:35
    #5 0x56d524 in heif::ImageHandle::decode_image(heif_colorspace, heif_chroma, heif::ImageHandle::DecodingOptions const&) /usr/local/include/libheif/heif_cxx.h:726:23
    #6 0x56870f in HEIFHandler::ensureDecoder() /src/kimageformats/src/imageformats/heif.cpp:412:34
    #7 0x5639f4 in HEIFHandler::ensureParsed() const /src/kimageformats/src/imageformats/heif.cpp:355:18
    #8 0x56393f in HEIFHandler::read(QImage*) /src/kimageformats/src/imageformats/heif.cpp:73:10
    #9 0x56287e in LLVMFuzzerTestOneInput /src/kimgio_fuzzer.cc:57:14
    #10 0x465ed1 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:599:15
    #11 0x44fb92 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:323:6
    #12 0x455ee6 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:856:9
    #13 0x47fed2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #14 0x7e0911dea83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #15 0x42a558 in _start (/out/kimgio_heif_fuzzer+0x42a558)

DEDUP_TOKEN: Op_to_sdr_planes::convert_colorspace(std::__1::shared_ptr<heif::HeifPixelImage const> const&, heif::ColorState, heif::ColorConversionOptions)--heif::ColorConversionPipeline::convert_image(std::__1::shared_ptr<heif::HeifPixelImage> const&)--heif::convert_colorspace(std::__1::shared_ptr<heif::HeifPixelImage> const&, heif_colorspace, heif_chroma, std::__1::shared_ptr<heif::color_profile_nclx const>, int)
0x62900001820f is located 0 bytes to the right of 16399-byte region [0x629000014200,0x62900001820f)
allocated by thread T0 here:
    #0 0x55fe2d in operator new[](unsigned long) /src/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:102:3
    #1 0x600457 in heif::HeifPixelImage::ImagePlane::alloc(int, int, int, heif_chroma) /src/libheif/libheif/heif_image.cc:192:21
    #2 0x600086 in heif::HeifPixelImage::add_plane(heif_channel, int, int, int) /src/libheif/libheif/heif_image.cc:145:13
    #3 0x6590e7 in convert_libde265_image_to_heif_image(libde265_decoder*, de265_image const*, heif_image**) /src/libheif/libheif/heif_decoder_libde265.cc:135:19
    #4 0x658b61 in libde265_v1_decode_image(void*, heif_image**) /src/libheif/libheif/heif_decoder_libde265.cc:327:13
    #5 0x5af55b in heif::HeifContext::decode_image_planar(unsigned int, std::__1::shared_ptr<heif::HeifPixelImage>&, heif_colorspace, heif_decoding_options const*) const /src/libheif/libheif/heif_context.cc:1090:11
    #6 0x5af416 in heif::HeifContext::decode_image_planar(unsigned int, std::__1::shared_ptr<heif::HeifPixelImage>&, heif_colorspace, heif_decoding_options const*) const /src/libheif/libheif/heif_context.cc:1263:19
    #7 0x5adb23 in heif::HeifContext::decode_image_user(unsigned int, std::__1::shared_ptr<heif::HeifPixelImage>&, heif_colorspace, heif_chroma, heif_decoding_options const*) const /src/libheif/libheif/heif_context.cc:1003:15
    #8 0x57f842 in heif_decode_image /src/libheif/libheif/heif.cc:904:35
    #9 0x56d524 in heif::ImageHandle::decode_image(heif_colorspace, heif_chroma, heif::ImageHandle::DecodingOptions const&) /usr/local/include/libheif/heif_cxx.h:726:23
    #10 0x56870f in HEIFHandler::ensureDecoder() /src/kimageformats/src/imageformats/heif.cpp:412:34
    #11 0x5639f4 in HEIFHandler::ensureParsed() const /src/kimageformats/src/imageformats/heif.cpp:355:18
    #12 0x56393f in HEIFHandler::read(QImage*) /src/kimageformats/src/imageformats/heif.cpp:73:10
    #13 0x56287e in LLVMFuzzerTestOneInput /src/kimgio_fuzzer.cc:57:14
    #14 0x465ed1 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:599:15
    #15 0x44fb92 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:323:6
    #16 0x455ee6 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:856:9
    #17 0x47fed2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #18 0x7e0911dea83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: operator new[](unsigned long)--heif::HeifPixelImage::ImagePlane::alloc(int, int, int, heif_chroma)--heif::HeifPixelImage::add_plane(heif_channel, int, int, int)
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/libheif/libheif/heif_colorconversion.cc:2464:20 in Op_to_sdr_planes::convert_colorspace(std::__1::shared_ptr<heif::HeifPixelImage const> const&, heif::ColorState, heif::ColorConversionOptions)
Shadow bytes around the buggy address:
  0x0c527fffaff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c527fffb000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c527fffb010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c527fffb020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c527fffb030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c527fffb040: 00[07]fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c527fffb050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c527fffb060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c527fffb070: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c527fffb080: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c527fffb090: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING
