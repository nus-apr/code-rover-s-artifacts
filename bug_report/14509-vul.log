======================= INFO =========================
This binary is built for AFL-fuzz.
To run the target function on individual input(s) execute this:
  /out/request_fuzzer < INPUT_FILE
or
  /out/request_fuzzer INPUT_FILE1 [INPUT_FILE2 ... ]
To fuzz with afl-fuzz execute this:
  afl-fuzz [afl-flags] /out/request_fuzzer [-N]
afl-fuzz will run N iterations before re-spawning the process (default: 1000)
======================================================
Reading 32767 bytes from /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: global-buffer-overflow on address 0x000001132b7f at pc 0x0000004372c5 bp 0x7ffefc240780 sp 0x7ffefc23ff40
READ of size 32759 at 0x000001132b7f thread T0
SCARINESS: 26 (multi-byte-read-global-buffer-overflow)
    #0 0x4372c4 in __interceptor_index /src/llvm/projects/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:682:5
    #1 0x4eafb6 in strsep_char /src/lwan/src/lib/lwan-request.c:148:11
    #2 0x4ea632 in parse_proxy_protocol_v1 /src/lwan/src/lib/lwan-request.c:174:16
    #3 0x4e551e in parse_http_request /src/lwan/src/lib/lwan-request.c:1195:18
    #4 0x4e7c04 in fuzz_parse_http_request /src/lwan/src/lib/lwan-request.c:1679:9
    #5 0x50b59a in ExecuteFilesOnyByOne /src/libfuzzer/afl/afl_driver.cpp:216:5
    #6 0x50b59a in main /src/libfuzzer/afl/afl_driver.cpp:253
    #7 0x737a7d77383f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #8 0x421998 in _start (/out/request_fuzzer+0x421998)

DEDUP_TOKEN: __interceptor_index--strsep_char--parse_proxy_protocol_v1
0x000001132b7f is located 0 bytes to the right of global variable 'data_copy' defined in '/src/lwan/src/lib/lwan-request.c:1650:17' (0x112ab80) of size 32767
SUMMARY: AddressSanitizer: global-buffer-overflow /src/llvm/projects/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:682:5 in __interceptor_index
Shadow bytes around the buggy address:
  0x00008021e510: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x00008021e520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x00008021e530: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x00008021e540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x00008021e550: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x00008021e560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00[07]
  0x00008021e570: f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
  0x00008021e580: f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
  0x00008021e590: f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
  0x00008021e5a0: f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
  0x00008021e5b0: f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING
