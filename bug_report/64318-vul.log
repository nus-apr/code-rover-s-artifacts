INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 2323628694
INFO: Loaded 1 modules   (555685 inline 8-bit counters): 555685 [0x48eca60, 0x4974505), 
INFO: Loaded 1 PC tables (555685 PCs): 555685 [0x3de4068,0x465eab8), 
/out/llvmfuzz: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: heap-use-after-free on address 0x7c777d3b3790 at pc 0x0000038c83cc bp 0x7ffe81cc0dd0 sp 0x7ffe81cc0dc8
READ of size 8 at 0x7c777d3b3790 thread T0
SCARINESS: 51 (8-byte-read-heap-use-after-free)
    #0 0x38c83cb in dxf_tables_read /src/libredwg/src/in_dxf.c:11738:31
    #1 0x38b747e in dwg_read_dxf /src/libredwg/src/in_dxf.c:12660:23
    #2 0x56a25c in LLVMFuzzerTestOneInput /src/libredwg/examples/llvmfuzz.c:116:13
    #3 0x43deb3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
    #4 0x429612 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #5 0x42eebc in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9
    #6 0x4583f2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #7 0x7c777dc46082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 87b331c034a6458c64ce09c03939e947212e18ce)
    #8 0x41f7dd in _start (/out/llvmfuzz+0x41f7dd)

DEDUP_TOKEN: dxf_tables_read--dwg_read_dxf--LLVMFuzzerTestOneInput
0x7c777d3b3790 is located 171920 bytes inside of 172032-byte region [0x7c777d389800,0x7c777d3b3800)
freed by thread T0 here:
    #0 0x52f44c in __interceptor_realloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:85:3
    #1 0x68cd10 in dwg_add_object /src/libredwg/src/decode.c:4746:35
    #2 0x38d5bff in new_object /src/libredwg/src/in_dxf.c:8619:7
    #3 0x38c61d9 in dxf_tables_read /src/libredwg/src/in_dxf.c:11723:22
    #4 0x38b747e in dwg_read_dxf /src/libredwg/src/in_dxf.c:12660:23
    #5 0x56a25c in LLVMFuzzerTestOneInput /src/libredwg/examples/llvmfuzz.c:116:13
    #6 0x43deb3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
    #7 0x429612 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #8 0x42eebc in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9
    #9 0x4583f2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #10 0x7c777dc46082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 87b331c034a6458c64ce09c03939e947212e18ce)

DEDUP_TOKEN: __interceptor_realloc--dwg_add_object--new_object
previously allocated by thread T0 here:
    #0 0x52f21e in __interceptor_calloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:77:3
    #1 0x68cdd9 in dwg_add_object /src/libredwg/src/decode.c:4735:35
    #2 0x38b6720 in dwg_read_dxf /src/libredwg/src/in_dxf.c:12598:7
    #3 0x56a25c in LLVMFuzzerTestOneInput /src/libredwg/examples/llvmfuzz.c:116:13
    #4 0x43deb3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
    #5 0x429612 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #6 0x42eebc in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9
    #7 0x4583f2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #8 0x7c777dc46082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 87b331c034a6458c64ce09c03939e947212e18ce)

DEDUP_TOKEN: __interceptor_calloc--dwg_add_object--dwg_read_dxf
SUMMARY: AddressSanitizer: heap-use-after-free /src/libredwg/src/in_dxf.c:11738:31 in dxf_tables_read
Shadow bytes around the buggy address:
  0x0f8f6fa6e6a0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x0f8f6fa6e6b0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x0f8f6fa6e6c0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x0f8f6fa6e6d0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x0f8f6fa6e6e0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
=>0x0f8f6fa6e6f0: fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x0f8f6fa6e700: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0f8f6fa6e710: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0f8f6fa6e720: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0f8f6fa6e730: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0f8f6fa6e740: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING
