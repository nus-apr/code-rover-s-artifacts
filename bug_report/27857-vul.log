Accepting input from '/tmp/poc'
Usage for fuzzing: honggfuzz -P [flags] -- /out/dct_fuzzer
Inconsistent progression sequence for component 0 coefficient 0
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x62e00000b020 at pc 0x00000064a1f3 bp 0x7fffa049ea00 sp 0x7fffa049e9f8
READ of size 2 at 0x62e00000b020 thread T0
SCARINESS: 24 (2-byte-read-heap-buffer-overflow-far-from-bounds)
    #0 0x64a1f2 in decompress_smooth_data /src/libjpeg-turbo/jdcoefct.c:595:23
    #1 0x6729d2 in process_data_simple_main /src/libjpeg-turbo/jdmainct.c:300:10
    #2 0x56d5ec in jpeg_read_scanlines /src/libjpeg-turbo/jdapistd.c:287:3
    #3 0x4da31f in Pl_DCT::decompress(void*, Buffer*) /src/qpdf/libqpdf/Pl_DCT.cc:357:16
    #4 0x4d93c0 in Pl_DCT::finish() /src/qpdf/libqpdf/Pl_DCT.cc:124:17
    #5 0x4cc798 in FuzzHelper::doChecks() /src/qpdf/fuzz/dct_fuzzer.cc:32:7
    #6 0x4cc8fe in FuzzHelper::run() /src/qpdf/fuzz/dct_fuzzer.cc:40:9
    #7 0x4ccbe9 in LLVMFuzzerTestOneInput /src/qpdf/fuzz/dct_fuzzer.cc:56:7
    #8 0x4cee3b in main (/out/dct_fuzzer+0x4cee3b)
    #9 0x7da395d1983f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #10 0x41ea38 in _start (/out/dct_fuzzer+0x41ea38)

DEDUP_TOKEN: decompress_smooth_data--process_data_simple_main--jpeg_read_scanlines
0x62e00000b020 is located 105 bytes to the right of 43959-byte region [0x62e000000400,0x62e00000afb7)
allocated by thread T0 here:
    #0 0x49998d in malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:145:3
    #1 0x5c0668 in alloc_large /src/libjpeg-turbo/jmemmgr.c:391:29
    #2 0x5c0668 in alloc_barray /src/libjpeg-turbo/jmemmgr.c:527:28
    #3 0x5c0668 in realize_virt_arrays /src/libjpeg-turbo/jmemmgr.c:741:26
    #4 0x58c2ed in master_selection /src/libjpeg-turbo/jdmaster.c:561:3
    #5 0x58c2ed in jinit_master_decompress /src/libjpeg-turbo/jdmaster.c:725:3
    #6 0x56b9e0 in jpeg_start_decompress /src/libjpeg-turbo/jdapistd.c:49:5
    #7 0x4da286 in Pl_DCT::decompress(void*, Buffer*) /src/qpdf/libqpdf/Pl_DCT.cc:354:12
    #8 0x4d93c0 in Pl_DCT::finish() /src/qpdf/libqpdf/Pl_DCT.cc:124:17
    #9 0x4cc798 in FuzzHelper::doChecks() /src/qpdf/fuzz/dct_fuzzer.cc:32:7
    #10 0x4cc8fe in FuzzHelper::run() /src/qpdf/fuzz/dct_fuzzer.cc:40:9
    #11 0x4ccbe9 in LLVMFuzzerTestOneInput /src/qpdf/fuzz/dct_fuzzer.cc:56:7
    #12 0x4cee3b in main (/out/dct_fuzzer+0x4cee3b)

DEDUP_TOKEN: malloc--alloc_large--alloc_barray
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/libjpeg-turbo/jdcoefct.c:595:23 in decompress_smooth_data
Shadow bytes around the buggy address:
  0x0c5c7fff95b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c5c7fff95c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c5c7fff95d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c5c7fff95e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c5c7fff95f0: 00 00 00 00 00 00 07 fa fa fa fa fa fa fa fa fa
=>0x0c5c7fff9600: fa fa fa fa[fa]fa fa fa fa fa fa fa fa fa fa fa
  0x0c5c7fff9610: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c5c7fff9620: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c5c7fff9630: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c5c7fff9640: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c5c7fff9650: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING
