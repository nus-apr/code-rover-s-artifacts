Reading 946693 bytes from /tmp/poc
                       Ultimate Packer for eXecutables
                          Copyright (C) 1996 - 2024
UPX git-250c65+ Markus Oberhumer, Laszlo Molnar & John Reiser    Jan 4th 2024

testing /tmp/libfuzzer.13                                                                                [WARNING] bad b_info at 0x623f8

=================================================================
==13==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x756983815470 at pc 0x0000006ca220 bp 0x7fff58246ef0 sp 0x7fff58246ee8
READ of size 4 at 0x756983815470 thread T0
SCARINESS: 32 (4-byte-read-stack-buffer-overflow)
    #0 0x6ca21f in unsigned int get_ne32<LE32, LE32>(LE32 const*) /src/upx/src/bele.h:117:5
    #1 0x6ca21f in unsigned int get_le32<LE32, LE32>(LE32 const*) /src/upx/src/bele.h:220:59
    #2 0x6ca21f in PackLinuxElf64::unpack(OutputFile*) /src/upx/src/p_lx_elf.cpp:7413:30
    #3 0x7c75ea in Packer::doTest() /src/upx/src/packer.cpp:104:5
    #4 0x88ca0e in do_one_file(char const*, char*) /src/upx/src/work.cpp:335:12
    #5 0x88e938 in do_files(int, int, char**) /src/upx/src/work.cpp:421:13
    #6 0x63df5a in upx_main(int, char**) /src/upx/src/main.cpp:1303:9
    #7 0x4e9d5e in LLVMFuzzerTestOneInput /src/upx/fuzzers/test_packed_file_fuzzer.cpp:43:5
    #8 0x4e9a6d in ExecuteFilesOnyByOne /src/aflplusplus/utils/aflpp_driver/aflpp_driver.c:255:7
    #9 0x4e9878 in LLVMFuzzerRunDriver /src/aflplusplus/utils/aflpp_driver/aflpp_driver.c
    #10 0x4e9438 in main /src/aflplusplus/utils/aflpp_driver/aflpp_driver.c:300:10
    #11 0x7569838b7082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 87b331c034a6458c64ce09c03939e947212e18ce)
    #12 0x42aafd in _start (/out/test_packed_file_fuzzer+0x42aafd)

DEDUP_TOKEN: unsigned int get_ne32<LE32, LE32>(LE32 const*)--unsigned int get_le32<LE32, LE32>(LE32 const*)--PackLinuxElf64::unpack(OutputFile*)
Address 0x756983815470 is located in stack of thread T0 at offset 1136 in frame
    #0 0x6c50bf in PackLinuxElf64::unpack(OutputFile*) /src/upx/src/p_lx_elf.cpp:7154

DEDUP_TOKEN: PackLinuxElf64::unpack(OutputFile*)
  This frame has 23 object(s):
    [32, 56) 'agg.tmp'
    [96, 120) 'agg.tmp35'
    [160, 172) 'hbuf' (line 7190)
    [192, 216) 'agg.tmp55'
    [256, 268) 'bhdr' (line 7198)
    [288, 312) 'agg.tmp75'
    [352, 368) 'u' (line 7208)
    [384, 388) 'c_adler' (line 7213)
    [400, 404) 'u_adler' (line 7214)
    [416, 432) 'o_elfhdrs' (line 7218)
    [448, 472) 'agg.tmp146'
    [512, 536) 'agg.tmp194'
    [576, 600) 'agg.tmp208'
    [640, 664) 'agg.tmp220'
    [704, 728) 'agg.tmp223'
    [768, 792) 'd_info' (line 7316)
    [832, 872) 'msg' (line 7323)
    [912, 936) 'agg.tmp481'
    [976, 988) 'b_peek' (line 7379)
    [1008, 1032) 'agg.tmp575'
    [1072, 1136) 'peek_arr' (line 7394) <== Memory access at offset 1136 overflows this variable
    [1168, 1192) 'agg.tmp624'
    [1232, 1256) 'agg.tmp742'
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /src/upx/src/bele.h:117:5 in unsigned int get_ne32<LE32, LE32>(LE32 const*)
Shadow bytes around the buggy address:
  0x0eadb06faa30: 04 f2 04 f2 00 00 f2 f2 00 00 00 f2 f2 f2 f2 f2
  0x0eadb06faa40: 00 00 00 f2 f2 f2 f2 f2 00 00 00 f2 f2 f2 f2 f2
  0x0eadb06faa50: 00 00 00 f2 f2 f2 f2 f2 00 00 00 f2 f2 f2 f2 f2
  0x0eadb06faa60: 00 00 00 f2 f2 f2 f2 f2 f8 f8 f8 f8 f8 f2 f2 f2
  0x0eadb06faa70: f2 f2 00 00 00 f2 f2 f2 f2 f2 00 04 f2 f2 00 00
=>0x0eadb06faa80: 00 f2 f2 f2 f2 f2 00 00 00 00 00 00 00 00[f2]f2
  0x0eadb06faa90: f2 f2 00 00 00 f2 f2 f2 f2 f2 00 00 00 f3 f3 f3
  0x0eadb06faaa0: f3 f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00
  0x0eadb06faab0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0eadb06faac0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0eadb06faad0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING
