INFO: Seed: 2186728880
INFO: Loaded 1 modules   (52862 inline 8-bit counters): 52862 [0x126e650, 0x127b4ce), 
INFO: Loaded 1 PC tables (52862 PCs): 52862 [0xde5c90,0xeb4470), 
/out/encoder_epsi_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==12==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6020000055f6 at pc 0x0000008e6843 bp 0x7fff586ae6b0 sp 0x7fff586ae6a8
READ of size 1 at 0x6020000055f6 thread T0
SCARINESS: 12 (1-byte-read-heap-buffer-overflow)
    #0 0x8e6842 in ParseEntities /src/imagemagick/MagickCore/xml-tree.c:1525:19
    #1 0x8e7c72 in ParseInternalDoctype /src/imagemagick/MagickCore/xml-tree.c:1874:42
    #2 0x8e49b5 in NewXMLTree /src/imagemagick/MagickCore/xml-tree.c:2248:28
    #3 0x80de0a in GetXMPProperty /src/imagemagick/MagickCore/property.c:1754:7
    #4 0x80a371 in GetImageProperty /src/imagemagick/MagickCore/property.c:2251:18
    #5 0x819856 in SetImageProfileInternal /src/imagemagick/MagickCore/profile.c:1653:10
    #6 0x9ff1fa in ReadPSImage /src/imagemagick/coders/ps.c:697:16
    #7 0x6b6eda in ReadImage /src/imagemagick/MagickCore/constitute.c:497:13
    #8 0x654521 in BlobToImage /src/imagemagick/MagickCore/blob.c:488:9
    #9 0x5a7cd2 in Magick::Image::read(Magick::Blob const&) /src/imagemagick/Magick++/lib/Image.cpp:4008:12
    #10 0x51d70e in LLVMFuzzerTestOneInput /src/imagemagick/Magick++/fuzz/encoder_fuzzer.cc:20:11
    #11 0x5474a0 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/libfuzzer/FuzzerLoop.cpp:515:13
    #12 0x51e5b9 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/libfuzzer/FuzzerDriver.cpp:280:6
    #13 0x529f04 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/libfuzzer/FuzzerDriver.cpp:703:9
    #14 0x51dc5c in main /src/libfuzzer/FuzzerMain.cpp:20:10
    #15 0x78dfcca1783f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #16 0x41d928 in _start (/out/encoder_epsi_fuzzer+0x41d928)

DEDUP_TOKEN: ParseEntities--ParseInternalDoctype--NewXMLTree
0x6020000055f6 is located 0 bytes to the right of 6-byte region [0x6020000055f0,0x6020000055f6)
allocated by thread T0 here:
    #0 0x4e16e8 in malloc /src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:88
    #1 0x8e65ab in ParseEntities /src/imagemagick/MagickCore/xml-tree.c:1493:45
    #2 0x8e7c72 in ParseInternalDoctype /src/imagemagick/MagickCore/xml-tree.c:1874:42
    #3 0x8e49b5 in NewXMLTree /src/imagemagick/MagickCore/xml-tree.c:2248:28
    #4 0x80de0a in GetXMPProperty /src/imagemagick/MagickCore/property.c:1754:7
    #5 0x80a371 in GetImageProperty /src/imagemagick/MagickCore/property.c:2251:18
    #6 0x819856 in SetImageProfileInternal /src/imagemagick/MagickCore/profile.c:1653:10
    #7 0x9ff1fa in ReadPSImage /src/imagemagick/coders/ps.c:697:16
    #8 0x6b6eda in ReadImage /src/imagemagick/MagickCore/constitute.c:497:13
    #9 0x654521 in BlobToImage /src/imagemagick/MagickCore/blob.c:488:9
    #10 0x5a7cd2 in Magick::Image::read(Magick::Blob const&) /src/imagemagick/Magick++/lib/Image.cpp:4008:12
    #11 0x51d70e in LLVMFuzzerTestOneInput /src/imagemagick/Magick++/fuzz/encoder_fuzzer.cc:20:11
    #12 0x5474a0 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/libfuzzer/FuzzerLoop.cpp:515:13
    #13 0x51e5b9 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/libfuzzer/FuzzerDriver.cpp:280:6
    #14 0x529f04 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/libfuzzer/FuzzerDriver.cpp:703:9
    #15 0x51dc5c in main /src/libfuzzer/FuzzerMain.cpp:20:10
    #16 0x78dfcca1783f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: malloc--ParseEntities--ParseInternalDoctype
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/imagemagick/MagickCore/xml-tree.c:1525:19 in ParseEntities
Shadow bytes around the buggy address:
  0x0c047fff8a60: fa fa 00 00 fa fa 04 fa fa fa 00 00 fa fa 05 fa
  0x0c047fff8a70: fa fa 00 00 fa fa 00 01 fa fa 00 00 fa fa 00 02
  0x0c047fff8a80: fa fa 00 00 fa fa 00 01 fa fa 00 00 fa fa 00 04
  0x0c047fff8a90: fa fa 00 00 fa fa fd fa fa fa fd fa fa fa 04 fa
  0x0c047fff8aa0: fa fa 01 fa fa fa 02 fa fa fa 00 fa fa fa 00 00
=>0x0c047fff8ab0: fa fa fd fd fa fa 02 fa fa fa 02 fa fa fa[06]fa
  0x0c047fff8ac0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8ad0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8ae0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8af0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8b00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==12==ABORTING
