Accepting input from '/tmp/poc'
Usage for fuzzing: honggfuzz -P [flags] -- /out/fuzz-mdhtml
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x78488d3ff800 at pc 0x0000005007ce bp 0x7ffeda7a1b50 sp 0x7ffeda7a1b48
READ of size 1 at 0x78488d3ff800 thread T0
SCARINESS: 12 (1-byte-read-heap-buffer-overflow)
    #0 0x5007cd in md_decode_utf8__ /src/md4c/src/md4c.c:817:13
    #1 0x500e24 in md_decode_unicode /src/md4c/src/md4c.c:886:16
    #2 0x500e24 in md_link_label_hash /src/md4c/src/md4c.c:1562:21
    #3 0x5228c6 in md_lookup_ref_def /src/md4c/src/md4c.c:1833:12
    #4 0x5228c6 in md_is_link_reference /src/md4c/src/md4c.c:2260:11
    #5 0x517921 in md_resolve_links /src/md4c/src/md4c.c:3615:31
    #6 0x517921 in md_analyze_inlines /src/md4c/src/md4c.c:4061:5
    #7 0x504f5f in md_process_normal_block_contents /src/md4c/src/md4c.c:4639:5
    #8 0x4f2505 in md_process_leaf_block /src/md4c/src/md4c.c:4819:13
    #9 0x4f2505 in md_process_all_blocks /src/md4c/src/md4c.c:4901:13
    #10 0x4f2505 in md_process_doc /src/md4c/src/md4c.c:6330:5
    #11 0x4f2505 in md_parse /src/md4c/src/md4c.c:6398:11
    #12 0x4def70 in md_html /src/md4c/src/md4c-html.c:571:12
    #13 0x4de98f in LLVMFuzzerTestOneInput /src/md4c/build/../test/fuzzers/fuzz-mdhtml.c:24:5
    #14 0x4d4bab in main (/out/fuzz-mdhtml+0x4d4bab)
    #15 0x78488e4f5082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)
    #16 0x41d4dd in _start (/out/fuzz-mdhtml+0x41d4dd)

DEDUP_TOKEN: md_decode_utf8__--md_decode_unicode--md_link_label_hash
0x78488d3ff800 is located 0 bytes to the right of 1048576-byte region [0x78488d2ff800,0x78488d3ff800)
allocated by thread T0 here:
    #0 0x49dc82 in __interceptor_calloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:138:3
    #1 0x4d6910 in util_Calloc (/out/fuzz-mdhtml+0x4d6910)

DEDUP_TOKEN: __interceptor_calloc--util_Calloc
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/md4c/src/md4c.c:817:13 in md_decode_utf8__
Shadow bytes around the buggy address:
  0x0f0991a77eb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0f0991a77ec0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0f0991a77ed0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0f0991a77ee0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0f0991a77ef0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0f0991a77f00:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0f0991a77f10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0f0991a77f20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0f0991a77f30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0f0991a77f40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0f0991a77f50: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING
