INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 2211087580
INFO: Loaded 1 modules   (197103 inline 8-bit counters): 197103 [0x1bf03d0, 0x1c205bf), 
INFO: Loaded 1 PC tables (197103 PCs): 197103 [0x1c205c0,0x1f224b0), 
/out/assimp_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
Info,  T0: Load $$$___magic___$$$.
Info,  T0: File extension not known, trying signature-based detection
Info,  T0: Found a matching importer for this file format: Open Game Engine Exchange.
Info,  T0: Import root directory is './'
=================================================================
==12==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60f0000003b3 at pc 0x000001567fc8 bp 0x7ffd4099c250 sp 0x7ffd4099c248
READ of size 1 at 0x60f0000003b3 thread T0
SCARINESS: 12 (1-byte-read-heap-buffer-overflow)
    #0 0x1567fc7 in swap<unsigned char> /usr/local/bin/../include/c++/v1/__utility/swap.h:36:9
    #1 0x1567fc7 in Swap2 /src/assimp/include/assimp/ByteSwapper.h:85:9
    #2 0x1567fc7 in Assimp::BaseImporter::ConvertToUTF8(std::__1::vector<char, std::__1::allocator<char> >&) /src/assimp/code/Common/BaseImporter.cpp:378:13
    #3 0x15699db in Assimp::BaseImporter::TextFileToBuffer(Assimp::IOStream*, std::__1::vector<char, std::__1::allocator<char> >&, Assimp::BaseImporter::TextFileMode) /src/assimp/code/Common/BaseImporter.cpp:447:9
    #4 0xb637eb in Assimp::OpenGEX::OpenGEXImporter::InternReadFile(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, aiScene*, Assimp::IOSystem*) /src/assimp/code/AssetLib/OpenGEX/OpenGEXImporter.cpp:314:5
    #5 0x156344c in Assimp::BaseImporter::ReadFile(Assimp::Importer*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Assimp::IOSystem*) /src/assimp/code/Common/BaseImporter.cpp:111:9
    #6 0x61cbca in Assimp::Importer::ReadFile(char const*, unsigned int) /src/assimp/code/Common/Importer.cpp:675:30
    #7 0x61b00c in Assimp::Importer::ReadFileFromMemory(void const*, unsigned long, unsigned int, char const*) /src/assimp/code/Common/Importer.cpp:512:5
    #8 0x560312 in LLVMFuzzerTestOneInput /src/assimp/fuzz/assimp_fuzzer.cc:53:34
    #9 0x459773 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) cxa_noexception.cpp
    #10 0x4450d2 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #11 0x44ab4d in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) cxa_noexception.cpp
    #12 0x473ac2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #13 0x7a3ee2665082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)
    #14 0x4222dd in _start (/out/assimp_fuzzer+0x4222dd)

DEDUP_TOKEN: swap<unsigned char>--Swap2--Assimp::BaseImporter::ConvertToUTF8(std::__1::vector<char, std::__1::allocator<char> >&)
0x60f0000003b3 is located 163 bytes inside of 164-byte region [0x60f000000310,0x60f0000003b4)
allocated by thread T0 here:
    #0 0x55dbed in operator new(unsigned long) /src/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:95:3
    #1 0x149d62b in __libcpp_operator_new<unsigned long> /usr/local/bin/../include/c++/v1/new:235:10
    #2 0x149d62b in __libcpp_allocate /usr/local/bin/../include/c++/v1/new:261:10
    #3 0x149d62b in allocate /usr/local/bin/../include/c++/v1/__memory/allocator.h:105:38
    #4 0x149d62b in allocate /usr/local/bin/../include/c++/v1/__memory/allocator_traits.h:262:20
    #5 0x149d62b in __split_buffer /usr/local/bin/../include/c++/v1/__split_buffer:306:29
    #6 0x149d62b in std::__1::vector<char, std::__1::allocator<char> >::reserve(unsigned long) /usr/local/bin/../include/c++/v1/vector:1609:53
    #7 0x1569863 in Assimp::BaseImporter::TextFileToBuffer(Assimp::IOStream*, std::__1::vector<char, std::__1::allocator<char> >&, Assimp::BaseImporter::TextFileMode) /src/assimp/code/Common/BaseImporter.cpp:440:10
    #8 0xb637eb in Assimp::OpenGEX::OpenGEXImporter::InternReadFile(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, aiScene*, Assimp::IOSystem*) /src/assimp/code/AssetLib/OpenGEX/OpenGEXImporter.cpp:314:5
    #9 0x156344c in Assimp::BaseImporter::ReadFile(Assimp::Importer*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Assimp::IOSystem*) /src/assimp/code/Common/BaseImporter.cpp:111:9
    #10 0x61cbca in Assimp::Importer::ReadFile(char const*, unsigned int) /src/assimp/code/Common/Importer.cpp:675:30
    #11 0x61b00c in Assimp::Importer::ReadFileFromMemory(void const*, unsigned long, unsigned int, char const*) /src/assimp/code/Common/Importer.cpp:512:5
    #12 0x560312 in LLVMFuzzerTestOneInput /src/assimp/fuzz/assimp_fuzzer.cc:53:34
    #13 0x459773 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) cxa_noexception.cpp
    #14 0x4450d2 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #15 0x44ab4d in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) cxa_noexception.cpp
    #16 0x473ac2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #17 0x7a3ee2665082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)

DEDUP_TOKEN: operator new(unsigned long)--__libcpp_operator_new<unsigned long>--__libcpp_allocate
SUMMARY: AddressSanitizer: heap-buffer-overflow /usr/local/bin/../include/c++/v1/__utility/swap.h:36:9 in swap<unsigned char>
Shadow bytes around the buggy address:
  0x0c1e7fff8020: fa fa fa fa fa fa 00 00 00 00 00 00 00 00 00 00
  0x0c1e7fff8030: 00 00 00 00 00 00 00 00 00 00 03 fa fa fa fa fa
  0x0c1e7fff8040: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c1e7fff8050: 00 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa
  0x0c1e7fff8060: fa fa 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c1e7fff8070: 00 00 00 00 00 00[03]fa fa fa fa fa fa fa fa fa
  0x0c1e7fff8080: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c1e7fff8090: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c1e7fff80a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c1e7fff80b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c1e7fff80c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==12==ABORTING
