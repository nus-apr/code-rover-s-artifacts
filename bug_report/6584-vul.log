INFO: Seed: 2202937771
INFO: Loaded 1 modules   (53108 inline 8-bit counters): 53108 [0x12760a8, 0x128301c), 
INFO: Loaded 1 PC tables (53108 PCs): 53108 [0xdee450,0xebdb90), 
/out/encoder_mvg_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x7520658b9810 at pc 0x0000006f5d1d bp 0x7ffee621b230 sp 0x7ffee621b228
WRITE of size 8 at 0x7520658b9810 thread T0
SCARINESS: 52 (8-byte-write-heap-buffer-overflow-far-from-bounds)
    #0 0x6f5d1c in TracePoint /src/imagemagick/MagickCore/draw.c:1674:30
    #1 0x6f6fdd in TraceBezier /src/imagemagick/MagickCore/draw.c:5391:5
    #2 0x6fa626 in TracePath /src/imagemagick/MagickCore/draw.c:5840:11
    #3 0x6f2f98 in DrawImage /src/imagemagick/MagickCore/draw.c:3196:24
    #4 0x9bc197 in ReadMVGImage /src/imagemagick/coders/mvg.c:222:10
    #5 0x6bad90 in ReadImage /src/imagemagick/MagickCore/constitute.c:497:13
    #6 0x6585a5 in BlobToImage /src/imagemagick/MagickCore/blob.c:469:13
    #7 0x5abf32 in Magick::Image::read(Magick::Blob const&) /src/imagemagick/Magick++/lib/Image.cpp:4015:12
    #8 0x521fbf in LLVMFuzzerTestOneInput /src/imagemagick/Magick++/fuzz/encoder_fuzzer.cc:43:11
    #9 0x54b980 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/libfuzzer/FuzzerLoop.cpp:515:13
    #10 0x522e19 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/libfuzzer/FuzzerDriver.cpp:280:6
    #11 0x52e64a in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/libfuzzer/FuzzerDriver.cpp:703:9
    #12 0x5224bc in main /src/libfuzzer/FuzzerMain.cpp:20:10
    #13 0x75206492883f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #14 0x41daf8 in _start (/out/encoder_mvg_fuzzer+0x41daf8)

DEDUP_TOKEN: TracePoint--TraceBezier--TracePath
0x7520658b9810 is located 16 bytes to the right of 327680-byte region [0x752065869800,0x7520658b9800)
allocated by thread T0 here:
    #0 0x4e61d8 in malloc /src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:88
    #1 0x6eb911 in DrawImage /src/imagemagick/MagickCore/draw.c:1784:36
    #2 0x9bc197 in ReadMVGImage /src/imagemagick/coders/mvg.c:222:10
    #3 0x6bad90 in ReadImage /src/imagemagick/MagickCore/constitute.c:497:13
    #4 0x6585a5 in BlobToImage /src/imagemagick/MagickCore/blob.c:469:13
    #5 0x5abf32 in Magick::Image::read(Magick::Blob const&) /src/imagemagick/Magick++/lib/Image.cpp:4015:12
    #6 0x521fbf in LLVMFuzzerTestOneInput /src/imagemagick/Magick++/fuzz/encoder_fuzzer.cc:43:11
    #7 0x54b980 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/libfuzzer/FuzzerLoop.cpp:515:13
    #8 0x522e19 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/libfuzzer/FuzzerDriver.cpp:280:6
    #9 0x52e64a in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/libfuzzer/FuzzerDriver.cpp:703:9
    #10 0x5224bc in main /src/libfuzzer/FuzzerMain.cpp:20:10
    #11 0x75206492883f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: malloc--DrawImage--ReadMVGImage
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/imagemagick/MagickCore/draw.c:1674:30 in TracePoint
Shadow bytes around the buggy address:
  0x0ea48cb0f2b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0ea48cb0f2c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0ea48cb0f2d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0ea48cb0f2e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0ea48cb0f2f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0ea48cb0f300: fa fa[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0ea48cb0f310: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0ea48cb0f320: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0ea48cb0f330: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0ea48cb0f340: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0ea48cb0f350: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING
