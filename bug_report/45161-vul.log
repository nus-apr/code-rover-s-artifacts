INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 2319921302
INFO: Loaded 1 modules   (14238 inline 8-bit counters): 14238 [0x761cb0, 0x76544e), 
INFO: Loaded 1 PC tables (14238 PCs): 14238 [0x6b8bd0,0x6f05b0), 
/out/dotnet_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x618000000ba0 at pc 0x0000005cba02 bp 0x7fff5a240690 sp 0x7fff5a240688
READ of size 4 at 0x618000000ba0 thread T0
SCARINESS: 17 (4-byte-read-heap-buffer-overflow)
    #0 0x5cba01 in dotnet_parse_tilde_2 /src/yara/libyara/modules/dotnet/dotnet.c:441:16
    #1 0x5cda2c in dotnet_parse_tilde /src/yara/libyara/modules/dotnet/dotnet.c:1611:3
    #2 0x5ce711 in dotnet_parse_com /src/yara/libyara/modules/dotnet/dotnet.c:1761:5
    #3 0x5d0c69 in dotnet__load /src/yara/libyara/modules/dotnet/dotnet.c:1877:9
    #4 0x57291d in yr_modules_load /src/yara/libyara/modules.c:158:16
    #5 0x620d2c in yr_execute_code /src/yara/libyara/exec.c:1570:16
    #6 0x57d9c1 in yr_scanner_scan_mem_blocks /src/yara/libyara/scanner.c:515:3
    #7 0x57ed52 in yr_scanner_scan_mem /src/yara/libyara/scanner.c:659:16
    #8 0x579eca in yr_rules_scan_mem /src/yara/libyara/rules.c:223:12
    #9 0x55da22 in LLVMFuzzerTestOneInput /src/yara/tests/oss-fuzz/dotnet_fuzzer.cc:76:3
    #10 0x4551a2 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
    #11 0x440e72 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #12 0x4466ab in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9
    #13 0x46f1b2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #14 0x7e0bb9262082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)
    #15 0x41f79d in _start (/out/dotnet_fuzzer+0x41f79d)

DEDUP_TOKEN: dotnet_parse_tilde_2--dotnet_parse_tilde--dotnet_parse_com
0x618000000ba2 is located 0 bytes to the right of 802-byte region [0x618000000880,0x618000000ba2)
allocated by thread T0 here:
    #0 0x52462d in __interceptor_malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:129:3
    #1 0x436ee7 in operator new(unsigned long) cxa_noexception.cpp
    #2 0x440e72 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #3 0x4466ab in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9
    #4 0x46f1b2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #5 0x7e0bb9262082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)

DEDUP_TOKEN: __interceptor_malloc--operator new(unsigned long)--fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long)
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/yara/libyara/modules/dotnet/dotnet.c:441:16 in dotnet_parse_tilde_2
Shadow bytes around the buggy address:
  0x0c307fff8120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c307fff8130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c307fff8140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c307fff8150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c307fff8160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c307fff8170: 00 00 00 00[02]fa fa fa fa fa fa fa fa fa fa fa
  0x0c307fff8180: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c307fff8190: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c307fff81a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c307fff81b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c307fff81c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING
