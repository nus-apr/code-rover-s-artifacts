Reading 128 bytes from /tmp/poc
======================= INFO =========================
This binary is built for AFL-fuzz.
To run the target function on individual input(s) execute this:
  /out/karchive_fuzzer < INPUT_FILE
or
  /out/karchive_fuzzer INPUT_FILE1 [INPUT_FILE2 ... ]
To fuzz with afl-fuzz execute this:
  afl-fuzz [afl-flags] /out/karchive_fuzzer [-N]
afl-fuzz will run N iterations before re-spawning the process (default: 1000)
======================================================
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000000078 at pc 0x000000505a46 bp 0x7ffebbfdfe10 sp 0x7ffebbfdfe08
READ of size 1 at 0x602000000078 thread T0
SCARINESS: 12 (1-byte-read-heap-buffer-overflow)
    #0 0x505a45 in QByteArray::operator=(char const*) /src/qtbase/src/corelib/tools/qbytearray.cpp:1305:17
    #1 0xcd2583 in KAr::openArchive(QFlags<QIODevice::OpenModeFlag>) /src/karchive/src/kar.cpp:162:22
    #2 0xd187d0 in KArchive::open(QFlags<QIODevice::OpenModeFlag>) /src/karchive/src/karchive.cpp:178:12
    #3 0x4c7e18 in LLVMFuzzerTestOneInput /src/karchive_fuzzer.cc:52:12
    #4 0xca970a in ExecuteFilesOnyByOne /src/libfuzzer/afl/afl_driver.cpp:216:5
    #5 0xca970a in main /src/libfuzzer/afl/afl_driver.cpp:253
    #6 0x775d32e1b83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #7 0x41f268 in _start (/out/karchive_fuzzer+0x41f268)

DEDUP_TOKEN: QByteArray::operator=(char const*)--KAr::openArchive(QFlags<QIODevice::OpenModeFlag>)--KArchive::open(QFlags<QIODevice::OpenModeFlag>)
0x602000000078 is located 7 bytes to the right of 1-byte region [0x602000000070,0x602000000071)
allocated by thread T0 here:
    #0 0x4c529d in operator new[](unsigned long) /src/llvm/projects/compiler-rt/lib/asan/asan_new_delete.cc:108:3
    #1 0xcd2603 in KAr::openArchive(QFlags<QIODevice::OpenModeFlag>) /src/karchive/src/kar.cpp:146:32
    #2 0xd187d0 in KArchive::open(QFlags<QIODevice::OpenModeFlag>) /src/karchive/src/karchive.cpp:178:12
    #3 0x4c7e18 in LLVMFuzzerTestOneInput /src/karchive_fuzzer.cc:52:12
    #4 0xca970a in ExecuteFilesOnyByOne /src/libfuzzer/afl/afl_driver.cpp:216:5
    #5 0xca970a in main /src/libfuzzer/afl/afl_driver.cpp:253
    #6 0x775d32e1b83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: operator new[](unsigned long)--KAr::openArchive(QFlags<QIODevice::OpenModeFlag>)--KArchive::open(QFlags<QIODevice::OpenModeFlag>)
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/qtbase/src/corelib/tools/qbytearray.cpp:1305:17 in QByteArray::operator=(char const*)
Shadow bytes around the buggy address:
  0x0c047fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c047fff8000: fa fa 00 00 fa fa 00 00 fa fa 01 fa fa fa 01[fa]
  0x0c047fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING
