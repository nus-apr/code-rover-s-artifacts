INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 2320011965
INFO: Loaded 1 modules   (25547 inline 8-bit counters): 25547 [0x5a373f43a498, 0x5a373f440863), 
INFO: Loaded 1 PC tables (25547 PCs): 25547 [0x5a373f440868,0x5a373f4a4518), 
/out/djxl_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
AddressSanitizer:DEADLYSIGNAL
=================================================================
==13==ERROR: AddressSanitizer: SEGV on unknown address (pc 0x5a373f2c3294 bp 0x7ffcbd438b20 sp 0x7ffcbd438a50 T0)
==13==The signal is caused by a READ memory access.
==13==Hint: this fault was caused by a dereference of a high value address (see register values below).  Disassemble the provided pc to learn which register was used.
SCARINESS: 20 (wild-addr-read)
    #0 0x5a373f2c3294 in Load /src/libjxl/third_party/highway/hwy/ops/x86_128-inl.h:1659:24
    #1 0x5a373f2c3294 in jxl::N_SSE4::WriteToU8Stage::ProcessRow(std::__1::vector<std::__1::vector<float*, std::__1::allocator<float*> >, std::__1::allocator<std::__1::vector<float*, std::__1::allocator<float*> > > > const&, std::__1::vector<std::__1::vector<float*, std::__1::allocator<float*> >, std::__1::allocator<std::__1::vector<float*, std::__1::allocator<float*> > > > const&, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long) const /src/libjxl/lib/jxl/render_pipeline/stage_write.cc:118:29
    #2 0x5a373f278c9a in jxl::LowMemoryRenderPipeline::RenderRect(unsigned long, std::__1::vector<jxl::Plane<float>, std::__1::allocator<jxl::Plane<float> > >&, jxl::RectT<unsigned long>, jxl::RectT<unsigned long>) /src/libjxl/lib/jxl/render_pipeline/low_memory_render_pipeline.cc:680:19
    #3 0x5a373f27c5e7 in jxl::LowMemoryRenderPipeline::ProcessBuffers(unsigned long, unsigned long) /src/libjxl/lib/jxl/render_pipeline/low_memory_render_pipeline.cc:786:5
    #4 0x5a373f1a5990 in operator() /src/libjxl/lib/jxl/dec_modular.cc:648:3
    #5 0x5a373f1a5990 in jxl::ThreadPool::RunCallState<jxl::ModularFrameDecoder::FinalizeDecoding(jxl::PassesDecoderState*, jxl::ThreadPool*, jxl::ImageBundle*, bool)::$_4, jxl::ModularFrameDecoder::FinalizeDecoding(jxl::PassesDecoderState*, jxl::ThreadPool*, jxl::ImageBundle*, bool)::$_5>::CallDataFunc(void*, unsigned int, unsigned long) /src/libjxl/lib/jxl/base/data_parallel.h:81:14
    #6 0x5a373f0226d1 in jxl::ThreadPool::SequentialRunnerStatic(void*, void*, int (*)(void*, unsigned long), void (*)(void*, unsigned int, unsigned long), unsigned int, unsigned int) /src/libjxl/lib/jxl/base/data_parallel.cc:18:5
    #7 0x5a373f1a0a8d in Run<(lambda at /src/libjxl/lib/jxl/dec_modular.cc:648:3), (lambda at /src/libjxl/lib/jxl/dec_modular.cc:648:3)> /src/libjxl/lib/jxl/base/data_parallel.h:50:12
    #8 0x5a373f1a0a8d in RunOnPool<(lambda at /src/libjxl/lib/jxl/dec_modular.cc:648:3), (lambda at /src/libjxl/lib/jxl/dec_modular.cc:648:3)> /src/libjxl/lib/jxl/base/data_parallel.h:106:25
    #9 0x5a373f1a0a8d in jxl::ModularFrameDecoder::FinalizeDecoding(jxl::PassesDecoderState*, jxl::ThreadPool*, jxl::ImageBundle*, bool) /src/libjxl/lib/jxl/dec_modular.cc:648:3
    #10 0x5a373f069c7e in jxl::FrameDecoder::Flush() /src/libjxl/lib/jxl/dec_frame.cc:889:3
    #11 0x5a373f060798 in jxl::FrameDecoder::FinalizeFrame() /src/libjxl/lib/jxl/dec_frame.cc:983:3
    #12 0x5a373ef0f6f1 in JxlDecoderProcessCodestream /src/libjxl/lib/jxl/decode.cc:1530:28
    #13 0x5a373ef0f6f1 in HandleBoxes(JxlDecoderStruct*) /src/libjxl/lib/jxl/decode.cc:1983:11
    #14 0x5a373ef075df in JxlDecoderProcessInput /src/libjxl/lib/jxl/decode.cc:2148:29
    #15 0x5a373eef619e in DecodeJpegXl /src/libjxl/tools/djxl_fuzzer.cc:178:31
    #16 0x5a373eef619e in TestOneInput /src/libjxl/tools/djxl_fuzzer.cc:559:3
    #17 0x5a373eef619e in LLVMFuzzerTestOneInput /src/libjxl/tools/djxl_fuzzer.cc:569:10
    #18 0x5a373edecd92 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
    #19 0x5a373edd8f12 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #20 0x5a373edde674 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9
    #21 0x5a373ee06672 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #22 0x7f37bc69b082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)
    #23 0x5a373edb79cd in _start (/out/djxl_fuzzer+0xf69cd)

DEDUP_TOKEN: Load--jxl::N_SSE4::WriteToU8Stage::ProcessRow(std::__1::vector<std::__1::vector<float*, std::__1::allocator<float*> >, std::__1::allocator<std::__1::vector<float*, std::__1::allocator<float*> > > > const&, std::__1::vector<std::__1::vector<float*, std::__1::allocator<float*> >, std::__1::allocator<std::__1::vector<float*, std::__1::allocator<float*> > > > const&, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long) const--jxl::LowMemoryRenderPipeline::RenderRect(unsigned long, std::__1::vector<jxl::Plane<float>, std::__1::allocator<jxl::Plane<float> > >&, jxl::RectT<unsigned long>, jxl::RectT<unsigned long>)
AddressSanitizer can not provide additional info.
SUMMARY: AddressSanitizer: SEGV /src/libjxl/third_party/highway/hwy/ops/x86_128-inl.h:1659:24 in Load
==13==ABORTING
