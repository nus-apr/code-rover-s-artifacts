INFO: Seed: 2239986915
INFO: Loaded 1 modules   (9628 inline 8-bit counters): 9628 [0x9aadf0, 0x9ad38c), 
INFO: Loaded 1 PC tables (9628 PCs): 9628 [0x734d58,0x75a718), 
/out/hevc_dec_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6150000001c0 at pc 0x0000005dd14b bp 0x7ffe2eac63b0 sp 0x7ffe2eac63a8
WRITE of size 1 at 0x6150000001c0 thread T0
SCARINESS: 31 (1-byte-write-heap-buffer-overflow)
    #0 0x5dd14a in ihevcd_sao_shift_ctb /src/libhevc/decoder/ihevcd_sao.c:3318:57
    #1 0x5a2d46 in ihevcd_process /src/libhevc/decoder/ihevcd_process_slice.c:1161:21
    #2 0x58f733 in ihevcd_parse_slice_data /src/libhevc/decoder/ihevcd_parse_slice.c:3392:13
    #3 0x568d07 in ihevcd_decode /src/libhevc/decoder/ihevcd_decode.c:740:9
    #4 0x554eeb in Codec::decodeFrame(unsigned char const*, unsigned long, unsigned long*) /src/libhevc/fuzzer/hevc_dec_fuzzer.cpp:290:9
    #5 0x5556d4 in LLVMFuzzerTestOneInput /src/libhevc/fuzzer/hevc_dec_fuzzer.cpp:334:18
    #6 0x45a1d1 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:554:15
    #7 0x444a01 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:292:6
    #8 0x44a71e in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:775:9
    #9 0x4740a2 in main /src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerMain.cpp:19:10
    #10 0x75b8c8d0283f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #11 0x41dea8 in _start (/out/hevc_dec_fuzzer+0x41dea8)

DEDUP_TOKEN: ihevcd_sao_shift_ctb--ihevcd_process--ihevcd_parse_slice_data
0x6150000001c0 is located 0 bytes to the right of 320-byte region [0x615000000080,0x6150000001c0)
allocated by thread T0 here:
    #0 0x521512 in memalign /src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cpp:178:3
    #1 0x55c9df in ihevcd_allocate_dynamic_bufs /src/libhevc/decoder/ihevcd_api.c:1682:19
    #2 0x56846b in ihevcd_decode /src/libhevc/decoder/ihevcd_decode.c:712:19
    #3 0x55468f in Codec::decodeHeader(unsigned char const*, unsigned long) /src/libhevc/fuzzer/hevc_dec_fuzzer.cpp:247:11
    #4 0x555674 in LLVMFuzzerTestOneInput /src/libhevc/fuzzer/hevc_dec_fuzzer.cpp:327:10
    #5 0x45a1d1 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:554:15
    #6 0x444a01 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:292:6
    #7 0x44a71e in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:775:9
    #8 0x4740a2 in main /src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerMain.cpp:19:10
    #9 0x75b8c8d0283f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: memalign--ihevcd_allocate_dynamic_bufs--ihevcd_decode
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/libhevc/decoder/ihevcd_sao.c:3318:57 in ihevcd_sao_shift_ctb
Shadow bytes around the buggy address:
  0x0c2a7fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c2a7fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c2a7fff8000: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c2a7fff8010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c2a7fff8020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c2a7fff8030: 00 00 00 00 00 00 00 00[fa]fa fa fa fa fa fa fa
  0x0c2a7fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c2a7fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c2a7fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c2a7fff8070: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c2a7fff8080: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING
