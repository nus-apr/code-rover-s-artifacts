Accepting input from '/tmp/poc'
Usage for fuzzing: honggfuzz -P [flags] -- /out/jpegsave_file_fuzzer
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x61e000048a80 at pc 0x0000004a3c97 bp 0x7112ad3fe6a0 sp 0x7112ad3fde68
READ of size 64 at 0x61e000048a80 thread T1
SCARINESS: 26 (multi-byte-read-heap-buffer-overflow)
    #0 0x4a3c96 in __asan_memcpy /src/llvm-project/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:22:3
    #1 0x310b52d in jxl::N_AVX2::BlendingStage::ProcessPaddingRow(std::__1::vector<std::__1::vector<float*, std::__1::allocator<float*> >, std::__1::allocator<std::__1::vector<float*, std::__1::allocator<float*> > > > const&, unsigned long, unsigned long, unsigned long) const /src/libjxl/lib/jxl/render_pipeline/stage_blending.cc:176:9
    #2 0x30fb048 in jxl::LowMemoryRenderPipeline::RenderPadding(unsigned long, jxl::RectT<unsigned long>) /src/libjxl/lib/jxl/render_pipeline/low_memory_render_pipeline.cc:701:42
    #3 0x30fbc24 in jxl::LowMemoryRenderPipeline::ProcessBuffers(unsigned long, unsigned long) /src/libjxl/lib/jxl/render_pipeline/low_memory_render_pipeline.cc:742:7
    #4 0x2bf583e in jxl::FrameDecoder::ProcessACGroup(unsigned long, jxl::BitReader* restrict*, unsigned long, unsigned long, bool, bool) /src/libjxl/lib/jxl/dec_frame.cc:631:27
    #5 0x2bfe1ea in operator() /src/libjxl/lib/jxl/dec_frame.cc:793:5
    #6 0x2bfe1ea in jxl::ThreadPool::RunCallState<jxl::FrameDecoder::ProcessSections(jxl::FrameDecoder::SectionInfo const*, unsigned long, jxl::FrameDecoder::SectionStatus*)::$_1, jxl::FrameDecoder::ProcessSections(jxl::FrameDecoder::SectionInfo const*, unsigned long, jxl::FrameDecoder::SectionStatus*)::$_2>::CallDataFunc(void*, unsigned int, unsigned long) /src/libjxl/lib/jxl/base/data_parallel.h:81:14
    #7 0x3193899 in RunRange /src/libjxl/lib/threads/thread_parallel_runner_internal.cc:139:7
    #8 0x3193899 in jpegxl::ThreadParallelRunner::ThreadFunc(jpegxl::ThreadParallelRunner*, int) /src/libjxl/lib/threads/thread_parallel_runner_internal.cc:169:9
    #9 0x3195cb3 in __invoke<void (*)(jpegxl::ThreadParallelRunner *, int), jpegxl::ThreadParallelRunner *, unsigned int> /usr/local/bin/../include/c++/v1/type_traits:3663:23
    #10 0x3195cb3 in __thread_execute<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(jpegxl::ThreadParallelRunner *, int), jpegxl::ThreadParallelRunner *, unsigned int, 2UL, 3UL> /usr/local/bin/../include/c++/v1/thread:280:5
    #11 0x3195cb3 in void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(jpegxl::ThreadParallelRunner*, int), jpegxl::ThreadParallelRunner*, unsigned int> >(void*) /usr/local/bin/../include/c++/v1/thread:291:5
    #12 0x7112ae9d1608 in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x8608)
    #13 0x7112ae8c9352 in __clone (/lib/x86_64-linux-gnu/libc.so.6+0x11f352)

DEDUP_TOKEN: __asan_memcpy--jxl::N_AVX2::BlendingStage::ProcessPaddingRow(std::__1::vector<std::__1::vector<float*, std::__1::allocator<float*> >, std::__1::allocator<std::__1::vector<float*, std::__1::allocator<float*> > > > const&, unsigned long, unsigned long, unsigned long) const--jxl::LowMemoryRenderPipeline::RenderPadding(unsigned long, jxl::RectT<unsigned long>)
0x61e000048a80 is located 0 bytes to the right of 2560-byte region [0x61e000048080,0x61e000048a80)
allocated by thread T4 (pool) here:
    #0 0x4a48cd in malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:129:3
    #1 0x2555060 in jxl::CacheAligned::Allocate(unsigned long, unsigned long) /src/libjxl/lib/jxl/base/cache_aligned.cc:87:21
    #2 0x25bd62c in Allocate /src/libjxl/lib/jxl/base/cache_aligned.h:43:12
    #3 0x25bd62c in AllocateArray /src/libjxl/lib/jxl/base/cache_aligned.h:61:29
    #4 0x25bd62c in jxl::PlaneBase::PlaneBase(unsigned long, unsigned long, unsigned long) /src/libjxl/lib/jxl/image.cc:93:14
    #5 0x314eb77 in Plane /src/libjxl/lib/jxl/image.h:150:9
    #6 0x314eb77 in Image3 /src/libjxl/lib/jxl/image.h:348:17
    #7 0x314eb77 in jxl::(anonymous namespace)::WriteToImageBundleStage::SetInputSizes(std::__1::vector<std::__1::pair<unsigned long, unsigned long>, std::__1::allocator<std::__1::pair<unsigned long, unsigned long> > > const&) /src/libjxl/lib/jxl/render_pipeline/stage_write.cc:195:9
    #8 0x30f00f1 in jxl::LowMemoryRenderPipeline::Init() /src/libjxl/lib/jxl/render_pipeline/low_memory_render_pipeline.cc:303:17
    #9 0x2dae4d7 in jxl::RenderPipeline::Builder::Finalize(jxl::FrameDimensions) && /src/libjxl/lib/jxl/render_pipeline/render_pipeline.cc:91:8
    #10 0x30e8f68 in jxl::PassesDecoderState::PreparePipeline(jxl::ImageBundle*, jxl::PassesDecoderState::PipelineOptions) /src/libjxl/lib/jxl/dec_cache.cc:196:40
    #11 0x2bed444 in jxl::FrameDecoder::ProcessSections(jxl::FrameDecoder::SectionInfo const*, unsigned long, jxl::FrameDecoder::SectionStatus*) /src/libjxl/lib/jxl/dec_frame.cc:745:5
    #12 0x2579b21 in JxlDecoderProcessCodestream /src/libjxl/lib/jxl/decode.cc:1496:27
    #13 0x2579b21 in HandleBoxes(JxlDecoderStruct*) /src/libjxl/lib/jxl/decode.cc:1978:11
    #14 0x25720cf in JxlDecoderProcessInput /src/libjxl/lib/jxl/decode.cc:2143:29
    #15 0x62b4c4 in vips_foreign_load_jxl_process /src/libvips/build/../libvips/foreign/jxlload.c:380:19
    #16 0x62ad58 in vips_foreign_load_jxl_load /src/libvips/build/../libvips/foreign/jxlload.c:646:21
    #17 0x5e3e9e in vips_foreign_load_start /src/libvips/build/../libvips/foreign/foreign.c:990:7
    #18 0x52c3d2 in vips__region_start /src/libvips/build/../libvips/iofuncs/region.c:238:31
    #19 0x54393a in vips_region_generate /src/libvips/build/../libvips/iofuncs/region.c:1591:13
    #20 0x5300b6 in vips_region_fill /src/libvips/build/../libvips/iofuncs/region.c:882:7
    #21 0x543536 in vips_region_prepare /src/libvips/build/../libvips/iofuncs/region.c:1666:7
    #22 0x50939c in vips_image_write_gen /src/libvips/build/../libvips/iofuncs/image.c:2590:6
    #23 0x543a38 in vips_region_generate /src/libvips/build/../libvips/iofuncs/region.c:1597:6
    #24 0x5300b6 in vips_region_fill /src/libvips/build/../libvips/iofuncs/region.c:882:7
    #25 0x543536 in vips_region_prepare /src/libvips/build/../libvips/iofuncs/region.c:1666:7
    #26 0x4e71ec in vips_copy_gen /src/libvips/build/../libvips/conversion/copy.c:139:6
    #27 0x544c9a in vips_region_generate /src/libvips/build/../libvips/iofuncs/region.c:1597:6
    #28 0x544c9a in vips_region_prepare_to_generate /src/libvips/build/../libvips/iofuncs/region.c:1722:6
    #29 0x54451a in vips_region_prepare_to /src/libvips/build/../libvips/iofuncs/region.c:1839:7
    #30 0x51c165 in wbuffer_work_fn /src/libvips/build/../libvips/iofuncs/sinkdisc.c:431:11
    #31 0x54a2e1 in vips_task_work_unit /src/libvips/build/../libvips/iofuncs/threadpool.c:628:6
    #32 0x54a2e1 in vips_task_run /src/libvips/build/../libvips/iofuncs/threadpool.c:650:3
    #33 0x54af9c in vips_thread_main_loop /src/libvips/build/../libvips/iofuncs/threadpool.c:284:2
    #34 0x3531883 in g_thread_pool_thread_proxy gthreadpool.c.o

DEDUP_TOKEN: malloc--jxl::CacheAligned::Allocate(unsigned long, unsigned long)--Allocate
Thread T1 created by T0 here:
    #0 0x48ddec in __interceptor_pthread_create /src/llvm-project/compiler-rt/lib/asan/asan_interceptors.cpp:207:3
    #1 0x319410f in __libcpp_thread_create /usr/local/bin/../include/c++/v1/__threading_support:514:10
    #2 0x319410f in thread<void (&)(jpegxl::ThreadParallelRunner *, int), jpegxl::ThreadParallelRunner *, unsigned int &, void> /usr/local/bin/../include/c++/v1/thread:307:16
    #3 0x319410f in construct<std::__1::thread, void (&)(jpegxl::ThreadParallelRunner *, int), jpegxl::ThreadParallelRunner *, unsigned int &> /usr/local/bin/../include/c++/v1/__memory/allocator.h:151:28
    #4 0x319410f in construct<std::__1::thread, void (&)(jpegxl::ThreadParallelRunner *, int), jpegxl::ThreadParallelRunner *, unsigned int &, void> /usr/local/bin/../include/c++/v1/__memory/allocator_traits.h:290:13
    #5 0x319410f in __construct_one_at_end<void (&)(jpegxl::ThreadParallelRunner *, int), jpegxl::ThreadParallelRunner *, unsigned int &> /usr/local/bin/../include/c++/v1/vector:933:5
    #6 0x319410f in emplace_back<void (&)(jpegxl::ThreadParallelRunner *, int), jpegxl::ThreadParallelRunner *, unsigned int &> /usr/local/bin/../include/c++/v1/vector:1693:9
    #7 0x319410f in jpegxl::ThreadParallelRunner::ThreadParallelRunner(int) /src/libjxl/lib/threads/thread_parallel_runner_internal.cc:196:14
    #8 0x319271a in JxlThreadParallelRunnerCreate /src/libjxl/lib/threads/thread_parallel_runner.cc:81:19
    #9 0x629dfb in vips_foreign_load_jxl_build /src/libvips/build/../libvips/foreign/jxlload.c:158:16
    #10 0x62be47 in vips_foreign_load_jxl_file_build /src/libvips/build/../libvips/foreign/jxlload.c:745:6
    #11 0x4f1b5c in vips_object_build /src/libvips/build/../libvips/iofuncs/object.c:367:6
    #12 0x7f9419 in vips_cache_operation_buildp /src/libvips/build/../libvips/iofuncs/cache.c:910:7
    #13 0x5252a5 in vips_call_required_optional /src/libvips/build/../libvips/iofuncs/operation.c:880:6
    #14 0x52834e in vips_call_by_name /src/libvips/build/../libvips/iofuncs/operation.c:920:11
    #15 0x528724 in vips_call_split_option_string /src/libvips/build/../libvips/iofuncs/operation.c:1039:11
    #16 0x5062a4 in vips_image_new_from_file /src/libvips/build/../libvips/iofuncs/image.c:1923:11
    #17 0x4ddb52 in test_one_file /src/libvips/fuzz/jpegsave_file_fuzzer.cc:17:16
    #18 0x4ddb52 in LLVMFuzzerTestOneInput /src/libvips/fuzz/jpegsave_file_fuzzer.cc:52:3
    #19 0x31ba83b in main (/out/jpegsave_file_fuzzer+0x31ba83b)

DEDUP_TOKEN: __interceptor_pthread_create--__libcpp_thread_create--thread<void (&)(jpegxl::ThreadParallelRunner *, int), jpegxl::ThreadParallelRunner *, unsigned int &, void>
Thread T4 (pool) created by T0 here:
    #0 0x48ddec in __interceptor_pthread_create /src/llvm-project/compiler-rt/lib/asan/asan_interceptors.cpp:207:3
    #1 0x355531a in g_system_thread_new (/out/jpegsave_file_fuzzer+0x355531a)

DEDUP_TOKEN: __interceptor_pthread_create--g_system_thread_new
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/llvm-project/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:22:3 in __asan_memcpy
Shadow bytes around the buggy address:
  0x0c3c80001100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c3c80001110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c3c80001120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c3c80001130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c3c80001140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c3c80001150:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c3c80001160: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c3c80001170: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c3c80001180: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c3c80001190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c3c800011a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING
