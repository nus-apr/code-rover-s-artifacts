INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 2232520091
INFO: Loaded 1 modules   (17526 inline 8-bit counters): 17526 [0x850c9e4, 0x8510e5a), 
INFO: Loaded 1 PC tables (17526 PCs): 17526 [0x8433cd4,0x8456084), 
/out/affdicfuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0xed0050a0 at pc 0x082b1707 bp 0xff84e388 sp 0xff84e380
READ of size 1 at 0xed0050a0 thread T0
SCARINESS: 12 (1-byte-read-heap-buffer-overflow)
    #0 0x82b1706 in AffixMgr::compound_check(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, short, short, short, short, hentry**, hentry**, char, char, int*) /src/hunspell/src/hunspell/affixmgr.cxx:2118:28
    #1 0x823a0c7 in SuggestMgr::checkword(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, int*, long*) /src/hunspell/src/hunspell/suggestmgr.cxx:1653:21
    #2 0x8239d52 in SuggestMgr::testsug(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, int*, long*) /src/hunspell/src/hunspell/suggestmgr.cxx:173:17
    #3 0x8247ef1 in SuggestMgr::forgotchar(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) /src/hunspell/src/hunspell/suggestmgr.cxx:749:7
    #4 0x823d0f2 in SuggestMgr::suggest(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int*) /src/hunspell/src/hunspell/suggestmgr.cxx:301:9
    #5 0x8202bea in HunspellImpl::suggest_internal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, bool&, unsigned int&, int&) /src/hunspell/src/hunspell/hunspell.cxx:1063:22
    #6 0x81ff321 in HunspellImpl::suggest(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&) /src/hunspell/src/hunspell/hunspell.cxx:900:35
    #7 0x820c0c3 in HunspellImpl::suggest(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /src/hunspell/src/hunspell/hunspell.cxx:991:10
    #8 0x822abeb in Hunspell::suggest(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /src/hunspell/src/hunspell/hunspell.cxx:2079:18
    #9 0x81e8760 in LLVMFuzzerTestOneInput /src/hunspell/./src/tools/affdicfuzzer.cxx:66:14
    #10 0x80a885e in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned int) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
    #11 0x80937be in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned int) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #12 0x80993c0 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned int)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9
    #13 0x80c2fa7 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #14 0xee99ded4 in __libc_start_main (/lib32/libc.so.6+0x1aed4) (BuildId: d56935956a210bf85f6592f3178b979ad4f7b35f)
    #15 0x808a905 in _start (/out/affdicfuzzer+0x808a905)

DEDUP_TOKEN: AffixMgr::compound_check(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, short, short, short, short, hentry**, hentry**, char, char, int*)--SuggestMgr::checkword(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, int*, long*)--SuggestMgr::testsug(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, int*, long*)
0xed0050a0 is located 0 bytes to the right of 32-byte region [0xed005080,0xed0050a0)
allocated by thread T0 here:
    #0 0x81e5259 in operator new(unsigned int) /src/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:95:3
    #1 0x833b7d9 in std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::operator=(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) (/out/affdicfuzzer+0x833b7d9)

DEDUP_TOKEN: operator new(unsigned int)--std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::operator=(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/hunspell/src/hunspell/affixmgr.cxx:2118:28 in AffixMgr::compound_check(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, short, short, short, short, hentry**, hentry**, char, char, int*)
Shadow bytes around the buggy address:
  0x3da009c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3da009d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3da009e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3da009f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3da00a00: fa fa fa fa fd fd fd fd fa fa fd fd fd fd fa fa
=>0x3da00a10: 00 00 00 00[fa]fa fd fd fd fd fa fa fd fd fd fd
  0x3da00a20: fa fa fd fd fd fd fa fa fd fd fd fd fa fa fa fa
  0x3da00a30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3da00a40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3da00a50: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3da00a60: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING
