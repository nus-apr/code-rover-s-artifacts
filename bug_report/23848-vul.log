======================= INFO =========================
This binary is built for AFL-fuzz.
To run the target function on individual input(s) execute this:
  /out/arrow-ipc-file-fuzz < INPUT_FILE
or
  /out/arrow-ipc-file-fuzz INPUT_FILE1 [INPUT_FILE2 ... ]
To fuzz with afl-fuzz execute this:
  afl-fuzz [afl-flags] /out/arrow-ipc-file-fuzz [-N]
afl-fuzz will run N iterations before re-spawning the process (default: 1000)
======================================================
Reading 1862 bytes from /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60a000000080 at pc 0x00000058c9c7 bp 0x7ffea86abdb0 sp 0x7ffea86ab578
READ of size 385875977 at 0x60a000000080 thread T0
SCARINESS: 26 (multi-byte-read-heap-buffer-overflow)
    #0 0x58c9c6 in __asan_memcpy /src/llvm-project/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:22:3
    #1 0x7ae630 in arrow::ConcatenateBuffers(std::__1::vector<std::__1::shared_ptr<arrow::Buffer>, std::__1::allocator<std::__1::shared_ptr<arrow::Buffer> > > const&, arrow::MemoryPool*) /src/arrow/cpp/src/arrow/buffer.cc:261:5
    #2 0x7336ae in arrow::ConcatenateImpl::Visit(arrow::BinaryType const&) /src/arrow/cpp/src/arrow/array/concatenate.cc:199:12
    #3 0x731b2b in arrow::Status arrow::VisitTypeInline<arrow::ConcatenateImpl>(arrow::DataType const&, arrow::ConcatenateImpl*) /src/arrow/cpp/src/arrow/visitor_inline.h:88:5
    #4 0x72cf1b in arrow::ConcatenateImpl::Concatenate(std::__1::shared_ptr<arrow::ArrayData>*) && /src/arrow/cpp/src/arrow/array/concatenate.cc:179:5
    #5 0x728e5e in arrow::Concatenate(std::__1::vector<std::__1::shared_ptr<arrow::Array>, std::__1::allocator<std::__1::shared_ptr<arrow::Array> > > const&, arrow::MemoryPool*) /src/arrow/cpp/src/arrow/array/concatenate.cc:388:3
    #6 0x15bd6fb in arrow::ipc::DictionaryMemo::AddDictionaryDelta(long, std::__1::shared_ptr<arrow::Array> const&, arrow::MemoryPool*) /src/arrow/cpp/src/arrow/ipc/dictionary.cc:152:3
    #7 0x5e784c in arrow::ipc::ReadDictionary(arrow::Buffer const&, arrow::ipc::DictionaryMemo*, arrow::ipc::IpcReadOptions const&, arrow::io::RandomAccessFile*) /src/arrow/cpp/src/arrow/ipc/reader.cc:688:29
    #8 0x6bafb0 in arrow::ipc::RecordBatchFileReaderImpl::ReadDictionaries() /src/arrow/cpp/src/arrow/ipc/reader.cc:926:7
    #9 0x6b6341 in arrow::ipc::RecordBatchFileReaderImpl::ReadRecordBatch(int) /src/arrow/cpp/src/arrow/ipc/reader.cc:861:7
    #10 0x643d08 in arrow::ipc::internal::FuzzIpcFile(unsigned char const*, long) /src/arrow/cpp/src/arrow/ipc/reader.cc:1634:5
    #11 0x5c16d9 in LLVMFuzzerTestOneInput /src/arrow/cpp/src/arrow/ipc/file_fuzz.cc:25:17
    #12 0x5bfd6e in ExecuteFilesOnyByOne /src/libfuzzer/afl/afl_driver.cpp:217:5
    #13 0x5bfd6e in main /src/libfuzzer/afl/afl_driver.cpp:254:12
    #14 0x7668630e483f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #15 0x515258 in _start (/out/arrow-ipc-file-fuzz+0x515258)

DEDUP_TOKEN: __asan_memcpy--arrow::ConcatenateBuffers(std::__1::vector<std::__1::shared_ptr<arrow::Buffer>, std::__1::allocator<std::__1::shared_ptr<arrow::Buffer> > > const&, arrow::MemoryPool*)--arrow::ConcatenateImpl::Visit(arrow::BinaryType const&)
0x60a000000080 is located 0 bytes to the right of 64-byte region [0x60a000000040,0x60a000000080)
allocated by thread T0 here:
    #0 0x58e017 in posix_memalign /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:226:3
    #1 0x7c4557 in AllocateAligned /src/arrow/cpp/src/arrow/memory_pool.cc:113:24
    #2 0x7c4557 in arrow::BaseMemoryPoolImpl<arrow::(anonymous namespace)::SystemAllocator>::Allocate(long, unsigned char**) /src/arrow/cpp/src/arrow/memory_pool.cc:295:5
    #3 0x7b0c1b in arrow::PoolBuffer::Reserve(long) /src/arrow/cpp/src/arrow/buffer.cc:158:9
    #4 0x7b025e in arrow::PoolBuffer::Resize(long, bool) /src/arrow/cpp/src/arrow/buffer.cc:182:7
    #5 0x7aa2c8 in ResizePoolBuffer<std::__1::unique_ptr<arrow::Buffer, std::__1::default_delete<arrow::Buffer> >, std::__1::unique_ptr<arrow::PoolBuffer, std::__1::default_delete<arrow::PoolBuffer> > > /src/arrow/cpp/src/arrow/buffer.cc:221:3
    #6 0x7aa2c8 in arrow::AllocateBuffer(long, arrow::MemoryPool*) /src/arrow/cpp/src/arrow/buffer.cc:229:10
    #7 0x16056fa in arrow::ipc::MessageDecoder::MessageDecoderImpl::ConsumeBodyChunks() /src/arrow/cpp/src/arrow/ipc/message.cc:722:7
    #8 0x15fbd9c in arrow::ipc::MessageDecoder::MessageDecoderImpl::ConsumeChunks() /src/arrow/cpp/src/arrow/ipc/message.cc:569:11
    #9 0x15f8579 in arrow::ipc::MessageDecoder::MessageDecoderImpl::ConsumeBuffer(std::__1::shared_ptr<arrow::Buffer>) /src/arrow/cpp/src/arrow/ipc/message.cc:544:12
    #10 0x15e40b9 in Consume /src/arrow/cpp/src/arrow/ipc/message.cc:811:17
    #11 0x15e40b9 in arrow::ipc::ReadMessage(long, int, arrow::io::RandomAccessFile*) /src/arrow/cpp/src/arrow/ipc/message.cc:307:7
    #12 0x6bcb25 in arrow::ipc::RecordBatchFileReaderImpl::ReadMessageFromBlock(arrow::ipc::internal::FileBlock const&, std::__1::unique_ptr<arrow::ipc::Message, std::__1::default_delete<arrow::ipc::Message> >*) /src/arrow/cpp/src/arrow/ipc/reader.cc:915:12
    #13 0x6ba541 in arrow::ipc::RecordBatchFileReaderImpl::ReadDictionaries() /src/arrow/cpp/src/arrow/ipc/reader.cc:922:7
    #14 0x6b6341 in arrow::ipc::RecordBatchFileReaderImpl::ReadRecordBatch(int) /src/arrow/cpp/src/arrow/ipc/reader.cc:861:7
    #15 0x643d08 in arrow::ipc::internal::FuzzIpcFile(unsigned char const*, long) /src/arrow/cpp/src/arrow/ipc/reader.cc:1634:5
    #16 0x5c16d9 in LLVMFuzzerTestOneInput /src/arrow/cpp/src/arrow/ipc/file_fuzz.cc:25:17
    #17 0x5bfd6e in ExecuteFilesOnyByOne /src/libfuzzer/afl/afl_driver.cpp:217:5
    #18 0x5bfd6e in main /src/libfuzzer/afl/afl_driver.cpp:254:12
    #19 0x7668630e483f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: posix_memalign--AllocateAligned--arrow::BaseMemoryPoolImpl<arrow::(anonymous namespace)::SystemAllocator>::Allocate(long, unsigned char**)
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/llvm-project/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:22:3 in __asan_memcpy
Shadow bytes around the buggy address:
  0x0c147fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c147fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c147fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c147fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c147fff8000: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00
=>0x0c147fff8010:[fa]fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00
  0x0c147fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c147fff8030: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa
  0x0c147fff8040: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa
  0x0c147fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c147fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING
