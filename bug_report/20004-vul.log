======================= INFO =========================
This binary is built for AFL-fuzz.
To run the target function on individual input(s) execute this:
  /out/fuzzshark_ip_proto-udp < INPUT_FILE
or
  /out/fuzzshark_ip_proto-udp INPUT_FILE1 [INPUT_FILE2 ... ]
To fuzz with afl-fuzz execute this:
  afl-fuzz [afl-flags] /out/fuzzshark_ip_proto-udp [-N]
afl-fuzz will run N iterations before re-spawning the process (default: 1000)
======================================================
oss-fuzzshark: disabling: ip
oss-fuzzshark: disabling: udplite
oss-fuzzshark: disabling: ospf
oss-fuzzshark: disabling: bgp
oss-fuzzshark: disabling: dhcp
oss-fuzzshark: disabling: json
oss-fuzzshark: disabling: snort
oss-fuzzshark: configured for dissector: udp in table: ip.proto
Reading 196 bytes from /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: global-buffer-overflow on address 0x0000071da0a8 at pc 0x000001b03a92 bp 0x7fffdf380a50 sp 0x7fffdf380a48
READ of size 8 at 0x0000071da0a8 thread T0
SCARINESS: 33 (8-byte-read-global-buffer-overflow-far-from-bounds)
    #0 0x1b03a91 in wassp_match_strval /src/wireshark/epan/dissectors/packet-wassp.c:4384:32
    #1 0x1b03a91 in dissect_wassp_sub_tlv /src/wireshark/epan/dissectors/packet-wassp.c:4779
    #2 0x1b0348a in dissect_wassp_sub_tlv /src/wireshark/epan/dissectors/packet-wassp.c
    #3 0x1b06a96 in dissect_wassp_tlv /src/wireshark/epan/dissectors/packet-wassp.c
    #4 0x1b084b5 in dissect_unfragmented_wassp /src/wireshark/epan/dissectors/packet-wassp.c:5873:12
    #5 0x1b084b5 in dissect_wassp /src/wireshark/epan/dissectors/packet-wassp.c:6021
    #6 0x1b07268 in dissect_wassp_static /src/wireshark/epan/dissectors/packet-wassp.c:7076:9
    #7 0x618990 in call_dissector_through_handle /src/wireshark/epan/packet.c:706:9
    #8 0x618990 in call_dissector_work /src/wireshark/epan/packet.c:799
    #9 0x618f64 in dissector_try_uint_new /src/wireshark/epan/packet.c:1399:8
    #10 0x618f64 in dissector_try_uint /src/wireshark/epan/packet.c:1423
    #11 0x1a640cb in decode_udp_ports /src/wireshark/epan/dissectors/packet-udp.c:685:7
    #12 0x1a696da in dissect /src/wireshark/epan/dissectors/packet-udp.c:1222:5
    #13 0x1a66281 in dissect_udp /src/wireshark/epan/dissectors/packet-udp.c:1228:3
    #14 0x618990 in call_dissector_through_handle /src/wireshark/epan/packet.c:706:9
    #15 0x618990 in call_dissector_work /src/wireshark/epan/packet.c:799
    #16 0x621717 in call_dissector_only /src/wireshark/epan/packet.c:3167:8
    #17 0x621717 in call_all_postdissectors /src/wireshark/epan/packet.c:3542
    #18 0xededc0 in dissect_frame /src/wireshark/epan/dissectors/packet-frame.c:730:5
    #19 0x618990 in call_dissector_through_handle /src/wireshark/epan/packet.c:706:9
    #20 0x618990 in call_dissector_work /src/wireshark/epan/packet.c:799
    #21 0x6153db in call_dissector_only /src/wireshark/epan/packet.c:3167:8
    #22 0x6153db in call_dissector_with_data /src/wireshark/epan/packet.c:3180
    #23 0x614bab in dissect_record /src/wireshark/epan/packet.c:580:3
    #24 0x608997 in epan_dissect_run /src/wireshark/epan/epan.c:554:2
    #25 0x4caabe in LLVMFuzzerTestOneInput /src/wireshark/fuzz/fuzzshark.c:343:2
    #26 0x26a05ca in ExecuteFilesOnyByOne /src/libfuzzer/afl/afl_driver.cpp:216:5
    #27 0x26a05ca in main /src/libfuzzer/afl/afl_driver.cpp:253
    #28 0x73214d39e83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #29 0x420278 in _start (/out/fuzzshark_ip_proto-udp+0x420278)

DEDUP_TOKEN: wassp_match_strval--dissect_wassp_sub_tlv--dissect_wassp_sub_tlv
0x0000071da0a8 is located 8 bytes to the right of global variable 'tlvMainTable' defined in '/src/wireshark/epan/dissectors/packet-wassp.c:1369:24' (0x71d3aa0) of size 26112
SUMMARY: AddressSanitizer: global-buffer-overflow /src/wireshark/epan/dissectors/packet-wassp.c:4384:32 in wassp_match_strval
Shadow bytes around the buggy address:
  0x000080e333c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x000080e333d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x000080e333e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x000080e333f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x000080e33400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x000080e33410: 00 00 00 00 f9[f9]f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
  0x000080e33420: f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
  0x000080e33430: f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
  0x000080e33440: f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
  0x000080e33450: f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
  0x000080e33460: f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING
