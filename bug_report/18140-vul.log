INFO: Seed: 2270506696
INFO: Loaded 1 modules   (6663 inline 8-bit counters): 6663 [0x8ed620, 0x8ef027), 
INFO: Loaded 1 PC tables (6663 PCs): 6663 [0x8ef028,0x909098), 
/out/jsoncpp_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==12==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6020000000ba at pc 0x0000005763f3 bp 0x7fff41bf4100 sp 0x7fff41bf40f8
READ of size 1 at 0x6020000000ba thread T0
SCARINESS: 12 (1-byte-read-heap-buffer-overflow)
    #0 0x5763f2 in getNextChar /src/jsoncpp/src/lib_json/json_reader.cpp:1791:10
    #1 0x5763f2 in readCStyleComment /src/jsoncpp/src/lib_json/json_reader.cpp:1359:14
    #2 0x5763f2 in Json::OurReader::readComment() /src/jsoncpp/src/lib_json/json_reader.cpp:1306:18
    #3 0x574631 in Json::OurReader::readToken(Json::OurReader::Token&) /src/jsoncpp/src/lib_json/json_reader.cpp:1202:10
    #4 0x56bc2b in skipCommentTokens /src/jsoncpp/src/lib_json/json_reader.cpp:1165:7
    #5 0x56bc2b in Json::OurReader::parse(char const*, char const*, Json::Value&, bool) /src/jsoncpp/src/lib_json/json_reader.cpp:1048:3
    #6 0x588591 in Json::OurCharReader::parse(char const*, char const*, Json::Value*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*) /src/jsoncpp/src/lib_json/json_reader.cpp:1898:23
    #7 0x554e20 in LLVMFuzzerTestOneInput /src/jsoncpp/build/../src/test_lib_json/fuzz.cpp:44:13
    #8 0x45ad11 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:556:15
    #9 0x445931 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:292:6
    #10 0x44b5ee in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:774:9
    #11 0x475762 in main /src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerMain.cpp:19:10
    #12 0x71af989a183f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #13 0x41ece8 in _start (/out/jsoncpp_fuzzer+0x41ece8)

DEDUP_TOKEN: getNextChar--readCStyleComment--Json::OurReader::readComment()
0x6020000000ba is located 0 bytes to the right of 10-byte region [0x6020000000b0,0x6020000000ba)
allocated by thread T0 here:
    #0 0x52253d in malloc /src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cpp:145:3
    #1 0x433c17 in operator new(unsigned long) (/out/jsoncpp_fuzzer+0x433c17)
    #2 0x445931 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:292:6
    #3 0x44b5ee in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:774:9
    #4 0x475762 in main /src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerMain.cpp:19:10
    #5 0x71af989a183f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: malloc--operator new(unsigned long)--fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long)
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/jsoncpp/src/lib_json/json_reader.cpp:1791:10 in getNextChar
Shadow bytes around the buggy address:
  0x0c047fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff8000: fa fa 00 00 fa fa 00 fa fa fa 00 fa fa fa 00 fa
=>0x0c047fff8010: fa fa 00 02 fa fa 00[02]fa fa fd fd fa fa 00 00
  0x0c047fff8020: fa fa fd fd fa fa 00 06 fa fa fd fd fa fa 00 03
  0x0c047fff8030: fa fa fd fd fa fa 00 03 fa fa fd fd fa fa 00 04
  0x0c047fff8040: fa fa fd fd fa fa 00 06 fa fa fd fd fa fa 00 07
  0x0c047fff8050: fa fa fd fd fa fa 00 04 fa fa fd fd fa fa 00 05
  0x0c047fff8060: fa fa fd fd fa fa 00 07 fa fa 00 fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==12==ABORTING
