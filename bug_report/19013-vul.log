INFO: Seed: 2280933293
INFO: Loaded 1 modules   (3106 inline 8-bit counters): 3106 [0x8229f0, 0x823612), 
INFO: Loaded 1 PC tables (3106 PCs): 3106 [0x823618,0x82f838), 
/out/template_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6130000001c0 at pc 0x00000058abbf bp 0x7ffc4648c7d0 sp 0x7ffc4648c7c8
READ of size 4 at 0x6130000001c0 thread T0
SCARINESS: 17 (4-byte-read-heap-buffer-overflow)
    #0 0x58abbe in post_process_template /src/lwan/src/lib/lwan-template.c:1031:28
    #1 0x5867b2 in parser_shutdown /src/lwan/src/lib/lwan-template.c:1153:26
    #2 0x584ee8 in parse_string /src/lwan/src/lib/lwan-template.c:1185:12
    #3 0x584ca4 in lwan_tpl_compile_string_full /src/lwan/src/lib/lwan-template.c:1301:13
    #4 0x59a89e in LLVMFuzzerTestOneInput /src/lwan/src/bin/fuzz/template_fuzzer.cc:65:11
    #5 0x45dcb1 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:556:15
    #6 0x4488d1 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:292:6
    #7 0x44e58e in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:774:9
    #8 0x478702 in main /src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerMain.cpp:19:10
    #9 0x7fd04bc5283f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #10 0x421c88 in _start (/out/template_fuzzer+0x421c88)

DEDUP_TOKEN: post_process_template--parser_shutdown--parse_string
0x6130000001c0 is located 0 bytes to the right of 384-byte region [0x613000000040,0x6130000001c0)
allocated by thread T0 here:
    #0 0x5257f9 in realloc /src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cpp:164:3
    #1 0x55b9ff in lwan_array_append_heap /src/lwan/src/lib/lwan-array.c:80:20
    #2 0x586b65 in emit_chunk /src/lwan/src/lib/lwan-template.c:563:13
    #3 0x5861e9 in parser_text /src/lwan/src/lib/lwan-template.c:861:13
    #4 0x584eb0 in parse_string /src/lwan/src/lib/lwan-template.c:1182:17
    #5 0x584ca4 in lwan_tpl_compile_string_full /src/lwan/src/lib/lwan-template.c:1301:13
    #6 0x59a89e in LLVMFuzzerTestOneInput /src/lwan/src/bin/fuzz/template_fuzzer.cc:65:11
    #7 0x45dcb1 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:556:15
    #8 0x4488d1 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:292:6
    #9 0x44e58e in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:774:9
    #10 0x478702 in main /src/llvm/projects/compiler-rt/lib/fuzzer/FuzzerMain.cpp:19:10
    #11 0x7fd04bc5283f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: realloc--lwan_array_append_heap--emit_chunk
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/lwan/src/lib/lwan-template.c:1031:28 in post_process_template
Shadow bytes around the buggy address:
  0x0c267fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c267fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c267fff8000: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00
  0x0c267fff8010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c267fff8020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c267fff8030: 00 00 00 00 00 00 00 00[fa]fa fa fa fa fa fa fa
  0x0c267fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c267fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c267fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c267fff8070: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c267fff8080: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING
