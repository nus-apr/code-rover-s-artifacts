INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 2191488242
INFO: Loaded 1 modules   (11987 inline 8-bit counters): 11987 [0x772980, 0x775853), 
INFO: Loaded 1 PC tables (11987 PCs): 11987 [0x6d4ad0,0x703800), 
/out/fuzz_srcfiles: Running 1 inputs 1 time(s) each.
Running: /tmp/poc

libdwarf is unable to record error DW_DLE_ELF_SECTION_ERROR(446) Section offset or size is too large. Corrupt elf object. No error argument or handler available

libdwarf is unable to record error DW_DLE_ELF_SECTION_ERROR(446) Section offset or size is too large. Corrupt elf object. No error argument or handler available
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6020000002e0 at pc 0x0000005c34e9 bp 0x7ffe7c676c50 sp 0x7ffe7c676c48
READ of size 1 at 0x6020000002e0 thread T0
SCARINESS: 12 (1-byte-read-heap-buffer-overflow)
    #0 0x5c34e8 in operandmismatch /src/libdwarf/src/lib/libdwarf/dwarf_line_table_reader_common.h:93:25
    #1 0x5c34e8 in _dwarf_read_line_table_header /src/libdwarf/src/lib/libdwarf/dwarf_line_table_reader_common.h:352:28
    #2 0x5c1939 in dwarf_srcfiles /src/libdwarf/src/lib/libdwarf/dwarf_line.c:553:16
    #3 0x56a29e in examplee /src/libdwarf/fuzz/fuzz_srcfiles.c:99:9
    #4 0x56a29e in LLVMFuzzerTestOneInput /src/libdwarf/fuzz/fuzz_srcfiles.c:77:11
    #5 0x43ddf3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
    #6 0x429552 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #7 0x42edfc in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9
    #8 0x458332 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #9 0x7df39ab05082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 87b331c034a6458c64ce09c03939e947212e18ce)
    #10 0x41f71d in _start (/out/fuzz_srcfiles+0x41f71d)

DEDUP_TOKEN: operandmismatch--_dwarf_read_line_table_header--dwarf_srcfiles
0x6020000002e0 is located 0 bytes to the right of 16-byte region [0x6020000002d0,0x6020000002e0)
allocated by thread T0 here:
    #0 0x52ef86 in malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:69:3
    #1 0x64384b in elf_load_nolibelf_section /src/libdwarf/src/lib/libdwarf/dwarf_elfread.c:230:26
    #2 0x5bd0d0 in _dwarf_load_section /src/libdwarf/src/lib/libdwarf/dwarf_init_finish.c:1999:11
    #3 0x5c10f8 in dwarf_srcfiles /src/libdwarf/src/lib/libdwarf/dwarf_line.c:459:11
    #4 0x56a29e in examplee /src/libdwarf/fuzz/fuzz_srcfiles.c:99:9
    #5 0x56a29e in LLVMFuzzerTestOneInput /src/libdwarf/fuzz/fuzz_srcfiles.c:77:11
    #6 0x43ddf3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
    #7 0x429552 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #8 0x42edfc in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9
    #9 0x458332 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #10 0x7df39ab05082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 87b331c034a6458c64ce09c03939e947212e18ce)

DEDUP_TOKEN: malloc--elf_load_nolibelf_section--_dwarf_load_section
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/libdwarf/src/lib/libdwarf/dwarf_line_table_reader_common.h:93:25 in operandmismatch
Shadow bytes around the buggy address:
  0x0c047fff8000: fa fa 00 00 fa fa 00 fa fa fa 00 fa fa fa 00 fa
  0x0c047fff8010: fa fa fd fd fa fa 00 00 fa fa 00 00 fa fa 00 00
  0x0c047fff8020: fa fa 00 00 fa fa 00 00 fa fa 00 00 fa fa 00 00
  0x0c047fff8030: fa fa 00 00 fa fa 00 00 fa fa 00 00 fa fa 00 00
  0x0c047fff8040: fa fa 00 00 fa fa 01 fa fa fa 00 fa fa fa 00 07
=>0x0c047fff8050: fa fa 04 fa fa fa 04 fa fa fa 00 00[fa]fa fa fa
  0x0c047fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8070: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8080: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8090: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff80a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING
