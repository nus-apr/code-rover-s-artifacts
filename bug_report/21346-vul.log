Reading 256 bytes from /tmp/poc
======================= INFO =========================
This binary is built for AFL-fuzz.
To run the target function on individual input(s) execute this:
  /out/fuzz_process_packet < INPUT_FILE
or
  /out/fuzz_process_packet INPUT_FILE1 [INPUT_FILE2 ... ]
To fuzz with afl-fuzz execute this:
  afl-fuzz [afl-flags] /out/fuzz_process_packet [-N]
afl-fuzz will run N iterations before re-spawning the process (default: 1000)
======================================================
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x611000000140 at pc 0x0000004352f9 bp 0x7ffec6865120 sp 0x7ffec68648c8
READ of size 7 at 0x611000000140 thread T0
SCARINESS: 21 (7-byte-read-heap-buffer-overflow)
    #0 0x4352f8 in MemcmpInterceptorCommon(void*, int (*)(void const*, void const*, unsigned long), void const*, void const*, unsigned long) /src/llvm-project/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:839:7
    #1 0x43584a in bcmp /src/llvm-project/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:885:10
    #2 0x54fedf in ndpi_search_irc_tcp /src/ndpi/src/lib/protocols/irc.c:680:9
    #3 0x4d9393 in check_ndpi_tcp_flow_func /src/ndpi/src/lib/ndpi_main.c:4141:4
    #4 0x4deb09 in ndpi_detection_process_packet /src/ndpi/src/lib/ndpi_main.c:4891:3
    #5 0x4c9493 in LLVMFuzzerTestOneInput /src/ndpi/fuzz/fuzz_process_packet.c:24:3
    #6 0x598cce in ExecuteFilesOnyByOne /src/libfuzzer/afl/afl_driver.cpp:216:5
    #7 0x598cce in main /src/libfuzzer/afl/afl_driver.cpp:253:12
    #8 0x7d1424c9783f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #9 0x41df28 in _start (/out/fuzz_process_packet+0x41df28)

DEDUP_TOKEN: MemcmpInterceptorCommon(void*, int (*)(void const*, void const*, unsigned long), void const*, void const*, unsigned long)--bcmp--ndpi_search_irc_tcp
0x611000000140 is located 0 bytes to the right of 256-byte region [0x611000000040,0x611000000140)
allocated by thread T0 here:
    #0 0x4c693d in operator new(unsigned long) /src/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:99:3
    #1 0x598c67 in __libcpp_allocate /usr/local/bin/../include/c++/v1/new:253:10
    #2 0x598c67 in allocate /usr/local/bin/../include/c++/v1/memory:1853:37
    #3 0x598c67 in allocate /usr/local/bin/../include/c++/v1/memory:1570:21
    #4 0x598c67 in __vallocate /usr/local/bin/../include/c++/v1/vector:994:37
    #5 0x598c67 in vector /usr/local/bin/../include/c++/v1/vector:1125:9
    #6 0x598c67 in ExecuteFilesOnyByOne /src/libfuzzer/afl/afl_driver.cpp:213:23
    #7 0x598c67 in main /src/libfuzzer/afl/afl_driver.cpp:253:12
    #8 0x7d1424c9783f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: operator new(unsigned long)--__libcpp_allocate--allocate
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/llvm-project/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:839:7 in MemcmpInterceptorCommon(void*, int (*)(void const*, void const*, unsigned long), void const*, void const*, unsigned long)
Shadow bytes around the buggy address:
  0x0c227fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c227fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c227fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c227fff8000: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00
  0x0c227fff8010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c227fff8020: 00 00 00 00 00 00 00 00[fa]fa fa fa fa fa fa fa
  0x0c227fff8030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c227fff8040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c227fff8050: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00
  0x0c227fff8060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c227fff8070: 00 00 00 00 00 00 00 00 fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING
