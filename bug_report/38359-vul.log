Accepting input from '/tmp/poc'
Usage for fuzzing: honggfuzz -P [flags] -- /out/srtp-fuzzer
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000000120 at pc 0x00000049b747 bp 0x7ffe5e390e30 sp 0x7ffe5e3905f8
READ of size 30 at 0x602000000120 thread T0
SCARINESS: 26 (multi-byte-read-heap-buffer-overflow)
    #0 0x49b746 in __asan_memcpy /src/llvm-project/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:22:3
    #1 0x4e68ef in srtp_stream_init_keys /src/libsrtp/srtp/srtp.c:965:5
    #2 0x4e86ea in srtp_stream_init_all_master_keys /src/libsrtp/srtp/srtp.c:867:18
    #3 0x4e86ea in srtp_stream_init /src/libsrtp/srtp/srtp.c:1309:11
    #4 0x4effd0 in srtp_add_stream /src/libsrtp/srtp/srtp.c:2877:14
    #5 0x4f04ea in srtp_create /src/libsrtp/srtp/srtp.c:2950:16
    #6 0x4d5c5c in LLVMFuzzerTestOneInput /src/libsrtp/fuzzer/fuzzer.c:828:9
    #7 0x4d990b in main (/out/srtp-fuzzer+0x4d990b)
    #8 0x70e3f4ff1082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)
    #9 0x41d56d in _start (/out/srtp-fuzzer+0x41d56d)

DEDUP_TOKEN: __asan_memcpy--srtp_stream_init_keys--srtp_stream_init_all_master_keys
0x602000000120 is located 0 bytes to the right of 16-byte region [0x602000000110,0x602000000120)
allocated by thread T0 here:
    #0 0x49c38d in __interceptor_malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:129:3
    #1 0x4d7c64 in fuzz_alloc /src/libsrtp/fuzzer/fuzzer.c:107:15
    #2 0x4d7c64 in fuzz_alloc_succeed /src/libsrtp/fuzzer/fuzzer.c:126:17
    #3 0x4d7c64 in extract_key /src/libsrtp/fuzzer/fuzzer.c:302:11
    #4 0x4d7c64 in extract_policy /src/libsrtp/fuzzer/fuzzer.c:451:23
    #5 0x4d590d in extract_policies /src/libsrtp/fuzzer/fuzzer.c:494:17
    #6 0x4d590d in LLVMFuzzerTestOneInput /src/libsrtp/fuzzer/fuzzer.c:819:25
    #7 0x4d990b in main (/out/srtp-fuzzer+0x4d990b)

DEDUP_TOKEN: __interceptor_malloc--fuzz_alloc--fuzz_alloc_succeed
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/llvm-project/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:22:3 in __asan_memcpy
Shadow bytes around the buggy address:
  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff8000: fa fa 00 00 fa fa 00 00 fa fa 00 00 fa fa 00 00
  0x0c047fff8010: fa fa 00 00 fa fa 00 00 fa fa 00 00 fa fa 00 07
=>0x0c047fff8020: fa fa 00 00[fa]fa 00 00 fa fa fa fa fa fa fa fa
  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8070: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING
