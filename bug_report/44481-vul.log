INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 2193590781
INFO: Loaded 1 modules   (393106 inline 8-bit counters): 393106 [0x36d0920, 0x37308b2), 
INFO: Loaded 1 PC tables (393106 PCs): 393106 [0x2cabd70,0x32ab690), 
/out/llvmfuzz: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000000258 at pc 0x000000f52c63 bp 0x7ffc809ce510 sp 0x7ffc809ce508
READ of size 8 at 0x602000000258 thread T0
SCARINESS: 23 (8-byte-read-heap-buffer-overflow)
    #0 0xf52c62 in dwg_free_HATCH_private /src/libredwg/src/./dwg.spec:4225:7
    #1 0xf121e6 in dwg_free_HATCH /src/libredwg/src/./dwg.spec:4066:1
    #2 0xfffc34 in dwg_free_object /src/libredwg/src/free.c:828:7
    #3 0x1000f10 in dwg_free /src/libredwg/src/free.c:1264:13
    #4 0x55449d in LLVMFuzzerTestOneInput /src/libredwg/examples/llvmfuzz.c
    #5 0x459fa1 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:599:15
    #6 0x443c62 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:323:6
    #7 0x449fb6 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:856:9
    #8 0x473fa2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #9 0x7a49168c683f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #10 0x41e628 in _start (/out/llvmfuzz+0x41e628)

DEDUP_TOKEN: dwg_free_HATCH_private--dwg_free_HATCH--dwg_free_object
0x602000000258 is located 0 bytes to the right of 8-byte region [0x602000000250,0x602000000258)
allocated by thread T0 here:
    #0 0x522be2 in calloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:154:3
    #1 0x2841128 in xcalloc /src/libredwg/src/in_dxf.c:216:7
    #2 0x28fe764 in add_HATCH /src/libredwg/src/in_dxf.c:3361:57
    #3 0x28711e1 in new_object /src/libredwg/src/in_dxf.c:10270:26
    #4 0x2855ab4 in dxf_entities_read /src/libredwg/src/in_dxf.c:12220:18
    #5 0x28473e2 in dwg_read_dxf /src/libredwg/src/in_dxf.c:12816:23
    #6 0x55413a in LLVMFuzzerTestOneInput /src/libredwg/examples/llvmfuzz.c:111:13
    #7 0x459fa1 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:599:15
    #8 0x443c62 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:323:6
    #9 0x449fb6 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:856:9
    #10 0x473fa2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #11 0x7a49168c683f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: calloc--xcalloc--add_HATCH
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/libredwg/src/./dwg.spec:4225:7 in dwg_free_HATCH_private
Shadow bytes around the buggy address:
  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff8000: fa fa 00 00 fa fa 00 fa fa fa 00 fa fa fa 00 fa
  0x0c047fff8010: fa fa 00 00 fa fa fd fd fa fa fd fd fa fa fd fd
  0x0c047fff8020: fa fa fd fa fa fa fd fd fa fa fd fd fa fa fd fd
  0x0c047fff8030: fa fa fd fa fa fa 06 fa fa fa fd fd fa fa fd fd
=>0x0c047fff8040: fa fa fd fd fa fa fd fd fa fa 00[fa]fa fa fd fd
  0x0c047fff8050: fa fa fd fa fa fa fd fd fa fa fd fd fa fa fa fa
  0x0c047fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8070: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8080: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8090: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING
