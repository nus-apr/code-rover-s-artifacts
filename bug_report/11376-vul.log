======================= INFO =========================
This binary is built for AFL-fuzz.
To run the target function on individual input(s) execute this:
  /out/radio-receive-done-fuzzer < INPUT_FILE
or
  /out/radio-receive-done-fuzzer INPUT_FILE1 [INPUT_FILE2 ... ]
To fuzz with afl-fuzz execute this:
  afl-fuzz [afl-flags] /out/radio-receive-done-fuzzer [-N]
afl-fuzz will run N iterations before re-spawning the process (default: 1000)
======================================================
Reading 13 bytes from /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000000042 at pc 0x000000571d3e bp 0x7ffeb8b9b6d0 sp 0x7ffeb8b9b6c8
READ of size 8 at 0x602000000042 thread T0
SCARINESS: 23 (8-byte-read-heap-buffer-overflow)
    #0 0x571d3d in ot::MeshForwarder::GetFramePriority(unsigned char*, unsigned char, ot::Mac::Address const&, ot::Mac::Address const&, unsigned char&) /src/openthread/src/core/thread/mesh_forwarder.cpp:1586:9
    #1 0x571069 in ot::MeshForwarder::HandleFragment(unsigned char*, unsigned char, ot::Mac::Address const&, ot::Mac::Address const&, otThreadLinkInfo const&) /src/openthread/src/core/thread/mesh_forwarder.cpp:1322:9
    #2 0x570cd5 in ot::MeshForwarder::HandleReceivedFrame(ot::Mac::Frame&) /src/openthread/src/core/thread/mesh_forwarder.cpp:1248:13
    #3 0x5453f8 in ot::Mac::Mac::HandleReceivedFrame(ot::Mac::Frame*, otError) /src/openthread/src/core/mac/mac.cpp:2028:34
    #4 0x530424 in LLVMFuzzerTestOneInput /src/openthread/tests/fuzz/radio_receive_done.cpp:70:5
    #5 0x64cbfa in ExecuteFilesOnyByOne(int, char**) /src/libfuzzer/afl/afl_driver.cpp:301:5
    #6 0x64d15e in main /src/libfuzzer/afl/afl_driver.cpp:339:12
    #7 0x7a59a997783f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #8 0x41ca48 in _start (/out/radio-receive-done-fuzzer+0x41ca48)

DEDUP_TOKEN: ot::MeshForwarder::GetFramePriority(unsigned char*, unsigned char, ot::Mac::Address const&, ot::Mac::Address const&, unsigned char&)--ot::MeshForwarder::HandleFragment(unsigned char*, unsigned char, ot::Mac::Address const&, ot::Mac::Address const&, otThreadLinkInfo const&)--ot::MeshForwarder::HandleReceivedFrame(ot::Mac::Frame&)
0x602000000042 is located 5 bytes to the right of 13-byte region [0x602000000030,0x60200000003d)
allocated by thread T0 here:
    #0 0x4eb79f in malloc /src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:146
    #1 0x530399 in LLVMFuzzerTestOneInput /src/openthread/tests/fuzz/radio_receive_done.cpp:61:34
    #2 0x64cbfa in ExecuteFilesOnyByOne(int, char**) /src/libfuzzer/afl/afl_driver.cpp:301:5
    #3 0x64d15e in main /src/libfuzzer/afl/afl_driver.cpp:339:12
    #4 0x7a59a997783f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: malloc--LLVMFuzzerTestOneInput--ExecuteFilesOnyByOne(int, char**)
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/openthread/src/core/thread/mesh_forwarder.cpp:1586:9 in ot::MeshForwarder::GetFramePriority(unsigned char*, unsigned char, ot::Mac::Address const&, ot::Mac::Address const&, unsigned char&)
Shadow bytes around the buggy address:
  0x0c047fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c047fff8000: fa fa 00 05 fa fa 00 05[fa]fa fa fa fa fa fa fa
  0x0c047fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING
