INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 2292680632
INFO: Loaded 1 modules   (21838 inline 8-bit counters): 21838 [0xa4a2d0, 0xa4f81e), 
INFO: Loaded 1 PC tables (21838 PCs): 21838 [0x77dee0,0x7d33c0), 
/out/hts_open_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000004c32 at pc 0x0000006bc1f3 bp 0x7ffc55c86e50 sp 0x7ffc55c86e48
READ of size 1 at 0x602000004c32 thread T0
SCARINESS: 12 (1-byte-read-heap-buffer-overflow)
    #0 0x6bc1f2 in rans_uncompress_to_4x16 /src/htslib/htscodecs/htscodecs/rANS_static4x16pr.c:1536:19
    #1 0x6c0145 in rans_uncompress_4x16 /src/htslib/htscodecs/htscodecs/rANS_static4x16pr.c:1805:12
    #2 0x67316f in cram_uncompress_block /src/htslib/cram/cram_io.c:1682:26
    #3 0x68522f in cram_read_SAM_hdr /src/htslib/cram/cram_io.c:4627:13
    #4 0x6881bc in cram_dopen /src/htslib/cram/cram_io.c:5153:28
    #5 0x57e40e in hts_hopen /src/htslib/hts.c:1173:23
    #6 0x557e6a in LLVMFuzzerTestOneInput /src/htslib/test/fuzz/hts_open_fuzzer.c:133:24
    #7 0x45b681 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:599:15
    #8 0x445342 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:323:6
    #9 0x44b696 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:856:9
    #10 0x475682 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #11 0x73455b6a383f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #12 0x41ff08 in _start (/out/hts_open_fuzzer+0x41ff08)

DEDUP_TOKEN: rans_uncompress_to_4x16--rans_uncompress_4x16--cram_uncompress_block
0x602000004c32 is located 0 bytes to the right of 2-byte region [0x602000004c30,0x602000004c32)
allocated by thread T0 here:
    #0 0x52414d in malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:145:3
    #1 0x670ca4 in cram_read_block /src/htslib/cram/cram_io.c:1445:25
    #2 0x68521e in cram_read_SAM_hdr /src/htslib/cram/cram_io.c:4623:19
    #3 0x6881bc in cram_dopen /src/htslib/cram/cram_io.c:5153:28
    #4 0x57e40e in hts_hopen /src/htslib/hts.c:1173:23
    #5 0x557e6a in LLVMFuzzerTestOneInput /src/htslib/test/fuzz/hts_open_fuzzer.c:133:24
    #6 0x45b681 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:599:15
    #7 0x445342 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:323:6
    #8 0x44b696 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:856:9
    #9 0x475682 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #10 0x73455b6a383f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: malloc--cram_read_block--cram_read_SAM_hdr
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/htslib/htscodecs/htscodecs/rANS_static4x16pr.c:1536:19 in rans_uncompress_to_4x16
Shadow bytes around the buggy address:
  0x0c047fff8930: fa fa fd fd fa fa fd fd fa fa fd fd fa fa fd fd
  0x0c047fff8940: fa fa fd fd fa fa fd fd fa fa fd fd fa fa fd fd
  0x0c047fff8950: fa fa fd fd fa fa fd fd fa fa fd fd fa fa 00 00
  0x0c047fff8960: fa fa 00 fa fa fa 00 fa fa fa 00 fa fa fa fd fa
  0x0c047fff8970: fa fa fd fa fa fa fd fa fa fa fd fa fa fa 00 00
=>0x0c047fff8980: fa fa 05 fa fa fa[02]fa fa fa fa fa fa fa fa fa
  0x0c047fff8990: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff89a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff89b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff89c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff89d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING
