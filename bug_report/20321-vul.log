======================= INFO =========================
This binary is built for AFL-fuzz.
To run the target function on individual input(s) execute this:
  /out/hb-subset-fuzzer < INPUT_FILE
or
  /out/hb-subset-fuzzer INPUT_FILE1 [INPUT_FILE2 ... ]
To fuzz with afl-fuzz execute this:
  afl-fuzz [afl-flags] /out/hb-subset-fuzzer [-N]
afl-fuzz will run N iterations before re-spawning the process (default: 1000)
======================================================
Reading 98811 bytes from /tmp/poc
=================================================================
==12==ERROR: AddressSanitizer: global-buffer-overflow on address 0x0000009190c0 at pc 0x0000004fc39a bp 0x7ffcecef60f0 sp 0x7ffcecef60e8
READ of size 1 at 0x0000009190c0 thread T0
SCARINESS: 12 (1-byte-read-global-buffer-overflow)
    #0 0x4fc399 in hb_array_t<OT::IntType<unsigned char, 1u> const> hb_array_t<OT::IntType<unsigned char, 1u> const>::copy<hb_serialize_context_t>(hb_serialize_context_t*) const /src/harfbuzz/src/./hb-array.hh:220:14
    #1 0x4fbee0 in OT::UnsizedArrayOf<OT::IntType<unsigned char, 1u> >::copy(hb_serialize_context_t*, unsigned int) const /src/harfbuzz/src/./hb-open-type.hh:463:9
    #2 0x51034e in OT::SBIXGlyph::copy(hb_serialize_context_t*, unsigned int) const /src/harfbuzz/src/./hb-ot-color-sbix-table.hh:53:10
    #3 0x50f858 in OT::SBIXStrike::subset(hb_subset_context_t*, unsigned int) const /src/harfbuzz/src/./hb-ot-color-sbix-table.hh:165:44
    #4 0x50e63a in OT::sbix::add_strike(hb_subset_context_t*, void const*, unsigned int, unsigned int) const /src/harfbuzz/src/./hb-ot-color-sbix-table.hh:344:30
    #5 0x50d723 in OT::sbix::serialize_strike_offsets(hb_subset_context_t*, void const*, unsigned int) const /src/harfbuzz/src/./hb-ot-color-sbix-table.hh:366:18
    #6 0x50b5eb in OT::sbix::subset(hb_subset_context_t*) const /src/harfbuzz/src/./hb-ot-color-sbix-table.hh:397:5
    #7 0x4d1df6 in bool _subset2<OT::sbix const>(hb_subset_plan_t*) /src/harfbuzz/src/hb-subset.cc:95:26
    #8 0x4ceb15 in hb_subset /src/harfbuzz/src/hb-subset.cc:316:28
    #9 0x4c97b6 in trySubset(hb_face_t*, unsigned int const*, int, bool, bool, bool) /src/harfbuzz/./test/fuzzing/hb-subset-fuzzer.cc:35:23
    #10 0x4c9405 in LLVMFuzzerTestOneInput /src/harfbuzz/./test/fuzzing/hb-subset-fuzzer.cc:85:3
    #11 0x4c9d8e in ExecuteFilesOnyByOne /src/libfuzzer/afl/afl_driver.cpp:216:5
    #12 0x4c9d8e in main /src/libfuzzer/afl/afl_driver.cpp:253:12
    #13 0x73f097f0883f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #14 0x41df48 in _start (/out/hb-subset-fuzzer+0x41df48)

DEDUP_TOKEN: hb_array_t<OT::IntType<unsigned char, 1u> const> hb_array_t<OT::IntType<unsigned char, 1u> const>::copy<hb_serialize_context_t>(hb_serialize_context_t*) const--OT::UnsizedArrayOf<OT::IntType<unsigned char, 1u> >::copy(hb_serialize_context_t*, unsigned int) const--OT::SBIXGlyph::copy(hb_serialize_context_t*, unsigned int) const
0x0000009190c0 is located 0 bytes to the right of global variable '_hb_NullPool' defined in './hb-static.cc:42:16' (0x918f40) of size 384
SUMMARY: AddressSanitizer: global-buffer-overflow /src/harfbuzz/src/./hb-array.hh:220:14 in hb_array_t<OT::IntType<unsigned char, 1u> const> hb_array_t<OT::IntType<unsigned char, 1u> const>::copy<hb_serialize_context_t>(hb_serialize_context_t*) const
Shadow bytes around the buggy address:
  0x00008011b1c0: 00 00 00 00 00 00 00 00 00 f9 f9 f9 f9 f9 f9 f9
  0x00008011b1d0: f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
  0x00008011b1e0: f9 f9 f9 f9 f9 f9 f9 f9 00 00 00 00 00 00 00 00
  0x00008011b1f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x00008011b200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x00008011b210: 00 00 00 00 00 00 00 00[f9]f9 f9 f9 f9 f9 f9 f9
  0x00008011b220: f9 f9 f9 f9 02 f9 f9 f9 f9 f9 f9 f9 06 f9 f9 f9
  0x00008011b230: f9 f9 f9 f9 06 f9 f9 f9 f9 f9 f9 f9 00 04 f9 f9
  0x00008011b240: f9 f9 f9 f9 04 f9 f9 f9 f9 f9 f9 f9 02 f9 f9 f9
  0x00008011b250: f9 f9 f9 f9 00 00 00 00 00 00 00 00 00 00 00 00
  0x00008011b260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==12==ABORTING
