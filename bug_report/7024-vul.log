======================= INFO =========================
This binary is built for AFL-fuzz.
To run the target function on individual input(s) execute this:
  /out/fuzzshark_ip < INPUT_FILE
or
  /out/fuzzshark_ip INPUT_FILE1 [INPUT_FILE2 ... ]
To fuzz with afl-fuzz execute this:
  afl-fuzz [afl-flags] /out/fuzzshark_ip [-N]
afl-fuzz will run N iterations before re-spawning the process (default: 1000)
======================================================
oss-fuzzshark: disabling: udp
oss-fuzzshark: disabling: udplite
oss-fuzzshark: disabling: ospf
oss-fuzzshark: disabling: bgp
oss-fuzzshark: disabling: bootp
oss-fuzzshark: disabling: json
oss-fuzzshark: disabling: snort
oss-fuzzshark: configured for dissector: ip
Reading 45 bytes from /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x786eaf315ac0 at pc 0x000000fb049f bp 0x7ffc44224530 sp 0x7ffc44224528
READ of size 2 at 0x786eaf315ac0 thread T0
SCARINESS: 39 (2-byte-read-stack-buffer-overflow-far-from-bounds)
    #0 0xfb049e in dissect_ieee80211_common /src/wireshark/epan/dissectors/packet-ieee80211.c:20412:35
    #1 0xf99b0d in dissect_ieee80211 /src/wireshark/epan/dissectors/packet-ieee80211.c:21931:10
    #2 0x5569ea in call_dissector_through_handle /src/wireshark/epan/packet.c:694:9
    #3 0x54f2c5 in call_dissector_work /src/wireshark/epan/packet.c:779:9
    #4 0x54ef53 in dissector_try_uint_new /src/wireshark/epan/packet.c:1361:8
    #5 0xdbed8f in dissect_gre /src/wireshark/epan/dissectors/packet-gre.c:501:14
    #6 0x5569ea in call_dissector_through_handle /src/wireshark/epan/packet.c:694:9
    #7 0x54f2c5 in call_dissector_work /src/wireshark/epan/packet.c:779:9
    #8 0x54ef53 in dissector_try_uint_new /src/wireshark/epan/packet.c:1361:8
    #9 0x10163c5 in ip_try_dissect /src/wireshark/epan/dissectors/packet-ip.c:1831:7
    #10 0x104b620 in ipv6_dissect_next /src/wireshark/epan/dissectors/packet-ipv6.c:2455:9
    #11 0x104c7c4 in dissect_ipv6 /src/wireshark/epan/dissectors/packet-ipv6.c:2403:5
    #12 0x5569ea in call_dissector_through_handle /src/wireshark/epan/packet.c:694:9
    #13 0x54f2c5 in call_dissector_work /src/wireshark/epan/packet.c:779:9
    #14 0x54caca in call_dissector_with_data /src/wireshark/epan/packet.c:3105:8
    #15 0x1016ae7 in dissect_ip /src/wireshark/epan/dissectors/packet-ip.c:2315:5
    #16 0x5569ea in call_dissector_through_handle /src/wireshark/epan/packet.c:694:9
    #17 0x54f2c5 in call_dissector_work /src/wireshark/epan/packet.c:779:9
    #18 0x5557e4 in call_all_postdissectors /src/wireshark/epan/packet.c:3467:3
    #19 0xd6f6ae in dissect_frame /src/wireshark/epan/dissectors/packet-frame.c:681:5
    #20 0x5569ea in call_dissector_through_handle /src/wireshark/epan/packet.c:694:9
    #21 0x54f2c5 in call_dissector_work /src/wireshark/epan/packet.c:779:9
    #22 0x54caca in call_dissector_with_data /src/wireshark/epan/packet.c:3105:8
    #23 0x54c2d3 in dissect_record /src/wireshark/epan/packet.c:568:3
    #24 0x541ad5 in epan_dissect_run /src/wireshark/epan/epan.c:537:2
    #25 0x52678c in LLVMFuzzerTestOneInput /src/wireshark/tools/oss-fuzzshark/fuzzshark.c:359:2
    #26 0x5276ef in ExecuteFilesOnyByOne(int, char**) /src/libfuzzer/afl/afl_driver.cpp:279:5
    #27 0x527c8f in main /src/libfuzzer/afl/afl_driver.cpp:316:12
    #28 0x786eb2cab83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #29 0x41ea68 in _start (/out/fuzzshark_ip+0x41ea68)

DEDUP_TOKEN: dissect_ieee80211_common--dissect_ieee80211--call_dissector_through_handle
Address 0x786eaf315ac0 is located in stack of thread T0 at offset 64 in frame
    #0 0xdbe3af in dissect_gre /src/wireshark/epan/dissectors/packet-gre.c:317

DEDUP_TOKEN: dissect_gre
  This frame has 2 object(s):
    [32, 34) 'flags_and_ver' (line 320)
    [48, 64) 'cksum_vec' (line 404) <== Memory access at offset 64 overflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /src/wireshark/epan/dissectors/packet-ieee80211.c:20412:35 in dissect_ieee80211_common
Shadow bytes around the buggy address:
  0x0f0e55e5ab00: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0f0e55e5ab10: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0f0e55e5ab20: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0f0e55e5ab30: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0f0e55e5ab40: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
=>0x0f0e55e5ab50: f1 f1 f1 f1 02 f2 f8 f8[f3]f3 f3 f3 00 00 00 00
  0x0f0e55e5ab60: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0f0e55e5ab70: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0f0e55e5ab80: f1 f1 f1 f1 00 00 00 00 00 00 00 00 f3 f3 f3 f3
  0x0f0e55e5ab90: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0f0e55e5aba0: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING
