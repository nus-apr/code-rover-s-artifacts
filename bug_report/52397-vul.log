=================================================================
==13==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fba191ee258 at pc 0x0000005e4aea bp 0x7ffe7f7935f0 sp 0x7ffe7f7935e8
READ of size 1 at 0x7fba191ee258 thread T0
SCARINESS: 27 (1-byte-read-stack-buffer-overflow)
    #0 0x5e4ae9 in AffixMgr::suffix_check(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, int, int, PfxEntry*, unsigned short, unsigned short, char) /src/hunspell/src/hunspell/affixmgr.cxx:2786:22
    #1 0x5e5908 in AffixMgr::affix_check(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, int, unsigned short, char) /src/hunspell/src/hunspell/affixmgr.cxx:3133:8
    #2 0x5dcf44 in AffixMgr::compound_check(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, short, short, short, short, hentry**, hentry**, char, char, int*) /src/hunspell/src/hunspell/affixmgr.cxx:2130:29
    #3 0x5dbf92 in AffixMgr::compound_check(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, short, short, short, short, hentry**, hentry**, char, char, int*) /src/hunspell/src/hunspell/affixmgr.cxx:2091:20
    #4 0x5dbf92 in AffixMgr::compound_check(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, short, short, short, short, hentry**, hentry**, char, char, int*) /src/hunspell/src/hunspell/affixmgr.cxx:2091:20
    #5 0x5dbf92 in AffixMgr::compound_check(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, short, short, short, short, hentry**, hentry**, char, char, int*) /src/hunspell/src/hunspell/affixmgr.cxx:2091:20
    #6 0x4ecfb0 in HunspellImpl::checkword(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*) /src/hunspell/src/hunspell/hunspell.cxx:852:19
    #7 0x4efba7 in HunspellImpl::spell_internal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*) /src/hunspell/src/hunspell/hunspell.cxx:520:12
    #8 0x4ee561 in HunspellImpl::spell(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*) /src/hunspell/src/hunspell/hunspell.cxx:431:12
    #9 0x52b29b in Hunspell::spell(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*) /src/hunspell/src/hunspell/hunspell.cxx:2039:18
    #10 0x4dfb70 in LLVMFuzzerTestOneInput /src/hunspell/./src/tools/affdicfuzzer.cxx:65:15
    #11 0x4de59a in ExecuteFilesOnyByOne /src/aflplusplus/utils/aflpp_driver/aflpp_driver.c:234:7
    #12 0x4de36c in main /src/aflplusplus/utils/aflpp_driver/aflpp_driver.c:318:12
    #13 0x7fba192a5082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 87b331c034a6458c64ce09c03939e947212e18ce)
    #14 0x41f71d in _start (/out/affdicfuzzer+0x41f71d)

DEDUP_TOKEN: AffixMgr::suffix_check(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, int, int, PfxEntry*, unsigned short, unsigned short, char)--AffixMgr::affix_check(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, int, unsigned short, char)--AffixMgr::compound_check(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, short, short, short, short, hentry**, hentry**, char, char, int*)
Address 0x7fba191ee258 is located in stack of thread T0 at offset 600 in frame
    #0 0x5ceb0f in AffixMgr::compound_check(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, short, short, short, short, hentry**, hentry**, char, char, int*) /src/hunspell/src/hunspell/affixmgr.cxx:1581

DEDUP_TOKEN: AffixMgr::compound_check(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, short, short, short, short, hentry**, hentry**, char, char, int*)
  This frame has 10 object(s):
    [32, 40) 'words.addr'
    [64, 88) 'st' (line 1585)
    [128, 152) 'ref.tmp' (line 1658)
    [192, 216) 'ref.tmp957' (line 1855)
    [256, 280) 'ref.tmp973' (line 1858)
    [320, 344) 'ref.tmp1304' (line 1935)
    [384, 408) 'ref.tmp1622' (line 2026)
    [448, 472) 'tmp' (line 2031)
    [512, 536) 'ref.tmp1667' (line 2040)
    [576, 600) 'ref.tmp1799' (line 2091) <== Memory access at offset 600 overflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /src/hunspell/src/hunspell/affixmgr.cxx:2786:22 in AffixMgr::suffix_check(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, int, int, PfxEntry*, unsigned short, unsigned short, char)
Shadow bytes around the buggy address:
  0x0ff7c3235bf0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0ff7c3235c00: f1 f1 f1 f1 00 f2 f2 f2 00 00 00 f2 f2 f2 f2 f2
  0x0ff7c3235c10: f8 f8 f8 f2 f2 f2 f2 f2 f8 f8 f8 f2 f2 f2 f2 f2
  0x0ff7c3235c20: f8 f8 f8 f2 f2 f2 f2 f2 f8 f8 f8 f2 f2 f2 f2 f2
  0x0ff7c3235c30: f8 f8 f8 f2 f2 f2 f2 f2 f8 f8 f8 f2 f2 f2 f2 f2
=>0x0ff7c3235c40: f8 f8 f8 f2 f2 f2 f2 f2 00 00 00[f3]f3 f3 f3 f3
  0x0ff7c3235c50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0ff7c3235c60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0ff7c3235c70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0ff7c3235c80: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0ff7c3235c90: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING
