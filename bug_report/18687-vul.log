======================= INFO =========================
This binary is built for AFL-fuzz.
To run the target function on individual input(s) execute this:
  /out/fuzz_disassemble < INPUT_FILE
or
  /out/fuzz_disassemble INPUT_FILE1 [INPUT_FILE2 ... ]
To fuzz with afl-fuzz execute this:
  afl-fuzz [afl-flags] /out/fuzz_disassemble [-N]
afl-fuzz will run N iterations before re-spawning the process (default: 1000)
======================================================
Reading 21 bytes from /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: global-buffer-overflow on address 0x000001dbdff8 at pc 0x000000679878 bp 0x7ffed5fa8af0 sp 0x7ffed5fa8ae8
READ of size 8 at 0x000001dbdff8 thread T0
SCARINESS: 33 (8-byte-read-global-buffer-overflow-far-from-bounds)
    #0 0x679877 in disassemble /src/binutils-gdb/opcodes/v850-dis.c:437:45
    #1 0x677f99 in print_insn_v850 /src/binutils-gdb/opcodes/v850-dis.c:770:11
    #2 0x4c907b in LLVMFuzzerTestOneInput /src/binutils-gdb/fuzz/fuzz_disassemble.c:71:13
    #3 0x4c98fe in ExecuteFilesOnyByOne /src/libfuzzer/afl/afl_driver.cpp:216:5
    #4 0x4c98fe in main /src/libfuzzer/afl/afl_driver.cpp:253:12
    #5 0x7334de82183f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #6 0x41e478 in _start (/out/fuzz_disassemble+0x41e478)

DEDUP_TOKEN: disassemble--print_insn_v850--LLVMFuzzerTestOneInput
0x000001dbdff8 is located 40 bytes to the left of global variable '<string literal>' defined in 'v850-dis.c:58:45' (0x1dbe020) of size 7
  '<string literal>' is ascii string 'lt/nlt'
0x000001dbdff8 is located 17 bytes to the right of global variable '<string literal>' defined in 'v850-dis.c:58:35' (0x1dbdfe0) of size 7
  '<string literal>' is ascii string 'ngl/gl'
SUMMARY: AddressSanitizer: global-buffer-overflow /src/binutils-gdb/opcodes/v850-dis.c:437:45 in disassemble
Shadow bytes around the buggy address:
  0x0000803afba0: f9 f9 f9 f9 04 f9 f9 f9 f9 f9 f9 f9 06 f9 f9 f9
  0x0000803afbb0: f9 f9 f9 f9 07 f9 f9 f9 f9 f9 f9 f9 00 f9 f9 f9
  0x0000803afbc0: f9 f9 f9 f9 00 f9 f9 f9 f9 f9 f9 f9 00 f9 f9 f9
  0x0000803afbd0: f9 f9 f9 f9 00 f9 f9 f9 f9 f9 f9 f9 00 f9 f9 f9
  0x0000803afbe0: f9 f9 f9 f9 06 f9 f9 f9 f9 f9 f9 f9 00 01 f9 f9
=>0x0000803afbf0: f9 f9 f9 f9 00 f9 f9 f9 f9 f9 f9 f9 07 f9 f9[f9]
  0x0000803afc00: f9 f9 f9 f9 07 f9 f9 f9 f9 f9 f9 f9 07 f9 f9 f9
  0x0000803afc10: f9 f9 f9 f9 07 f9 f9 f9 f9 f9 f9 f9 07 f9 f9 f9
  0x0000803afc20: f9 f9 f9 f9 06 f9 f9 f9 f9 f9 f9 f9 06 f9 f9 f9
  0x0000803afc30: f9 f9 f9 f9 06 f9 f9 f9 f9 f9 f9 f9 06 f9 f9 f9
  0x0000803afc40: f9 f9 f9 f9 06 f9 f9 f9 f9 f9 f9 f9 06 f9 f9 f9
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING
