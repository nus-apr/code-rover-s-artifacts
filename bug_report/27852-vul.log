INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 2278418557
INFO: Loaded 1 modules   (10158 inline 8-bit counters): 10158 [0xa0c400, 0xa0ebae), 
INFO: Loaded 1 PC tables (10158 PCs): 10158 [0xa0ebb0,0xa36690), 
/out/libjpeg_turbo_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==12==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6310000249a0 at pc 0x0000006dd050 bp 0x7fffe3fe6a60 sp 0x7fffe3fe6a58
READ of size 2 at 0x6310000249a0 thread T0
SCARINESS: 24 (2-byte-read-heap-buffer-overflow-far-from-bounds)
    #0 0x6dd04f in decompress_smooth_data /src/libjpeg-turbo/jdcoefct.c:595:23
    #1 0x7061e3 in process_data_context_main /src/libjpeg-turbo/jdmainct.c:338:10
    #2 0x60b1b5 in jpeg_read_scanlines /src/libjpeg-turbo/jdapistd.c:287:3
    #3 0x5643ee in tjDecompress2 /src/libjpeg-turbo/turbojpeg.c:1307:5
    #4 0x555110 in LLVMFuzzerTestOneInput /src/libjpeg_turbo_fuzzer.cc:44:5
    #5 0x459b01 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:599:15
    #6 0x443882 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:323:6
    #7 0x449bc5 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:856:9
    #8 0x473ae2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #9 0x79f44a2f383f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #10 0x41e898 in _start (/out/libjpeg_turbo_fuzzer+0x41e898)

DEDUP_TOKEN: decompress_smooth_data--process_data_context_main--jpeg_read_scanlines
0x6310000249a0 is located 105 bytes to the right of 65847-byte region [0x631000014800,0x631000024937)
allocated by thread T0 here:
    #0 0x52222d in malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:145:3
    #1 0x65c9f6 in alloc_large /src/libjpeg-turbo/jmemmgr.c:391:29
    #2 0x65c9f6 in alloc_barray /src/libjpeg-turbo/jmemmgr.c:527:28
    #3 0x65c9f6 in realize_virt_arrays /src/libjpeg-turbo/jmemmgr.c:741:26
    #4 0x62895f in master_selection /src/libjpeg-turbo/jdmaster.c:561:3
    #5 0x62895f in jinit_master_decompress /src/libjpeg-turbo/jdmaster.c:725:3
    #6 0x6095ce in jpeg_start_decompress /src/libjpeg-turbo/jdapistd.c:49:5
    #7 0x563f4c in tjDecompress2 /src/libjpeg-turbo/turbojpeg.c:1290:3
    #8 0x555110 in LLVMFuzzerTestOneInput /src/libjpeg_turbo_fuzzer.cc:44:5
    #9 0x459b01 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:599:15
    #10 0x443882 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:323:6
    #11 0x449bc5 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:856:9
    #12 0x473ae2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #13 0x79f44a2f383f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: malloc--alloc_large--alloc_barray
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/libjpeg-turbo/jdcoefct.c:595:23 in decompress_smooth_data
Shadow bytes around the buggy address:
  0x0c627fffc8e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c627fffc8f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c627fffc900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c627fffc910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c627fffc920: 00 00 00 00 00 00 07 fa fa fa fa fa fa fa fa fa
=>0x0c627fffc930: fa fa fa fa[fa]fa fa fa fa fa fa fa fa fa fa fa
  0x0c627fffc940: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c627fffc950: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c627fffc960: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c627fffc970: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c627fffc980: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==12==ABORTING
