Accepting input from '/tmp/poc'
Usage for fuzzing: honggfuzz -P [flags] -- /out/draco_pc_decoder_without_dequantization_fuzzer
=================================================================
==13==ERROR: AddressSanitizer: heap-use-after-free on address 0x604000000070 at pc 0x0000006ab73b bp 0x7ffe3e810c70 sp 0x7ffe3e810c68
READ of size 8 at 0x604000000070 thread T0
SCARINESS: 51 (8-byte-read-heap-use-after-free)
    #0 0x6ab73a in __root /usr/local/bin/../include/c++/v1/__tree:1085:59
    #1 0x6ab73a in find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > /usr/local/bin/../include/c++/v1/__tree:2566:39
    #2 0x6ab73a in find /usr/local/bin/../include/c++/v1/map:1380:68
    #3 0x6ab73a in draco::Metadata::AddSubMetadata(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::unique_ptr<draco::Metadata, std::__1::default_delete<draco::Metadata> >) /src/draco/src/draco/metadata/metadata.cc:108:33
    #4 0x567c8e in draco::MetadataDecoder::DecodeMetadata(draco::Metadata*) /src/draco/src/draco/metadata/metadata_decoder.cc:81:27
    #5 0x5689b3 in draco::MetadataDecoder::DecodeGeometryMetadata(draco::DecoderBuffer*, draco::GeometryMetadata*) /src/draco/src/draco/metadata/metadata_decoder.cc:53:10
    #6 0x549033 in draco::PointCloudDecoder::DecodeMetadata() /src/draco/src/draco/compression/point_cloud/point_cloud_decoder.cc:59:25
    #7 0x549f19 in draco::PointCloudDecoder::Decode(draco::DracoOptions<draco::GeometryAttribute::Type> const&, draco::DecoderBuffer*, draco::PointCloud*) /src/draco/src/draco/compression/point_cloud/point_cloud_decoder.cc:104:5
    #8 0x4db652 in draco::MeshDecoder::Decode(draco::DracoOptions<draco::GeometryAttribute::Type> const&, draco::DecoderBuffer*, draco::Mesh*) /src/draco/src/draco/compression/mesh/mesh_decoder.cc:24:29
    #9 0x4d72ce in draco::Decoder::DecodeBufferToGeometry(draco::DecoderBuffer*, draco::Mesh*) /src/draco/src/draco/compression/decode.cc:121:3
    #10 0x4d554b in draco::Decoder::DecodePointCloudFromBuffer(draco::DecoderBuffer*) /src/draco/src/draco/compression/decode.cc:76:5
    #11 0x4d277d in LLVMFuzzerTestOneInput /src/draco/src/draco/tools/fuzz/draco_pc_decoder_without_dequantization_fuzzer.cc:27:11
    #12 0x4c8f6b in main (/out/draco_pc_decoder_without_dequantization_fuzzer+0x4c8f6b)
    #13 0x7f86163c883f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #14 0x41e278 in _start (/out/draco_pc_decoder_without_dequantization_fuzzer+0x41e278)

DEDUP_TOKEN: __root--find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >--find
0x604000000070 is located 32 bytes inside of 48-byte region [0x604000000050,0x604000000080)
freed by thread T0 here:
    #0 0x4c68fd in operator delete(void*) /src/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:160:3
    #1 0x567d0e in operator() /usr/local/bin/../include/c++/v1/memory:2262:5
    #2 0x567d0e in reset /usr/local/bin/../include/c++/v1/memory:2517:7
    #3 0x567d0e in ~unique_ptr /usr/local/bin/../include/c++/v1/memory:2471:19
    #4 0x567d0e in draco::MetadataDecoder::DecodeMetadata(draco::Metadata*) /src/draco/src/draco/metadata/metadata_decoder.cc:81:7
    #5 0x5689b3 in draco::MetadataDecoder::DecodeGeometryMetadata(draco::DecoderBuffer*, draco::GeometryMetadata*) /src/draco/src/draco/metadata/metadata_decoder.cc:53:10
    #6 0x549033 in draco::PointCloudDecoder::DecodeMetadata() /src/draco/src/draco/compression/point_cloud/point_cloud_decoder.cc:59:25
    #7 0x549f19 in draco::PointCloudDecoder::Decode(draco::DracoOptions<draco::GeometryAttribute::Type> const&, draco::DecoderBuffer*, draco::PointCloud*) /src/draco/src/draco/compression/point_cloud/point_cloud_decoder.cc:104:5
    #8 0x4db652 in draco::MeshDecoder::Decode(draco::DracoOptions<draco::GeometryAttribute::Type> const&, draco::DecoderBuffer*, draco::Mesh*) /src/draco/src/draco/compression/mesh/mesh_decoder.cc:24:29
    #9 0x4d72ce in draco::Decoder::DecodeBufferToGeometry(draco::DecoderBuffer*, draco::Mesh*) /src/draco/src/draco/compression/decode.cc:121:3
    #10 0x4d554b in draco::Decoder::DecodePointCloudFromBuffer(draco::DecoderBuffer*) /src/draco/src/draco/compression/decode.cc:76:5
    #11 0x4d277d in LLVMFuzzerTestOneInput /src/draco/src/draco/tools/fuzz/draco_pc_decoder_without_dequantization_fuzzer.cc:27:11
    #12 0x4c8f6b in main (/out/draco_pc_decoder_without_dequantization_fuzzer+0x4c8f6b)

DEDUP_TOKEN: operator delete(void*)--operator()--reset
previously allocated by thread T0 here:
    #0 0x4c609d in operator new(unsigned long) /src/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:99:3
    #1 0x567bfd in draco::MetadataDecoder::DecodeMetadata(draco::Metadata*) /src/draco/src/draco/metadata/metadata_decoder.cc:79:37
    #2 0x5689b3 in draco::MetadataDecoder::DecodeGeometryMetadata(draco::DecoderBuffer*, draco::GeometryMetadata*) /src/draco/src/draco/metadata/metadata_decoder.cc:53:10
    #3 0x549033 in draco::PointCloudDecoder::DecodeMetadata() /src/draco/src/draco/compression/point_cloud/point_cloud_decoder.cc:59:25
    #4 0x549f19 in draco::PointCloudDecoder::Decode(draco::DracoOptions<draco::GeometryAttribute::Type> const&, draco::DecoderBuffer*, draco::PointCloud*) /src/draco/src/draco/compression/point_cloud/point_cloud_decoder.cc:104:5
    #5 0x4db652 in draco::MeshDecoder::Decode(draco::DracoOptions<draco::GeometryAttribute::Type> const&, draco::DecoderBuffer*, draco::Mesh*) /src/draco/src/draco/compression/mesh/mesh_decoder.cc:24:29
    #6 0x4d72ce in draco::Decoder::DecodeBufferToGeometry(draco::DecoderBuffer*, draco::Mesh*) /src/draco/src/draco/compression/decode.cc:121:3
    #7 0x4d554b in draco::Decoder::DecodePointCloudFromBuffer(draco::DecoderBuffer*) /src/draco/src/draco/compression/decode.cc:76:5
    #8 0x4d277d in LLVMFuzzerTestOneInput /src/draco/src/draco/tools/fuzz/draco_pc_decoder_without_dequantization_fuzzer.cc:27:11
    #9 0x4c8f6b in main (/out/draco_pc_decoder_without_dequantization_fuzzer+0x4c8f6b)

DEDUP_TOKEN: operator new(unsigned long)--draco::MetadataDecoder::DecodeMetadata(draco::Metadata*)--draco::MetadataDecoder::DecodeGeometryMetadata(draco::DecoderBuffer*, draco::GeometryMetadata*)
SUMMARY: AddressSanitizer: heap-use-after-free /usr/local/bin/../include/c++/v1/__tree:1085:59 in __root
Shadow bytes around the buggy address:
  0x0c087fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c087fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c087fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c087fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c087fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c087fff8000: fa fa 00 00 00 00 00 00 fa fa fd fd fd fd[fd]fd
  0x0c087fff8010: fa fa 00 00 00 00 00 00 fa fa fa fa fa fa fa fa
  0x0c087fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c087fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c087fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c087fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING
