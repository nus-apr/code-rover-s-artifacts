INFO: found LLVMFuzzerCustomMutator (0xb391b0). Disabling -len_control by default.
INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 2313184987
INFO: Loaded 1 modules   (158406 inline 8-bit counters): 158406 [0x1b5a150, 0x1b80c16), 
INFO: Loaded 1 PC tables (158406 PCs): 158406 [0x1b80c18,0x1deb878), 
/out/cryptofuzz-relic: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x61d0000012f0 at pc 0x000000c6a4d3 bp 0x7ffd7d407a50 sp 0x7ffd7d407a48
READ of size 8 at 0x61d0000012f0 thread T0
SCARINESS: 23 (8-byte-read-heap-buffer-overflow)
    #0 0xc6a4d2 in dv_rshd /src/relic/src/dv/relic_dv_util.c:130:10
    #1 0xc528f8 in bn_rsh /src/relic/src/bn/relic_bn_shift.c:108:3
    #2 0xc04bb4 in cryptofuzz::module::relic_bignum::RShift::Run(fuzzing::datasource::Datasource&, cryptofuzz::module::relic_bignum::Bignum&, std::__1::vector<cryptofuzz::module::relic_bignum::Bignum, std::__1::allocator<cryptofuzz::module::relic_bignum::Bignum> >&) const /src/cryptofuzz/modules/relic/bn_ops.cpp:633:17
    #3 0xbf1cbd in cryptofuzz::module::relic::OpBignumCalc(cryptofuzz::operation::BignumCalc&) /src/cryptofuzz/modules/relic/module.cpp:839:5
    #4 0x89cb50 in cryptofuzz::ExecutorBignumCalc::callModule(std::__1::shared_ptr<cryptofuzz::Module>, cryptofuzz::operation::BignumCalc&) const /src/cryptofuzz/executor.cpp:974:20
    #5 0x72563c in cryptofuzz::ExecutorBase<cryptofuzz::Bignum, cryptofuzz::operation::BignumCalc>::Run(fuzzing::datasource::Datasource&, unsigned char const*, unsigned long) const /src/cryptofuzz/executor.cpp:2369:47
    #6 0x5aa8c0 in cryptofuzz::Driver::Run(unsigned char const*, unsigned long) const /src/cryptofuzz/driver.cpp
    #7 0x9b96ac in LLVMFuzzerTestOneInput /src/cryptofuzz/entry.cpp:795:13
    #8 0x478d23 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
    #9 0x464482 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
    #10 0x469d2c in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9
    #11 0x493262 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #12 0x7f568ee57082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 87b331c034a6458c64ce09c03939e947212e18ce)
    #13 0x45a64d in _start (/out/cryptofuzz-relic+0x45a64d)

DEDUP_TOKEN: dv_rshd--bn_rsh--cryptofuzz::module::relic_bignum::RShift::Run(fuzzing::datasource::Datasource&, cryptofuzz::module::relic_bignum::Bignum&, std::__1::vector<cryptofuzz::module::relic_bignum::Bignum, std::__1::allocator<cryptofuzz::module::relic_bignum::Bignum> >&) const
0x61d0000012f0 is located 0 bytes to the right of 2160-byte region [0x61d000000a80,0x61d0000012f0)
allocated by thread T0 here:
    #0 0x5a4cfd in operator new(unsigned long) /src/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:95:3
    #1 0x138d629 in std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::basic_string(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) (/out/cryptofuzz-relic+0x138d629)
    #2 0x5b517f in std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::vector(std::initializer_list<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >) /usr/local/bin/../include/c++/v1/vector:1237:9
    #3 0x4501e2 in __cxx_global_var_init /src/cryptofuzz/numbers.cpp:5:36
    #4 0x4504ae in _GLOBAL__sub_I_numbers.cpp /src/cryptofuzz/numbers.cpp
    #5 0x13f67ac in __libc_csu_init (/out/cryptofuzz-relic+0x13f67ac)

DEDUP_TOKEN: operator new(unsigned long)--std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::basic_string(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)--std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::vector(std::initializer_list<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >)
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/relic/src/dv/relic_dv_util.c:130:10 in dv_rshd
Shadow bytes around the buggy address:
  0x0c3a7fff8200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c3a7fff8210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c3a7fff8220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c3a7fff8230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c3a7fff8240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0c3a7fff8250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00[fa]fa
  0x0c3a7fff8260: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c3a7fff8270: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c3a7fff8280: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c3a7fff8290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c3a7fff82a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING
