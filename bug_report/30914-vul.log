INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 2260656931
INFO: Loaded 1 modules   (5430 inline 8-bit counters): 5430 [0x893068, 0x89459e), 
INFO: Loaded 1 PC tables (5430 PCs): 5430 [0x8945a0,0x8a9900), 
/out/FuzzRSAKeyParsing: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
we were offered 18 bytes of input
Not a sequence: 34
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x603000000172 at pc 0x000000576c9c bp 0x7ffff8616b30 sp 0x7ffff8616b28
READ of size 1 at 0x603000000172 thread T0
SCARINESS: 12 (1-byte-read-heap-buffer-overflow)
    #0 0x576c9b in void AK::__format_value<unsigned char>(AK::TypeErasedFormatParams&, AK::FormatBuilder&, AK::FormatParser&, void const*) /src/serenity/Meta/Lagom/build/../../../AK/Format.h:373:31
    #1 0x589a60 in AK::(anonymous namespace)::vformat_impl(AK::TypeErasedFormatParams&, AK::FormatBuilder&, AK::FormatParser&) /src/serenity/AK/Format.cpp:93:5
    #2 0x589a76 in AK::(anonymous namespace)::vformat_impl(AK::TypeErasedFormatParams&, AK::FormatBuilder&, AK::FormatParser&) /src/serenity/AK/Format.cpp:95:5
    #3 0x5895ac in AK::vformat(AK::StringBuilder&, AK::StringView, AK::TypeErasedFormatParams) /src/serenity/AK/Format.cpp:417:5
    #4 0x58d50e in AK::vdbgln(AK::StringView, AK::TypeErasedFormatParams) /src/serenity/AK/Format.cpp:691:5
    #5 0x5766f4 in void AK::dbgln<true, unsigned char, unsigned char>(AK::StringView, unsigned char const&, unsigned char const&) /src/serenity/Meta/Lagom/build/../../../AK/Format.h:564:9
    #6 0x57641d in void AK::dbgln<true, unsigned char, unsigned char>(char const*, unsigned char const&, unsigned char const&) /src/serenity/Meta/Lagom/build/../../../AK/Format.h:567:67
    #7 0x574bc6 in Crypto::der_decode_integer(unsigned char const*, unsigned long, Crypto::UnsignedBigInteger&) /src/serenity/Meta/Lagom/build/../../../Userland/Libraries/LibCrypto/ASN1/DER.h:45:9
    #8 0x56ea38 in Crypto::der_decode_sequence(unsigned char const*, unsigned long, Crypto::ASN1::List*, unsigned long, bool) /src/serenity/Meta/Lagom/build/../../../Userland/Libraries/LibCrypto/ASN1/DER.h:323:18
    #9 0x56fce4 in Crypto::der_decode_sequence_many<4ul>::operator bool() /src/serenity/Meta/Lagom/build/../../../Userland/Libraries/LibCrypto/ASN1/DER.h:426:16
    #10 0x56db99 in Crypto::PK::RSA::parse_rsa_key(AK::Span<unsigned char const>) /src/serenity/Userland/Libraries/LibCrypto/PK/RSA.cpp:96:14
    #11 0x56b3b6 in LLVMFuzzerTestOneInput /src/serenity/Meta/Lagom/build/../Fuzzers/FuzzRSAKeyParsing.cpp:34:5
    #12 0x46eb01 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:599:15
    #13 0x4587c2 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:323:6
    #14 0x45eb16 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:856:9
    #15 0x488b02 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #16 0x757084aec83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #17 0x433188 in _start (/out/FuzzRSAKeyParsing+0x433188)

DEDUP_TOKEN: void AK::__format_value<unsigned char>(AK::TypeErasedFormatParams&, AK::FormatBuilder&, AK::FormatParser&, void const*)--AK::(anonymous namespace)::vformat_impl(AK::TypeErasedFormatParams&, AK::FormatBuilder&, AK::FormatParser&)--AK::(anonymous namespace)::vformat_impl(AK::TypeErasedFormatParams&, AK::FormatBuilder&, AK::FormatParser&)
0x603000000172 is located 0 bytes to the right of 18-byte region [0x603000000160,0x603000000172)
allocated by thread T0 here:
    #0 0x5375cd in malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:145:3
    #1 0x56c2a8 in AK::ByteBufferImpl::ByteBufferImpl(void const*, unsigned long) /src/serenity/Meta/Lagom/build/../../../AK/ByteBuffer.h:274:35
    #2 0x56c126 in AK::ByteBufferImpl::copy(void const*, unsigned long) /src/serenity/Meta/Lagom/build/../../../AK/ByteBuffer.h:313:25
    #3 0x56b59b in AK::ByteBuffer::copy(void const*, unsigned long) /src/serenity/Meta/Lagom/build/../../../AK/ByteBuffer.h:126:79
    #4 0x56b395 in LLVMFuzzerTestOneInput /src/serenity/Meta/Lagom/build/../Fuzzers/FuzzRSAKeyParsing.cpp:33:27
    #5 0x46eb01 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:599:15
    #6 0x4587c2 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:323:6
    #7 0x45eb16 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:856:9
    #8 0x488b02 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #9 0x757084aec83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: malloc--AK::ByteBufferImpl::ByteBufferImpl(void const*, unsigned long)--AK::ByteBufferImpl::copy(void const*, unsigned long)
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/serenity/Meta/Lagom/build/../../../AK/Format.h:373:31 in void AK::__format_value<unsigned char>(AK::TypeErasedFormatParams&, AK::FormatBuilder&, AK::FormatParser&, void const*)
Shadow bytes around the buggy address:
  0x0c067fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c067fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c067fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c067fff8000: fa fa 00 00 00 fa fa fa 00 00 00 fa fa fa 00 00
  0x0c067fff8010: 00 fa fa fa 00 00 00 00 fa fa 00 00 02 fa fa fa
=>0x0c067fff8020: 00 00 02 fa fa fa 00 00 00 fa fa fa 00 00[02]fa
  0x0c067fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c067fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c067fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c067fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c067fff8070: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING
