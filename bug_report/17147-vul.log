======================= INFO =========================
This binary is built for AFL-fuzz.
To run the target function on individual input(s) execute this:
  /out/ip6-send-fuzzer < INPUT_FILE
or
  /out/ip6-send-fuzzer INPUT_FILE1 [INPUT_FILE2 ... ]
To fuzz with afl-fuzz execute this:
  afl-fuzz [afl-flags] /out/ip6-send-fuzzer [-N]
afl-fuzz will run N iterations before re-spawning the process (default: 1000)
======================================================
Reading 297 bytes from /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x70abf5fffb21 at pc 0x00000049551a bp 0x7fff5b0b7c80 sp 0x7fff5b0b7448
READ of size 248 at 0x70abf5fffb21 thread T0
SCARINESS: 41 (multi-byte-read-stack-buffer-overflow)
    #0 0x495519 in __asan_memcpy /src/llvm/projects/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:22:3
    #1 0x4d134e in ot::Message::Write(unsigned short, unsigned short, void const*) /src/openthread/src/core/common/message.cpp:601:9
    #2 0x4d11ba in ot::Message::Append(void const*, unsigned short) /src/openthread/src/core/common/message.cpp:396:20
    #3 0x51dd25 in ot::Mle::Mle::AppendNetworkData(ot::Message&, bool) /src/openthread/src/core/thread/mle.cpp:1254:22
    #4 0x537eec in ot::Mle::MleRouter::SendDataResponse(ot::Ip6::Address const&, unsigned char const*, unsigned char, unsigned short) /src/openthread/src/core/thread/mle_router.cpp:3087:13
    #5 0x5381d5 in ot::Mle::MleRouter::HandleNetworkDataUpdateRouter() /src/openthread/src/core/thread/mle_router.cpp:2560:5
    #6 0x51f753 in ot::Mle::Mle::HandleStateChanged(unsigned int) /src/openthread/src/core/thread/mle.cpp:1542:30
    #7 0x4d35ba in ot::Notifier::HandleStateChanged() /src/openthread/src/core/common/notifier.cpp:156:19
    #8 0x4d53f7 in ot::TaskletScheduler::ProcessQueuedTasklets() /src/openthread/src/core/common/tasklet.cpp:113:14
    #9 0x4c8e17 in LLVMFuzzerTestOneInput /src/openthread/tests/fuzz/ip6_send.cpp:82:13
    #10 0x5ed38e in ExecuteFilesOnyByOne /src/libfuzzer/afl/afl_driver.cpp:216:5
    #11 0x5ed38e in main /src/libfuzzer/afl/afl_driver.cpp:253:12
    #12 0x70abf4f9083f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #13 0x41dcb8 in _start (/out/ip6-send-fuzzer+0x41dcb8)

DEDUP_TOKEN: __asan_memcpy--ot::Message::Write(unsigned short, unsigned short, void const*)--ot::Message::Append(void const*, unsigned short)
Address 0x70abf5fffb21 is located in stack of thread T0 at offset 289 in frame
    #0 0x51dbcf in ot::Mle::Mle::AppendNetworkData(ot::Message&, bool) /src/openthread/src/core/thread/mle.cpp:1245

DEDUP_TOKEN: ot::Mle::Mle::AppendNetworkData(ot::Message&, bool)
  This frame has 1 object(s):
    [32, 289) 'tlv' (line 1247) <== Memory access at offset 289 overflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /src/llvm/projects/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:22:3 in __asan_memcpy
Shadow bytes around the buggy address:
  0x0e15febf7f10: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0e15febf7f20: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0e15febf7f30: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0e15febf7f40: f1 f1 f1 f1 00 00 00 00 00 00 00 00 00 00 00 00
  0x0e15febf7f50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x0e15febf7f60: 00 00 00 00[01]f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
  0x0e15febf7f70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0e15febf7f80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0e15febf7f90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0e15febf7fa0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0e15febf7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING
