======================= INFO =========================
This binary is built for AFL-fuzz.
To run the target function on individual input(s) execute this:
  /out/encoder_heic_fuzzer < INPUT_FILE
or
  /out/encoder_heic_fuzzer INPUT_FILE1 [INPUT_FILE2 ... ]
To fuzz with afl-fuzz execute this:
  afl-fuzz [afl-flags] /out/encoder_heic_fuzzer [-N]
afl-fuzz will run N iterations before re-spawning the process (default: 1000)
======================================================
Reading 7163 bytes from /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000003651 at pc 0x000000b0b62a bp 0x7ffdedfeec30 sp 0x7ffdedfeec28
WRITE of size 1 at 0x602000003651 thread T0
SCARINESS: 31 (1-byte-write-heap-buffer-overflow)
    #0 0xb0b629 in decoder_context::process_reference_picture_set(slice_segment_header*) /src/libde265/libde265/decctx.cc
    #1 0xb040fe in decoder_context::process_slice_segment_header(slice_segment_header*, de265_error*, long, nal_header*, void*) /src/libde265/libde265/decctx.cc:2057:7
    #2 0xb028ad in decoder_context::read_slice_NAL(bitreader&, NAL_unit*, nal_header&) /src/libde265/libde265/decctx.cc:636:7
    #3 0xb07974 in decoder_context::decode_NAL(NAL_unit*) /src/libde265/libde265/decctx.cc:1227:11
    #4 0xb07e2c in decoder_context::decode(int*) /src/libde265/libde265/decctx.cc:1315:16
    #5 0x9f6709 in decodeH265Image /src/imagemagick/coders/heic.c:928:11
    #6 0x9f48b0 in ReadHEICImage /src/imagemagick/coders/heic.c:1171:9
    #7 0x635e16 in ReadImage /src/imagemagick/MagickCore/constitute.c:500:13
    #8 0x5d784f in BlobToImage /src/imagemagick/MagickCore/blob.c:469:13
    #9 0x52faa4 in Magick::Image::read(Magick::Blob const&) /src/imagemagick/Magick++/lib/Image.cpp:4015:12
    #10 0x52629b in LLVMFuzzerTestOneInput /src/imagemagick/Magick++/fuzz/encoder_fuzzer.cc:43:11
    #11 0x52698f in ExecuteFilesOnyByOne(int, char**) /src/libfuzzer/afl/afl_driver.cpp:279:5
    #12 0x526f2f in main /src/libfuzzer/afl/afl_driver.cpp:316:12
    #13 0x711af437f83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #14 0x41dff8 in _start (/out/encoder_heic_fuzzer+0x41dff8)

DEDUP_TOKEN: decoder_context::process_reference_picture_set(slice_segment_header*)--decoder_context::process_slice_segment_header(slice_segment_header*, de265_error*, long, nal_header*, void*)--decoder_context::read_slice_NAL(bitreader&, NAL_unit*, nal_header&)
0x602000003651 is located 0 bytes to the right of 1-byte region [0x602000003650,0x602000003651)
allocated by thread T0 here:
    #0 0x521d58 in operator new(unsigned long) /src/llvm/projects/compiler-rt/lib/asan/asan_new_delete.cc:92
    #1 0xb17095 in __libcpp_allocate /usr/local/bin/../include/c++/v1/new:259:10
    #2 0xb17095 in allocate /usr/local/bin/../include/c++/v1/memory:1799
    #3 0xb17095 in allocate /usr/local/bin/../include/c++/v1/memory:1548
    #4 0xb17095 in std::__1::vector<char, std::__1::allocator<char> >::allocate(unsigned long) /usr/local/bin/../include/c++/v1/vector:937
    #5 0xb0ef51 in std::__1::vector<char, std::__1::allocator<char> >::vector(unsigned long, char const&) /usr/local/bin/../include/c++/v1/vector:1109:9
    #6 0xb09da3 in decoder_context::process_reference_picture_set(slice_segment_header*) /src/libde265/libde265/decctx.cc:1568:21
    #7 0xb040fe in decoder_context::process_slice_segment_header(slice_segment_header*, de265_error*, long, nal_header*, void*) /src/libde265/libde265/decctx.cc:2057:7
    #8 0xb028ad in decoder_context::read_slice_NAL(bitreader&, NAL_unit*, nal_header&) /src/libde265/libde265/decctx.cc:636:7
    #9 0xb07974 in decoder_context::decode_NAL(NAL_unit*) /src/libde265/libde265/decctx.cc:1227:11
    #10 0xb07e2c in decoder_context::decode(int*) /src/libde265/libde265/decctx.cc:1315:16
    #11 0x9f6709 in decodeH265Image /src/imagemagick/coders/heic.c:928:11
    #12 0x9f48b0 in ReadHEICImage /src/imagemagick/coders/heic.c:1171:9
    #13 0x635e16 in ReadImage /src/imagemagick/MagickCore/constitute.c:500:13
    #14 0x5d784f in BlobToImage /src/imagemagick/MagickCore/blob.c:469:13
    #15 0x52faa4 in Magick::Image::read(Magick::Blob const&) /src/imagemagick/Magick++/lib/Image.cpp:4015:12
    #16 0x52629b in LLVMFuzzerTestOneInput /src/imagemagick/Magick++/fuzz/encoder_fuzzer.cc:43:11
    #17 0x52698f in ExecuteFilesOnyByOne(int, char**) /src/libfuzzer/afl/afl_driver.cpp:279:5
    #18 0x526f2f in main /src/libfuzzer/afl/afl_driver.cpp:316:12
    #19 0x711af437f83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: operator new(unsigned long)--__libcpp_allocate--allocate
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/libde265/libde265/decctx.cc in decoder_context::process_reference_picture_set(slice_segment_header*)
Shadow bytes around the buggy address:
  0x0c047fff8670: fa fa 00 06 fa fa 00 00 fa fa 00 03 fa fa 00 03
  0x0c047fff8680: fa fa 00 03 fa fa 00 04 fa fa 00 06 fa fa 00 06
  0x0c047fff8690: fa fa 00 00 fa fa 00 00 fa fa 00 04 fa fa 00 04
  0x0c047fff86a0: fa fa 01 fa fa fa 00 fa fa fa 00 04 fa fa 00 fa
  0x0c047fff86b0: fa fa 00 fa fa fa 00 fa fa fa fd fa fa fa fd fd
=>0x0c047fff86c0: fa fa 00 00 fa fa fd fa fa fa[01]fa fa fa 00 00
  0x0c047fff86d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff86e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff86f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8700: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8710: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING
