======================= INFO =========================
This binary is built for AFL-fuzz.
To run the target function on individual input(s) execute this:
  /out/Cr2DecompressorFuzzer < INPUT_FILE
or
  /out/Cr2DecompressorFuzzer INPUT_FILE1 [INPUT_FILE2 ... ]
To fuzz with afl-fuzz execute this:
  afl-fuzz [afl-flags] /out/Cr2DecompressorFuzzer [-N]
afl-fuzz will run N iterations before re-spawning the process (default: 1000)
======================================================
Reading 110 bytes from /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: use-after-poison on address 0x62a00000023e at pc 0x0000005630e3 bp 0x7fff148e8370 sp 0x7fff148e8368
WRITE of size 2 at 0x62a00000023e thread T0
SCARINESS: 43 (2-byte-write-use-after-poison)
    #0 0x5630e2 in void rawspeed::Cr2Decompressor::decodeN_X_Y<4, 1, 1>()::{lambda(int)#1}::operator()(int) const /src/librawspeed/src/librawspeed/decompressors/Cr2Decompressor.cpp:204:21
    #1 0x5630e2 in rawspeed::unroll_loop_t<void rawspeed::Cr2Decompressor::decodeN_X_Y<4, 1, 1>()::{lambda(int)#1}, 4ul>::repeat({lambda(int)#1} const&) /src/librawspeed/src/librawspeed/common/Common.h:194
    #2 0x5630e2 in void rawspeed::unroll_loop<4ul, void rawspeed::Cr2Decompressor::decodeN_X_Y<4, 1, 1>()::{lambda(int)#1}>(void rawspeed::Cr2Decompressor::decodeN_X_Y<4, 1, 1>()::{lambda(int)#1} const&) /src/librawspeed/src/librawspeed/common/Common.h:208
    #3 0x5630e2 in void rawspeed::Cr2Decompressor::decodeN_X_Y<4, 1, 1>() /src/librawspeed/src/librawspeed/decompressors/Cr2Decompressor.cpp:203
    #4 0x55ba12 in rawspeed::Cr2Decompressor::decodeScan() /src/librawspeed/src/librawspeed/decompressors/Cr2Decompressor.cpp:109:7
    #5 0x567c3e in rawspeed::AbstractLJpegDecompressor::decode() /src/librawspeed/src/librawspeed/decompressors/AbstractLJpegDecompressor.cpp:81:7
    #6 0x546dcb in LLVMFuzzerTestOneInput /src/librawspeed/fuzz/librawspeed/decompressors/Cr2Decompressor.cpp:57:7
    #7 0x58228f in ExecuteFilesOnyByOne(int, char**) /src/libfuzzer/afl/afl_driver.cpp:271:5
    #8 0x58282f in main /src/libfuzzer/afl/afl_driver.cpp:308:12
    #9 0x78ac30f9b83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #10 0x447f28 in _start (/out/Cr2DecompressorFuzzer+0x447f28)

DEDUP_TOKEN: void rawspeed::Cr2Decompressor::decodeN_X_Y<4, 1, 1>()::{lambda(int)#1}::operator()(int) const--rawspeed::unroll_loop_t<void rawspeed::Cr2Decompressor::decodeN_X_Y<4, 1, 1>()::{lambda(int)#1}, 4ul>::repeat({lambda(int)#1} const&)--void rawspeed::unroll_loop<4ul, void rawspeed::Cr2Decompressor::decodeN_X_Y<4, 1, 1>()::{lambda(int)#1}>(void rawspeed::Cr2Decompressor::decodeN_X_Y<4, 1, 1>()::{lambda(int)#1} const&)
0x62a00000023e is located 62 bytes inside of 20480-byte region [0x62a000000200,0x62a000005200)
allocated by thread T0 here:
    #0 0x50b880 in __interceptor_posix_memalign /src/llvm/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:157
    #1 0x5672db in rawspeed::alignedMalloc(unsigned long, unsigned long) /src/librawspeed/src/librawspeed/common/Memory.cpp:62:12
    #2 0x54a25b in unsigned char* rawspeed::alignedMalloc<unsigned char, 16ul>(unsigned long) /src/librawspeed/src/librawspeed/common/Memory.h:60:31
    #3 0x54a25b in unsigned char* rawspeed::alignedMallocArray<unsigned char, 16ul, false>(unsigned long, unsigned long) /src/librawspeed/src/librawspeed/common/Memory.h:78
    #4 0x54a25b in rawspeed::RawImageData::createData() /src/librawspeed/src/librawspeed/common/RawImage.cpp:100
    #5 0x546d31 in LLVMFuzzerTestOneInput /src/librawspeed/fuzz/librawspeed/decompressors/Cr2Decompressor.cpp:56:11
    #6 0x58228f in ExecuteFilesOnyByOne(int, char**) /src/libfuzzer/afl/afl_driver.cpp:271:5
    #7 0x58282f in main /src/libfuzzer/afl/afl_driver.cpp:308:12
    #8 0x78ac30f9b83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: __interceptor_posix_memalign--rawspeed::alignedMalloc(unsigned long, unsigned long)--unsigned char* rawspeed::alignedMalloc<unsigned char, 16ul>(unsigned long)
SUMMARY: AddressSanitizer: use-after-poison /src/librawspeed/src/librawspeed/decompressors/Cr2Decompressor.cpp:204:21 in void rawspeed::Cr2Decompressor::decodeN_X_Y<4, 1, 1>()::{lambda(int)#1}::operator()(int) const
Shadow bytes around the buggy address:
  0x0c547fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c547fff8000: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c547fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c547fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c547fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
=>0x0c547fff8040: 00 00 00 00 00 00 00[06]f7 f7 f7 f7 f7 f7 f7 f7
  0x0c547fff8050: f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7
  0x0c547fff8060: f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 06
  0x0c547fff8070: f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7
  0x0c547fff8080: f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7
  0x0c547fff8090: 00 00 00 00 00 00 00 06 f7 f7 f7 f7 f7 f7 f7 f7
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==13==ABORTING
