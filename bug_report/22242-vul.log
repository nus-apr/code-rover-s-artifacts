INFO: Seed: 2194344322
INFO: Loaded 1 modules   (46664 inline 8-bit counters): 46664 [0xd0ec40, 0xd1a288), 
INFO: Loaded 1 PC tables (46664 PCs): 46664 [0xd1a288,0xdd0708), 
/out/smiles_string_to_mol_fuzzer: Running 1 inputs 1 time(s) each.
Running: /tmp/poc
=================================================================
==13==ERROR: AddressSanitizer: container-overflow on address 0x602000000110 at pc 0x000000670184 bp 0x7ffded6c47b0 sp 0x7ffded6c47a8
READ of size 8 at 0x602000000110 thread T0
SCARINESS: 23 (8-byte-read-container-overflow)
    #0 0x670183 in yysmiles_parse(char const*, std::__1::vector<RDKit::RWMol*, std::__1::allocator<RDKit::RWMol*> >*, RDKit::Atom*&, RDKit::Bond*&, std::__1::list<unsigned int, std::__1::allocator<unsigned int> >*, void*, int&) /src/rdkit/build/Code/GraphMol/SmilesParse/smiles.yy:305:15
    #1 0x5aef41 in RDKit::(anonymous namespace)::smiles_parse_helper(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<RDKit::RWMol*, std::__1::allocator<RDKit::RWMol*> >&, RDKit::Atom*&, RDKit::Bond*&, int) /src/rdkit/Code/GraphMol/SmilesParse/SmilesParse.cpp:112:11
    #2 0x5a2cde in RDKit::(anonymous namespace)::smiles_parse(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<RDKit::RWMol*, std::__1::allocator<RDKit::RWMol*> >&) /src/rdkit/Code/GraphMol/SmilesParse/SmilesParse.cpp:149:10
    #3 0x59b38e in RDKit::toMol(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int (*)(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<RDKit::RWMol*, std::__1::allocator<RDKit::RWMol*> >&), std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /src/rdkit/Code/GraphMol/SmilesParse/SmilesParse.cpp:215:5
    #4 0x59f838 in RDKit::SmilesToMol(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, RDKit::SmilesParserParams const&) /src/rdkit/Code/GraphMol/SmilesParse/SmilesParse.cpp:363:9
    #5 0x59a87e in SmilesToMol /src/rdkit/Code/GraphMol/SmilesParse/SmilesParse.h:79:10
    #6 0x59a87e in LLVMFuzzerTestOneInput /src/rdkit/Code/Fuzz/smiles_string_to_mol_fuzzer.cc:30:9
    #7 0x4a23d1 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:556:15
    #8 0x48d732 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:296:6
    #9 0x4937c7 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:776:9
    #10 0x4bbe12 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:19:10
    #11 0x72ed3609583f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #12 0x467d48 in _start (/out/smiles_string_to_mol_fuzzer+0x467d48)

DEDUP_TOKEN: yysmiles_parse(char const*, std::__1::vector<RDKit::RWMol*, std::__1::allocator<RDKit::RWMol*> >*, RDKit::Atom*&, RDKit::Bond*&, std::__1::list<unsigned int, std::__1::allocator<unsigned int> >*, void*, int&)--RDKit::(anonymous namespace)::smiles_parse_helper(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<RDKit::RWMol*, std::__1::allocator<RDKit::RWMol*> >&, RDKit::Atom*&, RDKit::Bond*&, int)--RDKit::(anonymous namespace)::smiles_parse(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<RDKit::RWMol*, std::__1::allocator<RDKit::RWMol*> >&)
0x602000000110 is located 0 bytes inside of 8-byte region [0x602000000110,0x602000000118)
allocated by thread T0 here:
    #0 0x59765d in operator new(unsigned long) /src/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:99:3
    #1 0x666fd5 in __libcpp_allocate /usr/local/bin/../include/c++/v1/new:253:10
    #2 0x666fd5 in allocate /usr/local/bin/../include/c++/v1/memory:1908:34
    #3 0x666fd5 in allocate /usr/local/bin/../include/c++/v1/memory:1599:21
    #4 0x666fd5 in __split_buffer /usr/local/bin/../include/c++/v1/__split_buffer:318:29
    #5 0x666fd5 in std::__1::vector<RDKit::RWMol*, std::__1::allocator<RDKit::RWMol*> >::__append(unsigned long) /usr/local/bin/../include/c++/v1/vector:1094:53
    #6 0x66ba84 in resize /usr/local/bin/../include/c++/v1/vector:2024:15
    #7 0x66ba84 in yysmiles_parse(char const*, std::__1::vector<RDKit::RWMol*, std::__1::allocator<RDKit::RWMol*> >*, RDKit::Atom*&, RDKit::Bond*&, std::__1::list<unsigned int, std::__1::allocator<unsigned int> >*, void*, int&) /src/rdkit/build/Code/GraphMol/SmilesParse/smiles.yy:157:12
    #8 0x5aef41 in RDKit::(anonymous namespace)::smiles_parse_helper(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<RDKit::RWMol*, std::__1::allocator<RDKit::RWMol*> >&, RDKit::Atom*&, RDKit::Bond*&, int) /src/rdkit/Code/GraphMol/SmilesParse/SmilesParse.cpp:112:11
    #9 0x5a2cde in RDKit::(anonymous namespace)::smiles_parse(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<RDKit::RWMol*, std::__1::allocator<RDKit::RWMol*> >&) /src/rdkit/Code/GraphMol/SmilesParse/SmilesParse.cpp:149:10
    #10 0x59b38e in RDKit::toMol(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int (*)(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<RDKit::RWMol*, std::__1::allocator<RDKit::RWMol*> >&), std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /src/rdkit/Code/GraphMol/SmilesParse/SmilesParse.cpp:215:5
    #11 0x59f838 in RDKit::SmilesToMol(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, RDKit::SmilesParserParams const&) /src/rdkit/Code/GraphMol/SmilesParse/SmilesParse.cpp:363:9
    #12 0x59a87e in SmilesToMol /src/rdkit/Code/GraphMol/SmilesParse/SmilesParse.h:79:10
    #13 0x59a87e in LLVMFuzzerTestOneInput /src/rdkit/Code/Fuzz/smiles_string_to_mol_fuzzer.cc:30:9
    #14 0x4a23d1 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:556:15
    #15 0x48d732 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:296:6
    #16 0x4937c7 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:776:9
    #17 0x4bbe12 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:19:10
    #18 0x72ed3609583f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: operator new(unsigned long)--__libcpp_allocate--allocate
HINT: if you don't care about these errors you may set ASAN_OPTIONS=detect_container_overflow=0.
If you suspect a false positive see also: https://github.com/google/sanitizers/wiki/AddressSanitizerContainerOverflow.
SUMMARY: AddressSanitizer: container-overflow /src/rdkit/build/Code/GraphMol/SmilesParse/smiles.yy:305:15 in yysmiles_parse(char const*, std::__1::vector<RDKit::RWMol*, std::__1::allocator<RDKit::RWMol*> >*, RDKit::Atom*&, RDKit::Bond*&, std::__1::list<unsigned int, std::__1::allocator<unsigned int> >*, void*, int&)
Shadow bytes around the buggy address:
  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff8000: fa fa 00 00 fa fa 00 fa fa fa 00 fa fa fa 00 fa
  0x0c047fff8010: fa fa 03 fa fa fa 03 fa fa fa 04 fa fa fa 00 fa
=>0x0c047fff8020: fa fa[fc]fa fa fa fd fa fa fa fa fa fa fa fa fa
  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8070: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING
