======================= INFO =========================
This binary is built for AFL-fuzz.
To run the target function on individual input(s) execute this:
  /out/coder_WPG_fuzzer < INPUT_FILE
or
  /out/coder_WPG_fuzzer INPUT_FILE1 [INPUT_FILE2 ... ]
To fuzz with afl-fuzz execute this:
  afl-fuzz [afl-flags] /out/coder_WPG_fuzzer [-N]
afl-fuzz will run N iterations before re-spawning the process (default: 1000)
======================================================
Reading 501842 bytes from /tmp/poc

Unsupported WPG2 unaligned token RST x=26, please report!

Unsupported WPG2 unaligned token RST x=26, please report!

Unsupported WPG2 unaligned token RST x=26, please report!

Unsupported WPG2 unaligned token RST x=26, please report!

Unsupported WPG2 unaligned token RST x=26, please report!

Unsupported WPG2 unaligned token RST x=26, please report!

Unsupported WPG2 unaligned token RST x=26, please report!

Unsupported WPG2 unaligned token RST x=26, please report!

Unsupported WPG2 unaligned token RST x=26, please report!
=================================================================
==13==ERROR: AddressSanitizer: heap-use-after-free on address 0x621000012e4c at pc 0x000000600725 bp 0x7fff3db4a270 sp 0x7fff3db4a268
WRITE of size 2 at 0x621000012e4c thread T0
SCARINESS: 43 (2-byte-write-heap-use-after-free)
    #0 0x600724 in ImportGrayQuantumType /src/graphicsmagick/magick/import.c:876:31
    #1 0x5f7c8e in ImportViewPixelArea /src/graphicsmagick/magick/import.c:3649:16
    #2 0x858e1e in InsertRow /src/graphicsmagick/coders/wpg.c
    #3 0x85a28f in UnpackWPG2Raster /src/graphicsmagick/coders/wpg.c:717:17
    #4 0x8545e2 in ReadWPGImage /src/graphicsmagick/coders/wpg.c:1598:25
    #5 0x56f0cf in ReadImage /src/graphicsmagick/magick/constitute.c:1607:13
    #6 0x528050 in BlobToImage /src/graphicsmagick/magick/blob.c:764:13
    #7 0x4d318b in Magick::Image::read(Magick::Blob const&) /src/graphicsmagick/Magick++/lib/Image.cpp:1591:5
    #8 0x4ca739 in LLVMFuzzerTestOneInput /src/graphicsmagick/fuzzing/coder_fuzzer.cc:22:15
    #9 0x4cbdce in ExecuteFilesOnyByOne /src/libfuzzer/afl/afl_driver.cpp:216:5
    #10 0x4cbdce in main /src/libfuzzer/afl/afl_driver.cpp:253:12
    #11 0x75ed7e39483f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #12 0x41f148 in _start (/out/coder_WPG_fuzzer+0x41f148)

DEDUP_TOKEN: ImportGrayQuantumType--ImportViewPixelArea--InsertRow
0x621000012e4c is located 332 bytes inside of 4288-byte region [0x621000012d00,0x621000013dc0)
freed by thread T0 here:
    #0 0x497aad in free /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:123:3
    #1 0x646a7d in DestroyImagePixels /src/graphicsmagick/magick/pixel_cache.c:3684:5
    #2 0x5ef977 in DestroyImage /src/graphicsmagick/magick/image.c:1449:3
    #3 0x89db27 in ReadWEBPImage /src/graphicsmagick/coders/webp.c
    #4 0x56f0cf in ReadImage /src/graphicsmagick/magick/constitute.c:1607:13
    #5 0x528050 in BlobToImage /src/graphicsmagick/magick/blob.c:764:13
    #6 0x856df3 in ExtractPostscript /src/graphicsmagick/coders/wpg.c:945:12
    #7 0x854101 in ReadWPGImage /src/graphicsmagick/coders/wpg.c:1658:23
    #8 0x56f0cf in ReadImage /src/graphicsmagick/magick/constitute.c:1607:13
    #9 0x528050 in BlobToImage /src/graphicsmagick/magick/blob.c:764:13
    #10 0x4d318b in Magick::Image::read(Magick::Blob const&) /src/graphicsmagick/Magick++/lib/Image.cpp:1591:5
    #11 0x4ca739 in LLVMFuzzerTestOneInput /src/graphicsmagick/fuzzing/coder_fuzzer.cc:22:15
    #12 0x4cbdce in ExecuteFilesOnyByOne /src/libfuzzer/afl/afl_driver.cpp:216:5
    #13 0x4cbdce in main /src/libfuzzer/afl/afl_driver.cpp:253:12
    #14 0x75ed7e39483f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: free--DestroyImagePixels--DestroyImage
previously allocated by thread T0 here:
    #0 0x4987c7 in posix_memalign /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:226:3
    #1 0x630772 in MagickMallocAligned /src/graphicsmagick/magick/memory.c:238:7
    #2 0x646b4f in GetCacheInfo /src/graphicsmagick/magick/pixel_cache.c:3721:14
    #3 0x5e98b4 in AllocateImage /src/graphicsmagick/magick/image.c:385:3
    #4 0x89d83c in ReadWEBPImage /src/graphicsmagick/coders/webp.c:180:9
    #5 0x56f0cf in ReadImage /src/graphicsmagick/magick/constitute.c:1607:13
    #6 0x528050 in BlobToImage /src/graphicsmagick/magick/blob.c:764:13
    #7 0x856df3 in ExtractPostscript /src/graphicsmagick/coders/wpg.c:945:12
    #8 0x854101 in ReadWPGImage /src/graphicsmagick/coders/wpg.c:1658:23
    #9 0x56f0cf in ReadImage /src/graphicsmagick/magick/constitute.c:1607:13
    #10 0x528050 in BlobToImage /src/graphicsmagick/magick/blob.c:764:13
    #11 0x4d318b in Magick::Image::read(Magick::Blob const&) /src/graphicsmagick/Magick++/lib/Image.cpp:1591:5
    #12 0x4ca739 in LLVMFuzzerTestOneInput /src/graphicsmagick/fuzzing/coder_fuzzer.cc:22:15
    #13 0x4cbdce in ExecuteFilesOnyByOne /src/libfuzzer/afl/afl_driver.cpp:216:5
    #14 0x4cbdce in main /src/libfuzzer/afl/afl_driver.cpp:253:12
    #15 0x75ed7e39483f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)

DEDUP_TOKEN: posix_memalign--MagickMallocAligned--GetCacheInfo
SUMMARY: AddressSanitizer: heap-use-after-free /src/graphicsmagick/magick/import.c:876:31 in ImportGrayQuantumType
Shadow bytes around the buggy address:
  0x0c427fffa570: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c427fffa580: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c427fffa590: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c427fffa5a0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x0c427fffa5b0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
=>0x0c427fffa5c0: fd fd fd fd fd fd fd fd fd[fd]fd fd fd fd fd fd
  0x0c427fffa5d0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x0c427fffa5e0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x0c427fffa5f0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x0c427fffa600: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x0c427fffa610: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING
