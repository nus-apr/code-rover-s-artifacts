Accepting input from '/tmp/poc'
Usage for fuzzing: honggfuzz -P [flags] -- /out/wolfmqtt-fuzzer
=================================================================
==13==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x76259c623ca4 at pc 0x0000004e3f37 bp 0x7fff4c98c350 sp 0x7fff4c98c348
WRITE of size 1 at 0x76259c623ca4 thread T0
SCARINESS: 46 (1-byte-write-stack-buffer-overflow)
    #0 0x4e3f36 in MqttDecode_Disconnect /src/wolfmqtt/src/mqtt_packet.c:1573:27
    #1 0x4dcc23 in MqttClient_DecodePacket /src/wolfmqtt/src/mqtt_client.c:476:18
    #2 0x4dd625 in MqttClient_HandlePacket /src/wolfmqtt/src/mqtt_client.c
    #3 0x4d9be3 in MqttClient_WaitType /src/wolfmqtt/src/mqtt_client.c:939:18
    #4 0x4dba76 in MqttClient_Ping_ex /src/wolfmqtt/src/mqtt_client.c:1937:10
    #5 0x4cef70 in wolfMQTTFuzzer::ping() /src/wolfmqtt-fuzzers/fuzzer.cpp:330:5
    #6 0x4d0045 in wolfMQTTFuzzer::Run() /src/wolfmqtt-fuzzers/fuzzer.cpp:458:21
    #7 0x4d07aa in LLVMFuzzerTestOneInput /src/wolfmqtt-fuzzers/fuzzer.cpp:513:12
    #8 0x5e69db in main (/out/wolfmqtt-fuzzer+0x5e69db)
    #9 0x76259b5e583f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)
    #10 0x41d008 in _start (/out/wolfmqtt-fuzzer+0x41d008)

DEDUP_TOKEN: MqttDecode_Disconnect--MqttClient_DecodePacket--MqttClient_HandlePacket
Address 0x76259c623ca4 is located in stack of thread T0 at offset 36 in frame
    #0 0x4ceebf in wolfMQTTFuzzer::ping() /src/wolfmqtt-fuzzers/fuzzer.cpp:323

DEDUP_TOKEN: wolfMQTTFuzzer::ping()
  This frame has 1 object(s):
    [32, 36) 'ping' (line 326) <== Memory access at offset 36 overflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /src/wolfmqtt/src/mqtt_packet.c:1573:27 in MqttDecode_Disconnect
Shadow bytes around the buggy address:
  0x0ec5338bc740: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0ec5338bc750: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0ec5338bc760: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0ec5338bc770: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0ec5338bc780: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
=>0x0ec5338bc790: f1 f1 f1 f1[04]f3 f3 f3 f5 f5 f5 f5 f5 f5 f5 f5
  0x0ec5338bc7a0: f5 f5 f5 f5 f5 f5 f5 f5 f1 f1 f1 f1 02 f2 04 f3
  0x0ec5338bc7b0: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5
  0x0ec5338bc7c0: f1 f1 f1 f1 04 f2 04 f3 00 00 00 00 00 00 00 00
  0x0ec5338bc7d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0ec5338bc7e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==13==ABORTING
