diff --git a/third_party/openthread/src/ncp/spinel.c b/third_party/openthread/src/ncp/spinel.c
index 1078f19..9507f62 100644
--- a/third_party/openthread/src/ncp/spinel.c
+++ b/third_party/openthread/src/ncp/spinel.c
@@ -291,11 +291,9 @@ spinel_datatype_vunpack_(bool in_place, const uint8_t *data_ptr, spinel_size_t d
         {
             uint8_t *arg_ptr = va_arg(args->obj, uint8_t *);
             require_action(data_len >= sizeof(uint8_t), bail, (ret = -1, errno = EOVERFLOW));
+            require_action(arg_ptr != NULL, bail, (ret = -1, errno = EINVAL));
 
-            if (arg_ptr)
-            {
-                *arg_ptr = data_ptr[0];
-            }
+            *arg_ptr = data_ptr[0];
 
             ret += sizeof(uint8_t);
             data_ptr += sizeof(uint8_t);
@@ -308,11 +306,9 @@ spinel_datatype_vunpack_(bool in_place, const uint8_t *data_ptr, spinel_size_t d
         {
             uint16_t *arg_ptr = va_arg(args->obj, uint16_t *);
             require_action(data_len >= sizeof(uint16_t), bail, (ret = -1, errno = EOVERFLOW));
+            require_action(arg_ptr != NULL, bail, (ret = -1, errno = EINVAL));
 
-            if (arg_ptr)
-            {
-                *arg_ptr = (uint16_t)((data_ptr[1] << 8) | data_ptr[0]);
-            }
+            *arg_ptr = (uint16_t)((data_ptr[1] << 8) | data_ptr[0]);
 
             ret += sizeof(uint16_t);
             data_ptr += sizeof(uint16_t);
@@ -325,11 +321,9 @@ spinel_datatype_vunpack_(bool in_place, const uint8_t *data_ptr, spinel_size_t d
         {
             uint32_t *arg_ptr = va_arg(args->obj, uint32_t *);
             require_action(data_len >= sizeof(uint32_t), bail, (ret = -1, errno = EOVERFLOW));
+            require_action(arg_ptr != NULL, bail, (ret = -1, errno = EINVAL));
 
-            if (arg_ptr)
-            {
-                *arg_ptr = (uint32_t)((data_ptr[3] << 24) | (data_ptr[2] << 16) | (data_ptr[1] << 8) | data_ptr[0]);
-            }
+            *arg_ptr = (uint32_t)((data_ptr[3] << 24) | (data_ptr[2] << 16) | (data_ptr[1] << 8) | data_ptr[0]);
 
             ret += sizeof(uint32_t);
             data_ptr += sizeof(uint32_t);
@@ -342,14 +336,12 @@ spinel_datatype_vunpack_(bool in_place, const uint8_t *data_ptr, spinel_size_t d
         {
             uint64_t *arg_ptr = va_arg(args->obj, uint64_t *);
             require_action(data_len >= sizeof(uint64_t), bail, (ret = -1, errno = EOVERFLOW));
+            require_action(arg_ptr != NULL, bail, (ret = -1, errno = EINVAL));
 
-            if (arg_ptr)
-            {
-                uint32_t l32 = (uint32_t)((data_ptr[3] << 24) | (data_ptr[2] << 16) | (data_ptr[1] << 8) | data_ptr[0]);
-                uint32_t h32 = (uint32_t)((data_ptr[7] << 24) | (data_ptr[6] << 16) | (data_ptr[5] << 8) | data_ptr[4]);
+            uint32_t l32 = (uint32_t)((data_ptr[3] << 24) | (data_ptr[2] << 16) | (data_ptr[1] << 8) | data_ptr[0]);
+            uint32_t h32 = (uint32_t)((data_ptr[7] << 24) | (data_ptr[6] << 16) | (data_ptr[5] << 8) | data_ptr[4]);
 
-                *arg_ptr = ((uint64_t)l32) | (((uint64_t)h32) << 32);
-            }
+            *arg_ptr = ((uint64_t)l32) | (((uint64_t)h32) << 32);
 
             ret += sizeof(uint64_t);
             data_ptr += sizeof(uint64_t);
