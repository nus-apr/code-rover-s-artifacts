diff --git a/src/flac/analyze.c b/src/flac/analyze.c
index ff1b170d..f2cdff4a 100644
--- a/src/flac/analyze.c
+++ b/src/flac/analyze.c
@@ -140,8 +140,10 @@ void flac__analyze_frame(const FLAC__Frame *frame, uint32_t frame_number, FLAC__
 					break;
 				case FLAC__SUBFRAME_TYPE_LPC:
 					residual_samples = frame->header.blocksize - subframe->data.lpc.order;
-					for(i = 0; i < residual_samples; i++)
-						update_stats(&stats, subframe->data.lpc.residual[i], 1);
+					if (subframe->data.lpc.residual != NULL) {
+						for(i = 0; i < residual_samples; i++)
+							update_stats(&stats, subframe->data.lpc.residual[i], 1);
+					}
 					break;
 				default:
 					break;
diff --git a/src/libFLAC/stream_decoder.c b/src/libFLAC/stream_decoder.c
index 34919c37..132734a8 100644
--- a/src/libFLAC/stream_decoder.c
+++ b/src/libFLAC/stream_decoder.c
@@ -614,11 +614,12 @@ FLAC_API FLAC__bool FLAC__stream_decoder_finish(FLAC__StreamDecoder *decoder)
 		 */
 		if(0 != decoder->private_->output[i]) {
 			free(decoder->private_->output[i]-4);
-			decoder->private_->output[i] = 0;
+			decoder->private_->output[i] = NULL;
 		}
 		if(0 != decoder->private_->residual_unaligned[i]) {
 			free(decoder->private_->residual_unaligned[i]);
-			decoder->private_->residual_unaligned[i] = decoder->private_->residual[i] = 0;
+			decoder->private_->residual_unaligned[i] = NULL;
+			decoder->private_->residual[i] = NULL;
 		}
 	}
 	if(0 != decoder->private_->side_subframe) {
