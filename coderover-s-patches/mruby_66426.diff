diff --git a/src/string.c b/src/string.c
index 3642dfbe6..906d099ef 100644
--- a/src/string.c
+++ b/src/string.c
@@ -609,13 +609,14 @@ mrb_memsearch_ss(const unsigned char *xs, long m, const unsigned char *ys, long
   }
 #endif
 
+  if (m < 2 || n < m) return -1; // Ensure valid substring length and bounds
   const bitint first = MASK1 * (uint8_t)xs[0];
   const bitint last  = MASK1 * (uint8_t)xs[m-1];
 
   bitint *s0 = (bitint*)(ys);
   bitint *s1 = (bitint*)(ys+m-1);
 
-  for (mrb_int i=0; i < n; i+=sizeof(bitint), s0++, s1++) {
+  for (mrb_int i=0; i <= n - m; i+=sizeof(bitint), s0++, s1++) { // Adjust loop condition
     const bitint eq = (*s0 ^ first) | (*s1 ^ last);
     bitint zeros = ((~eq & MASK2) + MASK1) & (~eq & MASK3);
     size_t j = 0;
@@ -623,7 +624,7 @@ mrb_memsearch_ss(const unsigned char *xs, long m, const unsigned char *ys, long
     while (zeros) {
       if (zeros & MASK4) {
         const char* substr = (char*)s0 + j + 1;
-        if (memcmp(substr, xs + 1, m - 2) == 0) {
+        if (i + j + m <= n && memcmp(substr, xs + 1, m - 2) == 0) { // Ensure bounds before memcmp
           return i + j;
         }
       }
