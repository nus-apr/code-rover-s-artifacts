diff --git a/av1/common/x86/convolve_2d_avx2.c b/av1/common/x86/convolve_2d_avx2.c
index 5a69ef66a1..f281e77bb1 100644
--- a/av1/common/x86/convolve_2d_avx2.c
+++ b/av1/common/x86/convolve_2d_avx2.c
@@ -188,96 +188,114 @@ void av1_convolve_2d_copy_sr_avx2(const uint8_t *src, int src_stride,
   (void)subpel_y_q4;
   (void)conv_params;
 
-  if (w >= 16) {
-    assert(!((intptr_t)dst % 16));
-    assert(!(dst_stride % 16));
-  }
-
-  if (w == 2) {
-    do {
-      memmove(dst, src, 2 * sizeof(*src));
-      src += src_stride;
-      dst += dst_stride;
-      memmove(dst, src, 2 * sizeof(*src));
-      src += src_stride;
-      dst += dst_stride;
-      h -= 2;
-    } while (h);
-  } else if (w == 4) {
-    do {
-      memmove(dst, src, 4 * sizeof(*src));
-      src += src_stride;
-      dst += dst_stride;
-      memmove(dst, src, 4 * sizeof(*src));
-      src += src_stride;
-      dst += dst_stride;
-      h -= 2;
-    } while (h);
-  } else if (w == 8) {
-    do {
-      __m128i s[2];
-      s[0] = _mm_loadl_epi64((__m128i *)src);
-      src += src_stride;
-      s[1] = _mm_loadl_epi64((__m128i *)src);
-      src += src_stride;
-      _mm_storel_epi64((__m128i *)dst, s[0]);
-      dst += dst_stride;
-      _mm_storel_epi64((__m128i *)dst, s[1]);
-      dst += dst_stride;
-      h -= 2;
-    } while (h);
-  } else if (w == 16) {
-    do {
-      __m128i s[2];
-      s[0] = _mm_loadu_si128((__m128i *)src);
-      src += src_stride;
-      s[1] = _mm_loadu_si128((__m128i *)src);
-      src += src_stride;
-      _mm_store_si128((__m128i *)dst, s[0]);
-      dst += dst_stride;
-      _mm_store_si128((__m128i *)dst, s[1]);
-      dst += dst_stride;
-      h -= 2;
-    } while (h);
-  } else if (w == 32) {
-    do {
-      __m256i s[2];
-      s[0] = _mm256_loadu_si256((__m256i *)src);
-      src += src_stride;
-      s[1] = _mm256_loadu_si256((__m256i *)src);
-      src += src_stride;
-      _mm256_storeu_si256((__m256i *)dst, s[0]);
-      dst += dst_stride;
-      _mm256_storeu_si256((__m256i *)dst, s[1]);
-      dst += dst_stride;
-      h -= 2;
-    } while (h);
-  } else if (w == 64) {
-    do {
-      __m256i s[4];
-      s[0] = _mm256_loadu_si256((__m256i *)(src + 0 * 32));
-      s[1] = _mm256_loadu_si256((__m256i *)(src + 1 * 32));
-      src += src_stride;
-      s[2] = _mm256_loadu_si256((__m256i *)(src + 0 * 32));
-      s[3] = _mm256_loadu_si256((__m256i *)(src + 1 * 32));
-      src += src_stride;
-      _mm256_storeu_si256((__m256i *)(dst + 0 * 32), s[0]);
-      _mm256_storeu_si256((__m256i *)(dst + 1 * 32), s[1]);
-      dst += dst_stride;
-      _mm256_storeu_si256((__m256i *)(dst + 0 * 32), s[2]);
-      _mm256_storeu_si256((__m256i *)(dst + 1 * 32), s[3]);
-      dst += dst_stride;
-      h -= 2;
-    } while (h);
-  } else {
-    do {
-      copy_128(src, dst);
-      src += src_stride;
-      dst += dst_stride;
-      copy_128(src, dst);
-      src += src_stride;
-      dst += dst_stride;
-      h -= 2;
-    } while (h);
-  }
+   if (w >= 16) {
+     assert(!((intptr_t)dst % 16));
+     assert(!(dst_stride % 16));
+   }
+
+   // Ensure that the width and height are positive
+   if (w <= 0 || h <= 0) return;
+
+   // Calculate the maximum allowed height based on the buffer size
+   int max_height = (src_stride > 0) ? (INT_MAX / src_stride) : h;
+   if (h > max_height) return;
+
+   // Calculate the maximum allowed width based on the buffer size
+   int max_width = (dst_stride > 0) ? (INT_MAX / dst_stride) : w;
+   if (w > max_width) return;
+
+   if (w == 2) {
+     do {
+       if (src + 2 * src_stride > src + src_stride * h || dst + 2 * dst_stride > dst + dst_stride * h) break;
+       memmove(dst, src, 2 * sizeof(*src));
+       src += src_stride;
+       dst += dst_stride;
+       memmove(dst, src, 2 * sizeof(*src));
+       src += src_stride;
+       dst += dst_stride;
+       h -= 2;
+     } while (h);
+   } else if (w == 4) {
+     do {
+       if (src + 4 * src_stride > src + src_stride * h || dst + 4 * dst_stride > dst + dst_stride * h) break;
+       memmove(dst, src, 4 * sizeof(*src));
+       src += src_stride;
+       dst += dst_stride;
+       memmove(dst, src, 4 * sizeof(*src));
+       src += src_stride;
+       dst += dst_stride;
+       h -= 2;
+     } while (h);
+   } else if (w == 8) {
+     do {
+       if (src + 8 * src_stride > src + src_stride * h || dst + 8 * dst_stride > dst + dst_stride * h) break;
+       __m128i s[2];
+       s[0] = _mm_loadl_epi64((__m128i *)src);
+       src += src_stride;
+       s[1] = _mm_loadl_epi64((__m128i *)src);
+       src += src_stride;
+       _mm_storel_epi64((__m128i *)dst, s[0]);
+       dst += dst_stride;
+       _mm_storel_epi64((__m128i *)dst, s[1]);
+       dst += dst_stride;
+       h -= 2;
+     } while (h);
+   } else if (w == 16) {
+     do {
+       if (src + 16 * src_stride > src + src_stride * h || dst + 16 * dst_stride > dst + dst_stride * h) break;
+       __m128i s[2];
+       s[0] = _mm_loadu_si128((__m128i *)src);
+       src += src_stride;
+       s[1] = _mm_loadu_si128((__m128i *)src);
+       src += src_stride;
+       _mm_store_si128((__m128i *)dst, s[0]);
+       dst += dst_stride;
+       _mm_store_si128((__m128i *)dst, s[1]);
+       dst += dst_stride;
+       h -= 2;
+     } while (h);
+   } else if (w == 32) {
+     do {
+       if (src + 32 * src_stride > src + src_stride * h || dst + 32 * dst_stride > dst + dst_stride * h) break;
+       __m256i s[2];
+       s[0] = _mm256_loadu_si256((__m256i *)src);
+       src += src_stride;
+       s[1] = _mm256_loadu_si256((__m256i *)src);
+       src += src_stride;
+       _mm256_storeu_si256((__m256i *)dst, s[0]);
+       dst += dst_stride;
+       _mm256_storeu_si256((__m256i *)dst, s[1]);
+       dst += dst_stride;
+       h -= 2;
+     } while (h);
+   } else if (w == 64) {
+     do {
+       if (src + 64 * src_stride > src + src_stride * h || dst + 64 * dst_stride > dst + dst_stride * h) break;
+       __m256i s[4];
+       s[0] = _mm256_loadu_si256((__m256i *)(src + 0 * 32));
+       s[1] = _mm256_loadu_si256((__m256i *)(src + 1 * 32));
+       src += src_stride;
+       s[2] = _mm256_loadu_si256((__m256i *)(src + 0 * 32));
+       s[3] = _mm256_loadu_si256((__m256i *)(src + 1 * 32));
+       src += src_stride;
+       _mm256_storeu_si256((__m256i *)(dst + 0 * 32), s[0]);
+       _mm256_storeu_si256((__m256i *)(dst + 1 * 32), s[1]);
+       dst += dst_stride;
+       _mm256_storeu_si256((__m256i *)(dst + 0 * 32), s[2]);
+       _mm256_storeu_si256((__m256i *)(dst + 1 * 32), s[3]);
+       dst += dst_stride;
+       h -= 2;
+     } while (h);
+   } else {
+     do {
+       if (src + 128 * src_stride > src + src_stride * h || dst + 128 * dst_stride > dst + dst_stride * h) break;
+       copy_128(src, dst);
+       src += src_stride;
+       dst += dst_stride;
+       copy_128(src, dst);
+       src += src_stride;
+       dst += dst_stride;
+       h -= 2;
+     } while (h);
+   }
 }
