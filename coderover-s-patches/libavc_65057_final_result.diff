diff --git a/decoder/ih264d_format_conv.c b/decoder/ih264d_format_conv.c
index 631bc23..0a18400 100644
--- a/decoder/ih264d_format_conv.c
+++ b/decoder/ih264d_format_conv.c
@@ -395,12 +395,14 @@ void ih264d_fmt_conv_420sp_to_420sp(UWORD8 *pu1_y_src,
     src_strd = src_y_strd;
     dst_strd = dst_y_strd;
 
-    for(i = 0; i < num_rows; i++)
-    {
-        memcpy(pu1_dst, pu1_src, num_cols);
-        pu1_dst += dst_strd;
-        pu1_src += src_strd;
-    }
+        for(i = 0; i < num_rows; i++)
+        {
+            // Ensure num_cols does not exceed the allocated size of pu1_dst
+            if(num_cols > dst_y_strd) num_cols = dst_y_strd;
+            memcpy(pu1_dst, pu1_src, num_cols);
+            pu1_dst += dst_strd;
+            pu1_src += src_strd;
+        }
 
     /* copy U and V */
     pu1_src = (UWORD8 *)pu1_uv_src;
@@ -635,8 +637,12 @@ void ih264d_fmt_conv_420sp_to_420p(UWORD8 *pu1_y_src,
     {
         for(j = 0; j < num_cols; j++)
         {
-            pu1_u_dst[j] = pu1_u_src[j * 2];
-            pu1_v_dst[j] = pu1_v_src[j * 2];
+            // Ensure indices are within bounds of the source and destination buffers
+            if(j * 2 < src_uv_strd && j < dst_uv_strd)
+            {
+                pu1_u_dst[j] = pu1_u_src[j * 2];
+                pu1_v_dst[j] = pu1_v_src[j * 2];
+            }
         }
 
         pu1_u_dst += dst_strd;
diff --git a/decoder/ih264d_utils.c b/decoder/ih264d_utils.c
index 9d616d3..17d6aa6 100644
--- a/decoder/ih264d_utils.c
+++ b/decoder/ih264d_utils.c
@@ -1008,6 +1008,9 @@ WORD32 ih264d_get_next_display_field(dec_struct_t * ps_dec,
         ps_op_frm->u4_y_ht = pic_buf->u2_disp_height << 1;
         ps_op_frm->u4_u_ht = ps_op_frm->u4_v_ht = ps_op_frm->u4_y_ht >> 1;
         ps_op_frm->u4_y_wd = pic_buf->u2_disp_width;
+        if(ps_op_frm->u4_y_wd > pic_buf->u2_frm_wd_y) {
+            ps_op_frm->u4_y_wd = pic_buf->u2_frm_wd_y;
+        }
 
         ps_op_frm->u4_u_wd = ps_op_frm->u4_v_wd = ps_op_frm->u4_y_wd >> 1;
 
