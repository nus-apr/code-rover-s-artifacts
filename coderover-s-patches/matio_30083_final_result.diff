diff --git a/src/mat73.c b/src/mat73.c
index 50ec9ea..6d0cae2 100644
--- a/src/mat73.c
+++ b/src/mat73.c
@@ -924,9 +924,14 @@ Mat_H5ReadGroupInfo(mat_t *mat,matvar_t *matvar,hid_t dset_id)
                                 name_len+1);
                         }
                         /* Closing of ref_id is done in Mat_H5ReadNextReferenceInfo */
-                        ref_id = H5RDEREFERENCE(field_id,H5R_OBJECT,ref_ids+l);
-                        fields[l*nfields+k]->internal->id = ref_id;
-                        Mat_H5ReadNextReferenceInfo(ref_id,fields[l*nfields+k],mat);
+                        ref_id = H5RDEREFERENCE(field_id, H5R_OBJECT, ref_ids + l);
+                        if (ref_id >= 0) {
+                            fields[l*nfields+k]->internal->id = ref_id;
+                            Mat_H5ReadNextReferenceInfo(ref_id, fields[l*nfields+k], mat);
+                        } else {
+                            fields[l*nfields+k]->internal->id = -1; // Invalid reference
+                            // Log or handle the invalid reference case
+                        }
                     }
                     free(ref_ids);
                 } else {
@@ -936,12 +941,19 @@ Mat_H5ReadGroupInfo(mat_t *mat,matvar_t *matvar,hid_t dset_id)
                 }
                 H5Dclose(field_id);
             } else if ( object_info.type == H5O_TYPE_GROUP ) {
-                field_id = H5Gopen(dset_id,matvar->internal->fieldnames[k],
-                                   H5P_DEFAULT);
-                if ( -1 < field_id ) {
+                field_id = H5Gopen(dset_id, matvar->internal->fieldnames[k], H5P_DEFAULT);
+                if (field_id >= 0) {
                     fields[k] = Mat_VarCalloc();
-                    fields[k]->name = strdup(matvar->internal->fieldnames[k]);
-                    Mat_H5ReadGroupInfo(mat,fields[k],field_id);
+                    if (fields[k] != NULL) {
+                        fields[k]->name = strdup(matvar->internal->fieldnames[k]);
+                        if (fields[k]->name != NULL) {
+                            Mat_H5ReadGroupInfo(mat, fields[k], field_id);
+                        } else {
+                            // Handle memory allocation failure for name
+                            Mat_VarFree(fields[k]);
+                            fields[k] = NULL;
+                        }
+                    }
                     H5Gclose(field_id);
                 }
             }
