diff --git a/src/decode.c b/src/decode.c
index a7efea3..1bce5b4 100644
--- a/src/decode.c
+++ b/src/decode.c
@@ -731,6 +731,11 @@ static int decode_b(Dav1dTaskContext *const t,
     const int cbx4 = bx4 >> ss_hor, cby4 = by4 >> ss_ver;
     const int bw4 = b_dim[0], bh4 = b_dim[1];
     const int w4 = imin(bw4, f->bw - t->bx), h4 = imin(bh4, f->bh - t->by);
+
+    // Ensure block dimensions are within valid ranges
+    if (bw4 <= 0 || bh4 <= 0 || w4 <= 0 || h4 <= 0 || bw4 > 32 || bh4 > 32) {
+        return -1; // Return error if dimensions are invalid
+    }
     const int cbw4 = (bw4 + ss_hor) >> ss_hor, cbh4 = (bh4 + ss_ver) >> ss_ver;
     const int have_left = t->bx > ts->tiling.col_start;
     const int have_top = t->by > ts->tiling.row_start;
@@ -739,8 +744,12 @@ static int decode_b(Dav1dTaskContext *const t,
                            (bh4 > ss_ver || t->by & 1);
 
     if (t->frame_thread.pass == 2) {
-        if (b->intra) {
-            f->bd_fn.recon_b_intra(t, bs, intra_edge_flags, b);
+    if (b->intra) {
+        // Validate prediction mode
+        if (b->y_mode < 0 || b->y_mode >= N_INTRA_PRED_MODES) {
+            return -1; // Return error if prediction mode is invalid
+        }
+        f->bd_fn.recon_b_intra(t, bs, intra_edge_flags, b);
 
             const enum IntraPredMode y_mode_nofilt =
                 b->y_mode == FILTER_PRED ? DC_PRED : b->y_mode;
diff --git a/src/thread_task.c b/src/thread_task.c
index 31794ef..a2e93be 100644
--- a/src/thread_task.c
+++ b/src/thread_task.c
@@ -756,7 +756,11 @@ void *dav1d_worker_task(void *data) {
             const int uses_2pass = c->n_fc > 1;
             tc->frame_thread.pass = !uses_2pass ? 0 :
                 1 + (t->type == DAV1D_TASK_TYPE_TILE_RECONSTRUCTION);
-            if (!error) error = dav1d_decode_tile_sbrow(tc);
+    if (tc && !error) {
+        error = dav1d_decode_tile_sbrow(tc);
+    } else {
+        return NULL; // Return early if tc is NULL
+    }
             const int progress = error ? TILE_ERROR : 1 + sby;
 
             // signal progress
