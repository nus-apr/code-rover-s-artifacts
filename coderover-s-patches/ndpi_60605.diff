diff --git a/src/lib/protocols/http.c b/src/lib/protocols/http.c
index 926b7f03..c8797b10 100644
--- a/src/lib/protocols/http.c
+++ b/src/lib/protocols/http.c
@@ -294,30 +294,36 @@ static ndpi_protocol_category_t ndpi_http_check_content(struct ndpi_detection_mo
 	if(packet->content_disposition_line.ptr[attachment_len] == '\"') {
 	  if(packet->content_disposition_line.ptr[packet->content_disposition_line.len-1] != '\"') {
 	    //case: filename="file_name
-	    flow->http.filename = ndpi_malloc(filename_len);
-	    if(flow->http.filename != NULL) {
-	      strncpy(flow->http.filename, (char*)packet->content_disposition_line.ptr+attachment_len+1, filename_len-1);
-	      flow->http.filename[filename_len-1] = '\0';
+	    if (filename_len > 1) {
+	      flow->http.filename = ndpi_malloc(filename_len);
+	      if(flow->http.filename != NULL) {
+	        strncpy(flow->http.filename, (char*)packet->content_disposition_line.ptr+attachment_len+1, filename_len-1);
+	        flow->http.filename[filename_len-1] = '\0';
+	      }
 	    }
 	  }
 	  else{
 	    //case: filename="file_name"
-	    flow->http.filename = ndpi_malloc(filename_len-1);
+	    if (filename_len > 2) {
+	      flow->http.filename = ndpi_malloc(filename_len-1);
 
-	    if(flow->http.filename != NULL) {
-	      strncpy(flow->http.filename, (char*)packet->content_disposition_line.ptr+attachment_len+1,
-		      filename_len-2);
-	      flow->http.filename[filename_len-2] = '\0';
+	      if(flow->http.filename != NULL) {
+	        strncpy(flow->http.filename, (char*)packet->content_disposition_line.ptr+attachment_len+1,
+		        filename_len-2);
+	        flow->http.filename[filename_len-2] = '\0';
+	      }
 	    }
 	  }
 	}
 	else{
 	  //case: filename=file_name
-	  flow->http.filename = ndpi_malloc(filename_len+1);
+	  if (filename_len > 0) {
+	    flow->http.filename = ndpi_malloc(filename_len+1);
 
-	  if(flow->http.filename != NULL) {
-	    strncpy(flow->http.filename, (char*)packet->content_disposition_line.ptr+attachment_len, filename_len);
-	    flow->http.filename[filename_len] = '\0';
+	    if(flow->http.filename != NULL) {
+	      strncpy(flow->http.filename, (char*)packet->content_disposition_line.ptr+attachment_len, filename_len);
+	      flow->http.filename[filename_len] = '\0';
+	    }
 	  }
 	}
 
@@ -879,11 +885,13 @@ static void check_content_type_and_change_protocol(struct ndpi_detection_module_
       if((flow->http.request_content_type == NULL) && (packet->content_line.len > 0)) {
 	int len = packet->content_line.len + 1;
 
-	flow->http.request_content_type = ndpi_malloc(len);
-	if(flow->http.request_content_type) {
-	  strncpy(flow->http.request_content_type, (char*)packet->content_line.ptr,
-		  packet->content_line.len);
-	  flow->http.request_content_type[packet->content_line.len] = '\0';
+	if (len > 0) {
+	  flow->http.request_content_type = ndpi_malloc(len);
+	  if(flow->http.request_content_type) {
+	    strncpy(flow->http.request_content_type, (char*)packet->content_line.ptr,
+		    packet->content_line.len);
+	    flow->http.request_content_type[packet->content_line.len] = '\0';
+	  }
 	}
       }
     } else {
@@ -891,13 +899,15 @@ static void check_content_type_and_change_protocol(struct ndpi_detection_module_
       if((flow->http.content_type == NULL) && (packet->content_line.len > 0)) {
 	int len = packet->content_line.len + 1;
 
-	flow->http.content_type = ndpi_malloc(len);
-	if(flow->http.content_type) {
-	  strncpy(flow->http.content_type, (char*)packet->content_line.ptr,
-		  packet->content_line.len);
-	  flow->http.content_type[packet->content_line.len] = '\0';
+	if (len > 0) {
+	  flow->http.content_type = ndpi_malloc(len);
+	  if(flow->http.content_type) {
+	    strncpy(flow->http.content_type, (char*)packet->content_line.ptr,
+		    packet->content_line.len);
+	    flow->http.content_type[packet->content_line.len] = '\0';
 
-	  flow->guessed_category = flow->category = ndpi_http_check_content(ndpi_struct, flow);
+	    flow->guessed_category = flow->category = ndpi_http_check_content(ndpi_struct, flow);
+	  }
 	}
       }
     }
