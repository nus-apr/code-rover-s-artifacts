diff --git a/MagickCore/annotate.c b/MagickCore/annotate.c
index 91913a97a..7bc00ce7f 100644
--- a/MagickCore/annotate.c
+++ b/MagickCore/annotate.c
@@ -1453,15 +1453,35 @@ static MagickBooleanType RenderFreetype(Image *image,const DrawInfo *draw_info,
       args.pathname=ConstantString(draw_info->font+1);
   face=(FT_Face) NULL;
   ft_status=FT_Open_Face(library,&args,(long) draw_info->face,&face);
-  if (ft_status != 0)
-    {
-      (void) FT_Done_FreeType(library);
-      (void) ThrowMagickException(exception,GetMagickModule(),TypeError,
-        "UnableToReadFont","`%s'",args.pathname);
-      args.pathname=DestroyString(args.pathname);
-      return(MagickFalse);
-    }
+  if (ft_status != 0 || face == NULL)
+  {
+    (void) FT_Done_FreeType(library);
+    (void) ThrowMagickException(exception,GetMagickModule(),TypeError,
+      "UnableToReadFont","`%s'",args.pathname);
+    args.pathname=DestroyString(args.pathname);
+    return(MagickFalse);
+  }
   args.pathname=DestroyString(args.pathname);
+
+  // Validate the number of glyphs and charmap
+  if (face->num_glyphs <= 0 || face->charmap == NULL)
+  {
+    (void) FT_Done_Face(face);
+    (void) FT_Done_FreeType(library);
+    ThrowMagickException(exception,GetMagickModule(),TypeError,
+      "InvalidFontData","`%s'",draw_info->font);
+    return(MagickFalse);
+  }
+
+  // Ensure the charmap is properly selected
+  if (FT_Select_Charmap(face, FT_ENCODING_UNICODE) != 0)
+  {
+    (void) FT_Done_Face(face);
+    (void) FT_Done_FreeType(library);
+    ThrowMagickException(exception,GetMagickModule(),TypeError,
+      "UnableToSelectCharmap","`%s'",draw_info->font);
+    return(MagickFalse);
+  }
   if ((draw_info->metrics != (char *) NULL) &&
       (IsPathAccessible(draw_info->metrics) != MagickFalse))
     (void) FT_Attach_File(face,draw_info->metrics);
@@ -1660,14 +1680,25 @@ static MagickBooleanType RenderFreetype(Image *image,const DrawInfo *draw_info,
     /*
       Render UTF-8 sequence.
     */
-    glyph.id=(FT_UInt) grapheme[i].index;
-    if (glyph.id == 0)
-      glyph.id=missing_glyph_id;
-    if ((glyph.id != 0) && (last_glyph_id != 0))
-      origin.x+=(FT_Pos) (64.0*draw_info->kerning);
-    glyph.origin=origin;
-    glyph.origin.x+=(FT_Pos) grapheme[i].x_offset;
-    glyph.origin.y+=(FT_Pos) grapheme[i].y_offset;
+  glyph.id=(FT_UInt) grapheme[i].index;
+  if (glyph.id == 0)
+    glyph.id=missing_glyph_id;
+  if ((glyph.id != 0) && (last_glyph_id != 0))
+    origin.x+=(FT_Pos) (64.0*draw_info->kerning);
+  glyph.origin=origin;
+
+  // Ensure offsets are within bounds
+  if (grapheme[i].x_offset < 0 || grapheme[i].y_offset < 0)
+  {
+    (void) FT_Done_Face(face);
+    (void) FT_Done_FreeType(library);
+    ThrowMagickException(exception,GetMagickModule(),TypeError,
+      "InvalidGraphemeOffset","`%s'",draw_info->font);
+    return(MagickFalse);
+  }
+
+  glyph.origin.x+=(FT_Pos) grapheme[i].x_offset;
+  glyph.origin.y+=(FT_Pos) grapheme[i].y_offset;
     if (glyph.image != (FT_Glyph) NULL)
       {
         FT_Done_Glyph(glyph.image);
