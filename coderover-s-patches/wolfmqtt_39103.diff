diff --git a/src/mqtt_client.c b/src/mqtt_client.c
index 25e69bc..f738fe4 100644
--- a/src/mqtt_client.c
+++ b/src/mqtt_client.c
@@ -356,12 +356,16 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
             p_publish->protocol_level = client->protocol_level;
         #endif
             rc = MqttDecode_Publish(rx_buf, rx_len, p_publish);
-            if (rc >= 0) {
-                packet_id = p_publish->packet_id;
-            #ifdef WOLFMQTT_V5
-                props = p_publish->props;
-            #endif
-            }
+if (rc >= 0) {
+    packet_id = p_publish->packet_id;
+#ifdef WOLFMQTT_V5
+    if (p_publish->props != NULL) {
+        props = p_publish->props;
+    } else {
+        return MQTT_CODE_ERROR_OUT_OF_BUFFER;
+    }
+#endif
+}
             break;
         }
         case MQTT_PACKET_TYPE_PUBLISH_ACK:
diff --git a/src/mqtt_packet.c b/src/mqtt_packet.c
index ce44340..7db2137 100755
--- a/src/mqtt_packet.c
+++ b/src/mqtt_packet.c
@@ -968,15 +968,20 @@ int MqttDecode_Publish(byte *rx_buf, int rx_buf_len, MqttPublish *publish)
         variable_len += tmp + props_len;
         if (variable_len + header_len <= rx_buf_len) {
             rx_payload += tmp;
-            if (props_len > 0) {
-                /* Decode the Properties */
-                tmp = MqttDecode_Props((MqttPacketType)publish->type,
-                    &publish->props, rx_payload,
-                    (word32)(rx_buf_len - (rx_payload - rx_buf)), props_len);
-                if (tmp < 0)
-                    return tmp;
-                rx_payload += tmp;
-            }
+if (props_len > 0) {
+    /* Decode the Properties */
+    if (props_len > (word32)(rx_buf_len - (rx_payload - rx_buf))) {
+        return MQTT_CODE_ERROR_OUT_OF_BUFFER;
+    }
+    tmp = MqttDecode_Props((MqttPacketType)publish->type,
+        &publish->props, rx_payload,
+        (word32)(rx_buf_len - (rx_payload - rx_buf)), props_len);
+    if (tmp < 0) {
+        publish->props = NULL; // Ensure props is set to NULL on error
+        return tmp;
+    }
+    rx_payload += tmp;
+}
         }
         else {
             return MQTT_CODE_ERROR_OUT_OF_BUFFER;
