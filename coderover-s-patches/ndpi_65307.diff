diff --git a/src/lib/protocols/quic.c b/src/lib/protocols/quic.c
index 0b8674f3..45cba065 100644
--- a/src/lib/protocols/quic.c
+++ b/src/lib/protocols/quic.c
@@ -1375,10 +1375,12 @@ void process_tls(struct ndpi_detection_module_struct *ndpi_struct,
   const u_int8_t *p;
   p = packet->payload;
   p_len = packet->payload_packet_len;
-  packet->payload = crypto_data;
-  packet->payload_packet_len = crypto_data_len;
+  if (crypto_data_len <= packet->payload_packet_len) { // Validate crypto_data_len
+    packet->payload = crypto_data;
+    packet->payload_packet_len = crypto_data_len;
 
-  processClientServerHello(ndpi_struct, flow, flow->protos.tls_quic.quic_version);
+    processClientServerHello(ndpi_struct, flow, flow->protos.tls_quic.quic_version);
+  }
   flow->protos.tls_quic.hello_processed = 1; /* Allow matching of custom categories */
 
   /* Restore */
diff --git a/src/lib/protocols/tls.c b/src/lib/protocols/tls.c
index 71f6eb0b..557d47cb 100644
--- a/src/lib/protocols/tls.c
+++ b/src/lib/protocols/tls.c
@@ -2384,14 +2384,16 @@ int processClientServerHello(struct ndpi_detection_module_struct *ndpi_struct,
 
 		ja.client.num_signature_algorithms = ndpi_min(sa_size, MAX_NUM_JA);
 
-		for(i=0, id=0; i<tot_signature_algorithms_len && s_offset+i<total_len; i++) {
-		  int rc = ndpi_snprintf(&ja.client.signature_algorithms_str[i*2],
-					 sizeof(ja.client.signature_algorithms_str)-i*2,
-					 "%02X", packet->payload[s_offset+i]);
-		  ja.client.signature_algorithms[id++] = ntohs(*(u_int16_t*)&packet->payload[s_offset+i*2]);
-
-		  if(rc < 0) break;
-		}
+    for(i=0, id=0; i<tot_signature_algorithms_len && s_offset+i<total_len; i++) {
+      if (s_offset + i >= packet->payload_packet_len) break; // Ensure we don't read beyond the buffer
+      int rc = ndpi_snprintf(&ja.client.signature_algorithms_str[i*2],
+                             sizeof(ja.client.signature_algorithms_str)-i*2,
+                             "%02X", packet->payload[s_offset+i]);
+      if (s_offset + i*2 + 1 >= packet->payload_packet_len) break; // Ensure we have enough space for 16-bit read
+      ja.client.signature_algorithms[id++] = ntohs(*(u_int16_t*)&packet->payload[s_offset+i*2]);
+
+      if(rc < 0) break;
+    }
 
 		for(i=0; i<tot_signature_algorithms_len && s_offset + (int)i + 2 < packet->payload_packet_len; i+=2) {
 		  u_int16_t signature_algo = (u_int16_t)ntohs(*((u_int16_t*)&packet->payload[s_offset+i]));
