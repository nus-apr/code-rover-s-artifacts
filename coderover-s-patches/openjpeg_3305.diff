diff --git a/src/lib/openjp2/tcd.c b/src/lib/openjp2/tcd.c
index d577f024..366da489 100644
--- a/src/lib/openjp2/tcd.c
+++ b/src/lib/openjp2/tcd.c
@@ -688,6 +688,8 @@ OPJ_BOOL opj_alloc_tile_component_data(opj_tcd_tilecomp_t *l_tilec)
     if ((l_tilec->data == 00) ||
             ((l_tilec->data_size_needed > l_tilec->data_size) &&
              (l_tilec->ownsData == OPJ_FALSE))) {
+        // Ensure data_size_needed is correctly calculated
+        l_tilec->data_size_needed = l_tilec->numresolutions * sizeof(OPJ_FLOAT32);
         l_tilec->data = (OPJ_INT32 *) opj_image_data_alloc(l_tilec->data_size_needed);
         if (!l_tilec->data && l_tilec->data_size_needed != 0) {
             return OPJ_FALSE;
@@ -1960,6 +1962,16 @@ static OPJ_BOOL opj_tcd_mct_decode(opj_tcd_t *p_tcd, opj_event_mgr_t *p_manager)
     opj_tcd_tilecomp_t * l_tile_comp = l_tile->comps;
     OPJ_UINT32 l_samples, i;
 
+    // Ensure buffers are large enough
+    if (l_tile->numcomps >= 3) {
+        if (l_tile_comp[0].data_size_needed < l_samples * sizeof(OPJ_FLOAT32) ||
+            l_tile_comp[1].data_size_needed < l_samples * sizeof(OPJ_FLOAT32) ||
+            l_tile_comp[2].data_size_needed < l_samples * sizeof(OPJ_FLOAT32)) {
+            opj_event_msg(p_manager, EVT_ERROR, "Insufficient buffer size for MCT decoding.\n");
+            return OPJ_FALSE;
+        }
+    }
+
     if (! l_tcp->mct) {
         return OPJ_TRUE;
     }
