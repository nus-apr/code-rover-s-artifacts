diff --git a/AK/RefPtr.h b/AK/RefPtr.h
index 66815279dc..fbb5836f02 100644
--- a/AK/RefPtr.h
+++ b/AK/RefPtr.h
@@ -90,9 +90,13 @@ struct RefPtrTraits {
         // unlock it
         FlatPtr bits;
         for (;;) {
-            bits = atomic_var.fetch_or(1, AK::MemoryOrder::memory_order_acq_rel);
-            if (!(bits & 1))
-                break;
+            do {
+                bits = atomic_var.load(AK::MemoryOrder::memory_order_acquire);
+                if (bits & 1)
+                    continue; // If already locked, wait for it to be unlocked
+                if (atomic_var.compare_exchange_strong(bits, bits | 1, AK::MemoryOrder::memory_order_acq_rel))
+                    break; // Successfully locked
+            } while (true);
 #ifdef KERNEL
             Kernel::Processor::wait_check();
 #endif
@@ -411,8 +415,11 @@ private:
         // 3. Thread A finishes step #1 by attempting to add a reference to
         //    the object that was already deleted in step #2
         FlatPtr bits = PtrTraits::lock(m_bits);
-        if (T* ptr = PtrTraits::as_ptr(bits))
-            ptr->ref();
+        if (T* ptr = PtrTraits::as_ptr(bits)) {
+            if (ptr) { // Ensure the pointer is not null
+                ptr->ref();
+            }
+        }
         PtrTraits::unlock(m_bits, bits);
         return bits;
     }
diff --git a/Userland/Libraries/LibJS/Runtime/Value.cpp b/Userland/Libraries/LibJS/Runtime/Value.cpp
index ab045e17a9..9d4f251346 100644
--- a/Userland/Libraries/LibJS/Runtime/Value.cpp
+++ b/Userland/Libraries/LibJS/Runtime/Value.cpp
@@ -1388,10 +1388,10 @@ TriState abstract_relation(GlobalObject& global_object, bool left_first, Value l
     if (left_first) {
         x_primitive = lhs.to_primitive(global_object, Value::PreferredType::Number);
         if (global_object.vm().exception())
-            return {};
+            return TriState::Unknown; // Return a safe value on exception
         y_primitive = rhs.to_primitive(global_object, Value::PreferredType::Number);
         if (global_object.vm().exception())
-            return {};
+            return TriState::Unknown; // Return a safe value on exception
     } else {
         y_primitive = lhs.to_primitive(global_object, Value::PreferredType::Number);
         if (global_object.vm().exception())
