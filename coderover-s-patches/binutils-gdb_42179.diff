diff --git a/bfd/elf64-bpf.c b/bfd/elf64-bpf.c
index beabad79aff..a5c6b6b3739 100644
--- a/bfd/elf64-bpf.c
+++ b/bfd/elf64-bpf.c
@@ -632,6 +632,10 @@ bpf_elf_generic_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol,
   relocation += reloc_entry->addend;
 
   where = (bfd_byte *) data + reloc_entry->address;
+  bfd_size_type buffer_size = bfd_get_section_limit_octets(abfd, input_section);
+  if (reloc_entry->address >= buffer_size) {
+    return bfd_reloc_outofrange;
+  }
 
   status = bfd_check_overflow (reloc_entry->howto->complain_on_overflow,
 			       reloc_entry->howto->bitsize,
@@ -649,6 +653,9 @@ bpf_elf_generic_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol,
 	 instructions, and the upper 32 bits placed at the very end of the
 	 instruction. that is, there are 32 unused bits between them. */
 
+      if (reloc_entry->address + 16 > buffer_size) {
+        return bfd_reloc_outofrange;
+      }
       bfd_put_32 (abfd, (relocation & 0xFFFFFFFF), where + 4);
       bfd_put_32 (abfd, (relocation >> 32), where + 12);
     }
@@ -657,6 +664,9 @@ bpf_elf_generic_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol,
       /* For other kinds of relocations, the relocated value simply goes
 	 BITPOS bits from the start of the entry. This is always a multiple
 	 of 8, i.e. whole bytes.  */
+      if (reloc_entry->address + reloc_entry->howto->bitpos / 8 + (reloc_entry->howto->bitsize / 8) > buffer_size) {
+        return bfd_reloc_outofrange;
+      }
       bfd_put (reloc_entry->howto->bitsize, abfd, relocation,
 	       where + reloc_entry->howto->bitpos / 8);
     }
