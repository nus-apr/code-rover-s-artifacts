diff --git a/src/lxc/conf.c b/src/lxc/conf.c
index d56ce1b64..e5fc30c09 100644
--- a/src/lxc/conf.c
+++ b/src/lxc/conf.c
@@ -3774,16 +3774,29 @@ int lxc_clear_sysctls(struct lxc_conf *c, const char *key)
 		return -1;
 
 	lxc_list_for_each_safe (it, &c->sysctls, next) {
+		if (!it || !(it->elem))
+			continue;
+
 		struct lxc_sysctl *elem = it->elem;
 
 		if (!all && !strequal(elem->key, k))
 			continue;
 
 		lxc_list_del(it);
-		free(elem->key);
-		free(elem->value);
-		free(elem);
+		if (elem) {
+			if (elem->key) {
+				free(elem->key);
+				elem->key = NULL;
+			}
+			if (elem->value) {
+				free(elem->value);
+				elem->value = NULL;
+			}
+			free(elem);
+			elem = NULL;
+		}
 		free(it);
+		it = NULL;
 	}
 
 	return 0;
diff --git a/src/lxc/confile.c b/src/lxc/confile.c
index 33a86d7cc..251fddbce 100644
--- a/src/lxc/confile.c
+++ b/src/lxc/confile.c
@@ -2065,17 +2065,26 @@ static int set_config_sysctl(const char *key, const char *value,
 		return ret_errno(ENOMEM);
 
 	sysctl_elem = malloc(sizeof(*sysctl_elem));
-	if (!sysctl_elem)
+	if (!sysctl_elem) {
+		free(sysctl_list);
 		return ret_errno(ENOMEM);
+	}
 	memset(sysctl_elem, 0, sizeof(*sysctl_elem));
 
 	sysctl_elem->key = strdup(key);
-	if (!sysctl_elem->key)
+	if (!sysctl_elem->key) {
+		free(sysctl_elem);
+		free(sysctl_list);
 		return ret_errno(ENOMEM);
+	}
 
 	sysctl_elem->value = strdup(value);
-	if (!sysctl_elem->value)
+	if (!sysctl_elem->value) {
+		free(sysctl_elem->key);
+		free(sysctl_elem);
+		free(sysctl_list);
 		return ret_errno(ENOMEM);
+	}
 
 	lxc_list_add_elem(sysctl_list, move_ptr(sysctl_elem));
 	lxc_list_add_tail(&lxc_conf->sysctls, move_ptr(sysctl_list));
