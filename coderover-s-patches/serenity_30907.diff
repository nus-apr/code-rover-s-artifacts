diff --git a/Userland/Libraries/LibCrypto/ASN1/DER.h b/Userland/Libraries/LibCrypto/ASN1/DER.h
index 47334724d3..31bdfa98e6 100644
--- a/Userland/Libraries/LibCrypto/ASN1/DER.h
+++ b/Userland/Libraries/LibCrypto/ASN1/DER.h
@@ -41,14 +41,15 @@ static bool der_decode_integer(const u8* in, size_t length, UnsignedBigInteger&
 
     size_t x { 0 };
     // must start with 0x02
-    if ((in[x++] & 0x1f) != 0x02) {
-        dbgln("not an integer {} ({} follows)", in[x - 1], in[x]);
+    if (x >= length || (in[x] & 0x1f) != 0x02) {
+        dbgln("not an integer or out of bounds {} ({} follows)", in[x], x + 1 < length ? in[x + 1] : 0);
         return false;
     }
+    x++;
 
     // decode length
     size_t z = in[x++];
-    if ((x & 0x80) == 0) {
+    if (x < length && (in[x] & 0x80) == 0) {
         // overflow
         if (x + z > length) {
             dbgln("would overflow {} > {}", z + x, length);
@@ -288,8 +289,8 @@ static inline bool der_decode_sequence(const u8* in, size_t in_length, ASN1::Lis
 
         y = in[x++] & 0x7f;
 
-        if (x + y > in_length) {
-            dbgln("would overflow {} > {}", x + y, in_length);
+        if (x >= in_length || x + y > in_length) {
+            dbgln("would overflow or out of bounds {} > {}", x + y, in_length);
             return false; // overflow
         }
         block_size = 0;
@@ -298,8 +299,8 @@ static inline bool der_decode_sequence(const u8* in, size_t in_length, ASN1::Lis
     }
 
     // overflow
-    if (x + block_size > in_length) {
-        dbgln("would overflow {} > {}", x + block_size, in_length);
+    if (x >= in_length || x + block_size > in_length) {
+        dbgln("would overflow or out of bounds {} > {}", x + block_size, in_length);
         return false;
     }
 
