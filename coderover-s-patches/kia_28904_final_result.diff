diff --git a/src/sksl/SkSLIRGenerator.cpp b/src/sksl/SkSLIRGenerator.cpp
index 9c1dce0eda..baccc1e0a1 100644
--- a/src/sksl/SkSLIRGenerator.cpp
+++ b/src/sksl/SkSLIRGenerator.cpp
@@ -1786,6 +1786,10 @@ std::unique_ptr<Expression> IRGenerator::constantFoldVector(const Expression& le
     const auto vectorComponentwiseFold = [&](auto foldFn) -> std::unique_ptr<Constructor> {
         ExpressionArray args;
         for (int i = 0; i < type.columns(); i++) {
+            if (i < 0 || i >= left.type().columns() || i >= right.type().columns()) {
+                fErrors.error(left.fOffset, "index out of bounds");
+                return nullptr;
+            }
             T value = foldFn(left.getVecComponent<T>(i), right.getVecComponent<T>(i));
             args.push_back(std::make_unique<Literal<T>>(fContext, left.fOffset, value));
         }
diff --git a/src/sksl/ir/SkSLConstructor.cpp b/src/sksl/ir/SkSLConstructor.cpp
index 0291e9a60f..db7efdb97f 100644
--- a/src/sksl/ir/SkSLConstructor.cpp
+++ b/src/sksl/ir/SkSLConstructor.cpp
@@ -78,7 +78,12 @@ resultType Constructor::getVecComponent(int index) const {
 
     // Walk through all the constructor arguments until we reach the index we're searching for.
     int current = 0;
-    for (const std::unique_ptr<Expression>& arg : this->arguments()) {
+    const ExpressionArray& args = this->arguments();
+    if (index < 0 || index >= args.size()) {
+        SkDEBUGFAILF("index out of bounds: %d in %s\n", index, description().c_str());
+        return -1;
+    }
+    for (const std::unique_ptr<Expression>& arg : args) {
         if (current > index) {
             // Somehow, we went past the argument we're looking for. Bail.
             break;
