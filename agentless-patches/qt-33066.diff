diff --git a/qt/qtbase/src/corelib/time/qtimezoneprivate_tz.cpp b/qt/qtbase/src/corelib/time/qtimezoneprivate_tz.cpp
index a702c76..c0760fa 100644
--- a/qt/qtbase/src/corelib/time/qtimezoneprivate_tz.cpp
+++ b/qt/qtbase/src/corelib/time/qtimezoneprivate_tz.cpp
@@ -589,22 +589,26 @@ static QList<QTimeZonePrivate::Data> calculatePosixTransitions(const QByteArray
 
 
     // Get the std to dst transtion details
-    QList<QByteArray> dstParts = parts.at(1).split('/');
-    QByteArray dstDateRule = dstParts.at(0);
-    QTime dstTime;
-    if (dstParts.count() > 1)
-        dstTime = parsePosixTransitionTime(dstParts.at(1));
-    else
-        dstTime = QTime(2, 0, 0);
-
-    // Get the dst to std transtion details
-    QList<QByteArray> stdParts = parts.at(2).split('/');
-    QByteArray stdDateRule = stdParts.at(0);
-    QTime stdTime;
-    if (stdParts.count() > 1)
-        stdTime = parsePosixTransitionTime(stdParts.at(1));
-    else
-        stdTime = QTime(2, 0, 0);
+    if (parts.size() > 1) {
+        QList<QByteArray> dstParts = parts.at(1).split('/');
+        QByteArray dstDateRule = dstParts.at(0);
+        QTime dstTime;
+        if (dstParts.count() > 1)
+            dstTime = parsePosixTransitionTime(dstParts.at(1));
+        else
+            dstTime = QTime(2, 0, 0);
+
+        // Get the dst to std transtion details
+        if (parts.size() > 2) {
+            QList<QByteArray> stdParts = parts.at(2).split('/');
+            QByteArray stdDateRule = stdParts.at(0);
+            QTime stdTime;
+            if (stdParts.count() > 1)
+                stdTime = parsePosixTransitionTime(stdParts.at(1));
+            else
+                stdTime = QTime(2, 0, 0);
+        }
+    }
 
     // Limit year to the range QDateTime can represent:
     const int minYear = int(QDateTime::YearRange::First);
